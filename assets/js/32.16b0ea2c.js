(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{409:function(e,t,a){"use strict";a.r(t);var n=a(44),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"what-is-an-ecs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-an-ecs"}},[e._v("#")]),e._v(" What is an ECS?")]),e._v(" "),a("p",[e._v("You might want to read this detailed "),a("a",{attrs:{href:"https://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013",target:"_blank",rel:"noopener noreferrer"}},[e._v("GameDev.net Article"),a("OutboundLink")],1),e._v(" about Entity Component Systems, but just in case the above link is broken or you want a shorter explanation, I'll summarize it:")]),e._v(" "),a("h2",{attrs:{id:"inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inheritance"}},[e._v("#")]),e._v(" Inheritance")]),e._v(" "),a("p",[e._v("Some games, especially older ones, would create entities by using inheritance and store both data and logic in classes:")]),e._v(" "),a("ul",[a("li",[e._v("Entity\n"),a("ul",[a("li",[e._v("Character\n"),a("ul",[a("li",[e._v("Player")]),e._v(" "),a("li",[e._v("Enemy")])])]),e._v(" "),a("li",[e._v("Item")])])])]),e._v(" "),a("p",[e._v("But this way, you might end up duplicating code and possibly having very large classes containing all the logic.")]),e._v(" "),a("h2",{attrs:{id:"composition-over-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composition-over-inheritance"}},[e._v("#")]),e._v(" Composition Over Inheritance")]),e._v(" "),a("p",[e._v("With an ECS, instead of creating classes, which contain both data and logic for a specific entity type, you separate the data and the logic:")]),e._v(" "),a("ul",[a("li",[e._v("An entity is only an id and a list of components")]),e._v(" "),a("li",[e._v("A component contains only data")]),e._v(" "),a("li",[e._v("A system contains the logic to process entities with certain components")])]),e._v(" "),a("h3",{attrs:{id:"component-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-examples"}},[e._v("#")]),e._v(" Component Examples")]),e._v(" "),a("ul",[a("li",[e._v("PositionComponent (x, y)")]),e._v(" "),a("li",[e._v("HealthComponent (value)")]),e._v(" "),a("li",[e._v("SpriteComponent (image, animations, ...)")])]),e._v(" "),a("h3",{attrs:{id:"system-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-examples"}},[e._v("#")]),e._v(" System Examples")]),e._v(" "),a("ul",[a("li",[e._v("PhysicsSystem - Applies velocity to positions and checks for collision")]),e._v(" "),a("li",[e._v("RenderSystem - Draws sprites")]),e._v(" "),a("li",[e._v("DamageSystem - Adjusts the health level in case of a damage event.")])]),e._v(" "),a("h2",{attrs:{id:"benefits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#benefits"}},[e._v("#")]),e._v(" Benefits")]),e._v(" "),a("ul",[a("li",[e._v("Write logic that can be reused on multiple entity types and doesn't have to know how the other game logic behaves.")]),e._v(" "),a("li",[e._v("Use a data-driven approach or persist your game-state.")]),e._v(" "),a("li",[e._v("Prevent conflicts while multiple people work on the same entity type, but on different logic.")]),e._v(" "),a("li",[e._v("Creating new entity types might be as easy as composing different components.")]),e._v(" "),a("li",[e._v("Trying new logic is a matter of enabling new systems and possibly disabling others.")])])])}),[],!1,null,null,null);t.default=i.exports}}]);