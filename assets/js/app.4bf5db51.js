(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,s,a=e[0],l=e[1],c=e[2],u=0,m=[];u<a.length;u++)s=a[u],Object.prototype.hasOwnProperty.call(i,s)&&i[s]&&m.push(i[s][0]),i[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(d&&d(e);m.length;)m.shift()();return o.push.apply(o,c||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,a=1;a<t.length;a++){var l=t[a];0!==i[l]&&(r=!1)}r&&(o.splice(e--,1),n=s(s.s=t[0]))}return n}var r={},i={1:0},o=[];function s(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(n){var e=[],t=i[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=i[n]=[e,r]}));e.push(t[2]=r);var o,a=document.createElement("script");a.charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.src=function(n){return s.p+"assets/js/"+({}[n]||n)+"."+{2:"aa3ab20c",3:"d46dc3a3",4:"4b6e964d",5:"4ef168c3",6:"3ad9f15e",7:"4231eda1",8:"bb6cb321",9:"2ed191d3",10:"10a5de20",11:"c9cba4b9",12:"370d36d4",13:"8d3f1beb",14:"a6a2e722",15:"ed1e8d27",16:"13c3ce48",17:"62044b85",18:"e2bf8690",19:"cac5e8ea",20:"451692eb",21:"ec9fdd0d",22:"85f54c3e",23:"564ecab6",24:"2b0b1ab4",25:"04d7621f",26:"6c12830a",27:"b7308bd2",28:"9691b61e",29:"74ff62cc",30:"0d5babd0",31:"ef0f6587",32:"183f8b17",33:"9a8f9b7d",34:"fd07829c",35:"0ba874be",36:"e17b798a",37:"d8a35aa9",38:"409b2a93",39:"31771669",40:"d97bf9b8",41:"9d0939ef",42:"c7434869",43:"7cd557aa",44:"f0c2c782",45:"fa8d3cc5",46:"dc7f2fee",47:"2165a7c7",48:"af8ebc90",49:"2b339562",50:"9b732c77",51:"52ddf71a",52:"5564d509",53:"e13a03e1",54:"71e7aa77",55:"2aa188b6",56:"0fd7ab1b",57:"1a5c6746",58:"83b7c54b",59:"3bed583b",60:"32e4aeb3",61:"42ebdff5",62:"3d5c37db",63:"7c8a3e31",64:"9f56fb3b",65:"c05d6e4c"}[n]+".js"}(n);var l=new Error;o=function(e){a.onerror=a.onload=null,clearTimeout(c);var t=i[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+o+")",l.name="ChunkLoadError",l.type=r,l.request=o,t[1](l)}i[n]=void 0}};var c=setTimeout((function(){o({type:"timeout",target:a})}),12e4);a.onerror=a.onload=o,document.head.appendChild(a)}return Promise.all(e)},s.m=n,s.c=r,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)s.d(t,r,function(e){return n[e]}.bind(null,r));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/typed-ecstasy/",s.oe=function(n){throw console.error(n),n};var a=window.webpackJsonp=window.webpackJsonp||[],l=a.push.bind(a);a.push=e,a=a.slice();for(var c=0;c<a.length;c++)e(a[c]);var d=l;o.push([189,0]),t()}([function(n,e,t){var r=t(3),i=t(26).f,o=t(12),s=t(18),a=t(73),l=t(117),c=t(104);n.exports=function(n,e){var t,d,u,m,h,p=n.target,f=n.global,y=n.stat;if(t=f?r:y?r[p]||a(p,{}):(r[p]||{}).prototype)for(d in e){if(m=e[d],u=n.noTargetGet?(h=i(t,d))&&h.value:t[d],!c(f?d:p+(y?".":"#")+d,n.forced)&&void 0!==u){if(typeof m==typeof u)continue;l(m,u)}(n.sham||u&&u.sham)&&o(m,"sham",!0),s(t,d,m,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(3),i=t(50),o=t(7),s=t(52),a=t(75),l=t(112),c=i("wks"),d=r.Symbol,u=l?d:d&&d.withoutSetter||s;n.exports=function(n){return o(c,n)&&(a||"string"==typeof c[n])||(a&&o(d,n)?c[n]=d[n]:c[n]=u("Symbol."+n)),c[n]}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e){n.exports=function(n){return"object"==typeof n?null!==n:"function"==typeof n}},function(n,e,t){var r=t(4);n.exports=function(n){if(!r(n))throw TypeError(String(n)+" is not an object");return n}},function(n,e,t){var r=t(1);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(10),i={}.hasOwnProperty;n.exports=Object.hasOwn||function(n,e){return i.call(r(n),e)}},function(n,e,t){var r=t(6),i=t(110),o=t(5),s=t(51),a=Object.defineProperty;e.f=r?a:function(n,e,t){if(o(n),e=s(e,!0),o(t),i)try{return a(n,e,t)}catch(n){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(83),i=t(18),o=t(201);r||i(Object.prototype,"toString",o,{unsafe:!0})},function(n,e,t){var r=t(23);n.exports=function(n){return Object(r(n))}},function(n,e,t){"use strict";var r=t(107).charAt,i=t(24),o=t(116),s=i.set,a=i.getterFor("String Iterator");o(String,"String",(function(n){s(this,{type:"String Iterator",string:String(n),index:0})}),(function(){var n,e=a(this),t=e.string,i=e.index;return i>=t.length?{value:void 0,done:!0}:(n=r(t,i),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){var r=t(6),i=t(8),o=t(32);n.exports=r?function(n,e,t){return i.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(46),i=Math.min;n.exports=function(n){return n>0?i(r(n),9007199254740991):0}},function(n,e,t){var r=t(36),i=t(23);n.exports=function(n){return r(i(n))}},function(n,e,t){var r=t(3),i=t(129),o=t(102),s=t(12),a=t(2),l=a("iterator"),c=a("toStringTag"),d=o.values;for(var u in i){var m=r[u],h=m&&m.prototype;if(h){if(h[l]!==d)try{s(h,l,d)}catch(n){h[l]=d}if(h[c]||s(h,c,u),i[u])for(var p in o)if(h[p]!==o[p])try{s(h,p,o[p])}catch(n){h[p]=o[p]}}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(140),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();n.exports=o},function(n,e,t){var r=t(3),i=t(12),o=t(7),s=t(73),a=t(79),l=t(24),c=l.get,d=l.enforce,u=String(String).split("String");(n.exports=function(n,e,t,a){var l,c=!!a&&!!a.unsafe,m=!!a&&!!a.enumerable,h=!!a&&!!a.noTargetGet;"function"==typeof t&&("string"!=typeof e||o(t,"name")||i(t,"name",e),(l=d(t)).source||(l.source=u.join("string"==typeof e?e:""))),n!==r?(c?!h&&n[e]&&(m=!0):delete n[e],m?n[e]=t:i(n,e,t)):m?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||a(this)}))},function(n,e,t){var r=t(111),i=t(3),o=function(n){return"function"==typeof n?n:void 0};n.exports=function(n,e){return arguments.length<2?o(r[n])||o(i[n]):r[n]&&r[n][e]||i[n]&&i[n][e]}},function(n,e){n.exports=!1},function(n,e){n.exports=function(n){if("function"!=typeof n)throw TypeError(String(n)+" is not a function");return n}},function(n,e,t){var r=t(228),i=t(231);n.exports=function(n,e){var t=i(n,e);return r(t)?t:void 0}},function(n,e){n.exports=function(n){if(null==n)throw TypeError("Can't call method on "+n);return n}},function(n,e,t){var r,i,o,s=t(190),a=t(3),l=t(4),c=t(12),d=t(7),u=t(72),m=t(54),h=t(38),p=a.WeakMap;if(s||u.state){var f=u.state||(u.state=new p),y=f.get,g=f.has,b=f.set;r=function(n,e){if(g.call(f,n))throw new TypeError("Object already initialized");return e.facade=n,b.call(f,n,e),e},i=function(n){return y.call(f,n)||{}},o=function(n){return g.call(f,n)}}else{var v=m("state");h[v]=!0,r=function(n,e){if(d(n,v))throw new TypeError("Object already initialized");return e.facade=n,c(n,v,e),e},i=function(n){return d(n,v)?n[v]:{}},o=function(n){return d(n,v)}}n.exports={set:r,get:i,has:o,enforce:function(n){return o(n)?i(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=i(e)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r,i=t(5),o=t(169),s=t(78),a=t(38),l=t(115),c=t(74),d=t(54),u=d("IE_PROTO"),m=function(){},h=function(n){return"<script>"+n+"<\/script>"},p=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(n){}var n,e;p=r?function(n){n.write(h("")),n.close();var e=n.parentWindow.Object;return n=null,e}(r):((e=c("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(h("document.F=Object")),n.close(),n.F);for(var t=s.length;t--;)delete p.prototype[s[t]];return p()};a[u]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(m.prototype=i(n),t=new m,m.prototype=null,t[u]=n):t=p(),void 0===e?t:o(t,e)}},function(n,e,t){var r=t(6),i=t(80),o=t(32),s=t(14),a=t(51),l=t(7),c=t(110),d=Object.getOwnPropertyDescriptor;e.f=r?d:function(n,e){if(n=s(n),e=a(e,!0),c)try{return d(n,e)}catch(n){}if(l(n,e))return o(!i.f.call(n,e),n[e])}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e){var t={}.toString;n.exports=function(n){return t.call(n).slice(8,-1)}},function(n,e,t){"use strict";var r=t(0),i=t(30).filter;r({target:"Array",proto:!0,forced:!t(58)("filter")},{filter:function(n){return i(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(48),i=t(36),o=t(10),s=t(13),a=t(108),l=[].push,c=function(n){var e=1==n,t=2==n,c=3==n,d=4==n,u=6==n,m=7==n,h=5==n||u;return function(p,f,y,g){for(var b,v,x=o(p),T=i(x),w=r(f,y,3),E=s(T.length),I=0,S=g||a,C=e?S(p,E):t||m?S(p,0):void 0;E>I;I++)if((h||I in T)&&(v=w(b=T[I],I,x),n))if(e)C[I]=v;else if(v)switch(n){case 3:return!0;case 5:return b;case 6:return I;case 2:l.call(C,b)}else switch(n){case 4:return!1;case 7:l.call(C,b)}return u?-1:c||d?d:C}};n.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(n,e,t){"use strict";var r=t(1);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){throw 1},1)}))}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(28);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){"use strict";var r=t(0),i=t(3),o=t(19),s=t(20),a=t(6),l=t(75),c=t(112),d=t(1),u=t(7),m=t(33),h=t(4),p=t(5),f=t(10),y=t(14),g=t(51),b=t(32),v=t(25),x=t(53),T=t(69),w=t(207),E=t(81),I=t(26),S=t(8),C=t(80),P=t(12),A=t(18),k=t(50),z=t(54),_=t(38),R=t(52),O=t(2),D=t(135),M=t(136),j=t(47),N=t(24),F=t(30).forEach,$=z("hidden"),B=O("toPrimitive"),L=N.set,Y=N.getterFor("Symbol"),U=Object.prototype,W=i.Symbol,q=o("JSON","stringify"),V=I.f,H=S.f,G=w.f,K=C.f,X=k("symbols"),J=k("op-symbols"),Q=k("string-to-symbol-registry"),Z=k("symbol-to-string-registry"),nn=k("wks"),en=i.QObject,tn=!en||!en.prototype||!en.prototype.findChild,rn=a&&d((function(){return 7!=v(H({},"a",{get:function(){return H(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=V(U,e);r&&delete U[e],H(n,e,t),r&&n!==U&&H(U,e,r)}:H,on=function(n,e){var t=X[n]=v(W.prototype);return L(t,{type:"Symbol",tag:n,description:e}),a||(t.description=e),t},sn=c?function(n){return"symbol"==typeof n}:function(n){return Object(n)instanceof W},an=function(n,e,t){n===U&&an(J,e,t),p(n);var r=g(e,!0);return p(t),u(X,r)?(t.enumerable?(u(n,$)&&n[$][r]&&(n[$][r]=!1),t=v(t,{enumerable:b(0,!1)})):(u(n,$)||H(n,$,b(1,{})),n[$][r]=!0),rn(n,r,t)):H(n,r,t)},ln=function(n,e){p(n);var t=y(e),r=x(t).concat(mn(t));return F(r,(function(e){a&&!cn.call(t,e)||an(n,e,t[e])})),n},cn=function(n){var e=g(n,!0),t=K.call(this,e);return!(this===U&&u(X,e)&&!u(J,e))&&(!(t||!u(this,e)||!u(X,e)||u(this,$)&&this[$][e])||t)},dn=function(n,e){var t=y(n),r=g(e,!0);if(t!==U||!u(X,r)||u(J,r)){var i=V(t,r);return!i||!u(X,r)||u(t,$)&&t[$][r]||(i.enumerable=!0),i}},un=function(n){var e=G(y(n)),t=[];return F(e,(function(n){u(X,n)||u(_,n)||t.push(n)})),t},mn=function(n){var e=n===U,t=G(e?J:y(n)),r=[];return F(t,(function(n){!u(X,n)||e&&!u(U,n)||r.push(X[n])})),r};(l||(A((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=R(n),t=function(n){this===U&&t.call(J,n),u(this,$)&&u(this[$],e)&&(this[$][e]=!1),rn(this,e,b(1,n))};return a&&tn&&rn(U,e,{configurable:!0,set:t}),on(e,n)}).prototype,"toString",(function(){return Y(this).tag})),A(W,"withoutSetter",(function(n){return on(R(n),n)})),C.f=cn,S.f=an,I.f=dn,T.f=w.f=un,E.f=mn,D.f=function(n){return on(O(n),n)},a&&(H(W.prototype,"description",{configurable:!0,get:function(){return Y(this).description}}),s||A(U,"propertyIsEnumerable",cn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:W}),F(x(nn),(function(n){M(n)})),r({target:"Symbol",stat:!0,forced:!l},{for:function(n){var e=String(n);if(u(Q,e))return Q[e];var t=W(e);return Q[e]=t,Z[t]=e,t},keyFor:function(n){if(!sn(n))throw TypeError(n+" is not a symbol");if(u(Z,n))return Z[n]},useSetter:function(){tn=!0},useSimple:function(){tn=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!a},{create:function(n,e){return void 0===e?v(n):ln(v(n),e)},defineProperty:an,defineProperties:ln,getOwnPropertyDescriptor:dn}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:un,getOwnPropertySymbols:mn}),r({target:"Object",stat:!0,forced:d((function(){E.f(1)}))},{getOwnPropertySymbols:function(n){return E.f(f(n))}}),q)&&r({target:"JSON",stat:!0,forced:!l||d((function(){var n=W();return"[null]"!=q([n])||"{}"!=q({a:n})||"{}"!=q(Object(n))}))},{stringify:function(n,e,t){for(var r,i=[n],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=e,(h(e)||void 0!==n)&&!sn(n))return m(e)||(e=function(n,e){if("function"==typeof r&&(e=r.call(this,n,e)),!sn(e))return e}),i[1]=e,q.apply(null,i)}});W.prototype[B]||P(W.prototype,B,W.prototype.valueOf),j(W,"Symbol"),_[$]=!0},function(n,e,t){var r=t(41),i=t(213),o=t(214),s=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":s&&s in Object(n)?i(n):o(n)}},function(n,e,t){var r=t(1),i=t(28),o="".split;n.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(n){return"String"==i(n)?o.call(n,""):Object(n)}:Object},function(n,e,t){var r,i,o=t(3),s=t(76),a=o.process,l=a&&a.versions,c=l&&l.v8;c?i=(r=c.split("."))[0]<4?1:r[0]+r[1]:s&&(!(r=s.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=s.match(/Chrome\/(\d+)/))&&(i=r[1]),n.exports=i&&+i},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){"use strict";var r=t(0),i=t(6),o=t(3),s=t(7),a=t(4),l=t(8).f,c=t(117),d=o.Symbol;if(i&&"function"==typeof d&&(!("description"in d.prototype)||void 0!==d().description)){var u={},m=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof m?new d(n):void 0===n?d():d(n);return""===n&&(u[e]=!0),e};c(m,d);var h=m.prototype=d.prototype;h.constructor=m;var p=h.toString,f="Symbol(test)"==String(d("test")),y=/^Symbol\((.*)\)[^)]+$/;l(h,"description",{configurable:!0,get:function(){var n=a(this)?this.valueOf():this,e=p.call(n);if(s(u,n))return"";var t=f?e.slice(7,-1):e.replace(y,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:m})}},function(n,e,t){var r=t(17).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return o}));t(101);var r=t(43);t(34),t(40),t(9),t(59),t(11),t(15),t(137);var i=t(65);function o(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(i.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";function r(n,e,t,r,i,o,s,a){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),s?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),i&&i.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(s)},c._ssrRegister=l):i&&(l=a?function(){i.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(n,e){return l.call(e),d(n,e)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(0),i=t(71);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){return isNaN(n=+n)?0:(n>0?r:t)(n)}},function(n,e,t){var r=t(8).f,i=t(7),o=t(2)("toStringTag");n.exports=function(n,e,t){n&&!i(n=t?n:n.prototype,o)&&r(n,o,{configurable:!0,value:e})}},function(n,e,t){var r=t(21);n.exports=function(n,e,t){if(r(n),void 0===e)return n;switch(t){case 0:return function(){return n.call(e)};case 1:return function(t){return n.call(e,t)};case 2:return function(t,r){return n.call(e,t,r)};case 3:return function(t,r,i){return n.call(e,t,r,i)}}return function(){return n.apply(e,arguments)}}},function(n,e,t){"use strict";var r=t(0),i=t(4),o=t(33),s=t(114),a=t(13),l=t(14),c=t(57),d=t(2),u=t(58)("slice"),m=d("species"),h=[].slice,p=Math.max;r({target:"Array",proto:!0,forced:!u},{slice:function(n,e){var t,r,d,u=l(this),f=a(u.length),y=s(n,f),g=s(void 0===e?f:e,f);if(o(u)&&("function"!=typeof(t=u.constructor)||t!==Array&&!o(t.prototype)?i(t)&&null===(t=t[m])&&(t=void 0):t=void 0,t===Array||void 0===t))return h.call(u,y,g);for(r=new(void 0===t?Array:t)(p(g-y,0)),d=0;y<g;y++,d++)y in u&&c(r,d,u[y]);return r.length=d,r}})},function(n,e,t){var r=t(20),i=t(72);(n.exports=function(n,e){return i[n]||(i[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.15.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(n,e,t){var r=t(4);n.exports=function(n,e){if(!r(n))return n;var t,i;if(e&&"function"==typeof(t=n.toString)&&!r(i=t.call(n)))return i;if("function"==typeof(t=n.valueOf)&&!r(i=t.call(n)))return i;if(!e&&"function"==typeof(t=n.toString)&&!r(i=t.call(n)))return i;throw TypeError("Can't convert object to primitive value")}},function(n,e){var t=0,r=Math.random();n.exports=function(n){return"Symbol("+String(void 0===n?"":n)+")_"+(++t+r).toString(36)}},function(n,e,t){var r=t(113),i=t(78);n.exports=Object.keys||function(n){return r(n,i)}},function(n,e,t){var r=t(50),i=t(52),o=r("keys");n.exports=function(n){return o[n]||(o[n]=i(n))}},function(n,e,t){var r=t(28),i=t(3);n.exports="process"==r(i.process)},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(9);function r(n,e,t,r,i,o,s){try{var a=n[o](s),l=a.value}catch(n){return void t(n)}a.done?e(l):Promise.resolve(l).then(r,i)}function i(n){return function(){var e=this,t=arguments;return new Promise((function(i,o){var s=n.apply(e,t);function a(n){r(s,i,o,a,l,"next",n)}function l(n){r(s,i,o,a,l,"throw",n)}a(void 0)}))}}},function(n,e,t){"use strict";var r=t(51),i=t(8),o=t(32);n.exports=function(n,e,t){var s=r(e);s in n?i.f(n,s,o(0,t)):n[s]=t}},function(n,e,t){var r=t(1),i=t(2),o=t(37),s=i("species");n.exports=function(n){return o>=51||!r((function(){var e=[];return(e.constructor={})[s]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){t(136)("iterator")},function(n,e,t){var r=t(218),i=t(219),o=t(220),s=t(221),a=t(222);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,n.exports=l},function(n,e,t){var r=t(142);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(22)(Object,"create");n.exports=r},function(n,e,t){var r=t(240);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(92);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(49),t(9),t(84),t(137),t(11);var r=t(43);function i(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=i(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),d=r.speed,u=r.easing;return l.offsetWidth,s((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),a(c,function(n,e,t){var i;return(i="translate3d"===r.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,i}(n,d,u)),1===n?(a(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){a(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*i(Math.random()*e,.1,.95)),e=i(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var i,s=e.querySelector(r.barSelector),l=n?"-100":o(t.status||0),d=document.querySelector(r.parent);return a(s,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(i=e.querySelector(r.spinnerSelector))&&m(i),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&m(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var s=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),a=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,i=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);i--;)if((r=n[i]+o)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,i,o=arguments;if(2==o.length)for(t in e)void 0!==(i=e[t])&&e.hasOwnProperty(t)&&r(n,t,i);else r(n,o[1],o[2])}}();function l(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=u(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function d(n,e){var t,r=u(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function m(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=i)},function(n,e,t){"use strict";var r=t(0),i=t(30).map;r({target:"Array",proto:!0,forced:!t(58)("map")},{map:function(n){return i(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(166),i=t(1),o=t(5),s=t(13),a=t(46),l=t(23),c=t(174),d=t(209),u=t(167),m=t(2)("replace"),h=Math.max,p=Math.min,f="$0"==="a".replace(/./,"$0"),y=!!/./[m]&&""===/./[m]("a","$0");r("replace",(function(n,e,t){var r=y?"$":"$0";return[function(n,t){var r=l(this),i=null==n?void 0:n[m];return void 0!==i?i.call(n,r,t):e.call(String(r),n,t)},function(n,i){if("string"==typeof i&&-1===i.indexOf(r)&&-1===i.indexOf("$<")){var l=t(e,this,n,i);if(l.done)return l.value}var m=o(this),f=String(n),y="function"==typeof i;y||(i=String(i));var g=m.global;if(g){var b=m.unicode;m.lastIndex=0}for(var v=[];;){var x=u(m,f);if(null===x)break;if(v.push(x),!g)break;""===String(x[0])&&(m.lastIndex=c(f,s(m.lastIndex),b))}for(var T,w="",E=0,I=0;I<v.length;I++){x=v[I];for(var S=String(x[0]),C=h(p(a(x.index),f.length),0),P=[],A=1;A<x.length;A++)P.push(void 0===(T=x[A])?T:String(T));var k=x.groups;if(y){var z=[S].concat(P,C,f);void 0!==k&&z.push(k);var _=String(i.apply(void 0,z))}else _=d(S,f,C,P,k,i);C>=E&&(w+=f.slice(E,C)+_,E=C+S.length)}return w+f.slice(E)}]}),!!i((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!f||y)},function(n,e,t){var r=t(113),i=t(78).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,i)}},function(n,e,t){var r=t(5),i=t(191);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),e=t instanceof Array}catch(n){}return function(t,o){return r(t),i(o),e?n.call(t,o):t.__proto__=o,t}}():void 0)},function(n,e,t){"use strict";var r,i,o=t(172),s=t(173),a=t(50),l=t(25),c=t(24).get,d=t(184),u=t(185),m=RegExp.prototype.exec,h=a("native-string-replace",String.prototype.replace),p=m,f=(r=/a/,i=/b*/g,m.call(r,"a"),m.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),y=s.UNSUPPORTED_Y||s.BROKEN_CARET,g=void 0!==/()??/.exec("")[1];(f||g||y||d||u)&&(p=function(n){var e,t,r,i,s,a,d,u=this,b=c(u),v=b.raw;if(v)return v.lastIndex=u.lastIndex,e=p.call(v,n),u.lastIndex=v.lastIndex,e;var x=b.groups,T=y&&u.sticky,w=o.call(u),E=u.source,I=0,S=n;if(T&&(-1===(w=w.replace("y","")).indexOf("g")&&(w+="g"),S=String(n).slice(u.lastIndex),u.lastIndex>0&&(!u.multiline||u.multiline&&"\n"!==n[u.lastIndex-1])&&(E="(?: "+E+")",S=" "+S,I++),t=new RegExp("^(?:"+E+")",w)),g&&(t=new RegExp("^"+E+"$(?!\\s)",w)),f&&(r=u.lastIndex),i=m.call(T?t:u,S),T?i?(i.input=i.input.slice(I),i[0]=i[0].slice(I),i.index=u.lastIndex,u.lastIndex+=i[0].length):u.lastIndex=0:f&&i&&(u.lastIndex=u.global?i.index+i[0].length:r),g&&i&&i.length>1&&h.call(i[0],t,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(i[s]=void 0)})),i&&x)for(i.groups=a=l(null),s=0;s<x.length;s++)a[(d=x[s])[0]]=i[d[1]];return i}),n.exports=p},function(n,e,t){var r=t(3),i=t(73),o=r["__core-js_shared__"]||i("__core-js_shared__",{});n.exports=o},function(n,e,t){var r=t(3),i=t(12);n.exports=function(n,e){try{i(r,n,e)}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(3),i=t(4),o=r.document,s=i(o)&&i(o.createElement);n.exports=function(n){return s?o.createElement(n):{}}},function(n,e,t){var r=t(37),i=t(1);n.exports=!!Object.getOwnPropertySymbols&&!i((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(19);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(14),i=t(13),o=t(114),s=function(n){return function(e,t,s){var a,l=r(e),c=i(l.length),d=o(s,c);if(n&&t!=t){for(;c>d;)if((a=l[d++])!=a)return!0}else for(;c>d;d++)if((n||d in l)&&l[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:s(!0),indexOf:s(!1)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(72),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(n){return i.call(n)}),n.exports=r.inspectSource},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(n){var e=i(this,n);return!!e&&e.enumerable}:r},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(7),i=t(10),o=t(54),s=t(120),a=o("IE_PROTO"),l=Object.prototype;n.exports=s?Object.getPrototypeOf:function(n){return n=i(n),r(n,a)?n[a]:"function"==typeof n.constructor&&n instanceof n.constructor?n.constructor.prototype:n instanceof Object?l:null}},function(n,e,t){var r={};r[t(2)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(6),i=t(8).f,o=Function.prototype,s=o.toString,a=/^\s*function ([^ (]*)/;r&&!("name"in o)&&i(o,"name",{configurable:!0,get:function(){try{return s.call(this).match(a)[1]}catch(n){return""}}})},function(n,e,t){var r=t(212),i=t(27),o=Object.prototype,s=o.hasOwnProperty,a=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return i(n)&&s.call(n,"callee")&&!a.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(22)(t(17),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(232),i=t(239),o=t(241),s=t(242),a=t(243);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(16),i=t(92),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!i(n))||(s.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(35),i=t(27);n.exports=function(n){return"symbol"==typeof n||i(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(101);t(34),t(40),t(9),t(59),t(11),t(15);var r=t(65);function i(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,i,o=[],s=!0,a=!1;try{for(t=t.call(n);!(s=(r=t.next()).done)&&(o.push(r.value),!e||o.length!==e);s=!0);}catch(n){a=!0,i=n}finally{try{s||null==t.return||t.return()}finally{if(a)throw i}}return o}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(0),i=t(30).some;r({target:"Array",proto:!0,forced:!t(31)("some")},{some:function(n){return i(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),i=t(10),o=t(53);r({target:"Object",stat:!0,forced:t(1)((function(){o(1)}))},{keys:function(n){return o(i(n))}})},function(n,e,t){"use strict";var r=t(0),i=t(133);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(n,e,t){var r=t(3),i=t(129),o=t(133),s=t(12);for(var a in i){var l=r[a],c=l&&l.prototype;if(c&&c.forEach!==o)try{s(c,"forEach",o)}catch(n){c.forEach=o}}},function(n,e,t){var r=t(105),i=t(39),o=t(2)("iterator");n.exports=function(n){if(null!=n)return n[o]||n["@@iterator"]||i[r(n)]}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function a(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{a({},"")}catch(n){a=function(n,e,t){return n[e]=t}}function l(n,e,t,r){var i=e&&e.prototype instanceof u?e:u,o=Object.create(i.prototype),s=new E(r||[]);return o._invoke=function(n,e,t){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return S()}for(t.method=i,t.arg=o;;){var s=t.delegate;if(s){var a=x(s,t);if(a){if(a===d)continue;return a}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=c(n,e,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}(n,t,s),o}function c(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var d={};function u(){}function m(){}function h(){}var p={};p[i]=function(){return this};var f=Object.getPrototypeOf,y=f&&f(f(I([])));y&&y!==e&&t.call(y,i)&&(p=y);var g=h.prototype=u.prototype=Object.create(p);function b(n){["next","throw","return"].forEach((function(e){a(n,e,(function(n){return this._invoke(e,n)}))}))}function v(n,e){var r;this._invoke=function(i,o){function s(){return new e((function(r,s){!function r(i,o,s,a){var l=c(n[i],n,o);if("throw"!==l.type){var d=l.arg,u=d.value;return u&&"object"==typeof u&&t.call(u,"__await")?e.resolve(u.__await).then((function(n){r("next",n,s,a)}),(function(n){r("throw",n,s,a)})):e.resolve(u).then((function(n){d.value=n,s(d)}),(function(n){return r("throw",n,s,a)}))}a(l.arg)}(i,o,r,s)}))}return r=r?r.then(s,s):s()}}function x(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,x(n,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var r=c(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,d;var i=r.arg;return i?i.done?(e[n.resultName]=i.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function T(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function w(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function E(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(T,this),this.reset(!0)}function I(n){if(n){var e=n[i];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,o=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:S}}function S(){return{value:void 0,done:!0}}return m.prototype=g.constructor=h,h.constructor=m,m.displayName=a(h,s,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,h):(n.__proto__=h,a(n,s,"GeneratorFunction")),n.prototype=Object.create(g),n},n.awrap=function(n){return{__await:n}},b(v.prototype),v.prototype[o]=function(){return this},n.AsyncIterator=v,n.async=function(e,t,r,i,o){void 0===o&&(o=Promise);var s=new v(l(e,t,r,i),o);return n.isGeneratorFunction(t)?s:s.next().then((function(n){return n.done?n.value:s.next()}))},b(g),a(g,s,"Generator"),g[i]=function(){return this},g.toString=function(){return"[object Generator]"},n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=I,E.prototype={constructor:E,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return s.type="throw",s.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var a=t.call(o,"catchLoc"),l=t.call(o,"finallyLoc");if(a&&l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&t.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===n||"continue"===n)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=n,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(s)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),d},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),w(t),d}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var i=r.arg;w(t)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:I(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}},n}(n.exports);try{regeneratorRuntime=r}catch(n){Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){t(0)({target:"Array",stat:!0},{isArray:t(33)})},function(n,e,t){"use strict";var r=t(14),i=t(103),o=t(39),s=t(24),a=t(116),l=s.set,c=s.getterFor("Array Iterator");n.exports=a(Array,"Array",(function(n,e){l(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=c(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(n,e,t){var r=t(2),i=t(25),o=t(8),s=r("unscopables"),a=Array.prototype;null==a[s]&&o.f(a,s,{configurable:!0,value:i(null)}),n.exports=function(n){a[s][n]=!0}},function(n,e,t){var r=t(1),i=/#|\.prototype\./,o=function(n,e){var t=a[s(n)];return t==c||t!=l&&("function"==typeof e?r(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},a=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";n.exports=o},function(n,e,t){var r=t(83),i=t(28),o=t(2)("toStringTag"),s="Arguments"==i(function(){return arguments}());n.exports=r?i:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=Object(n),o))?t:s?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},function(n,e,t){var r=t(5),i=t(21),o=t(2)("species");n.exports=function(n,e){var t,s=r(n).constructor;return void 0===s||null==(t=r(s)[o])?e:i(t)}},function(n,e,t){var r=t(46),i=t(23),o=function(n){return function(e,t){var o,s,a=String(i(e)),l=r(t),c=a.length;return l<0||l>=c?n?"":void 0:(o=a.charCodeAt(l))<55296||o>56319||l+1===c||(s=a.charCodeAt(l+1))<56320||s>57343?n?a.charAt(l):o:n?a.slice(l,l+2):s-56320+(o-55296<<10)+65536}};n.exports={codeAt:o(!1),charAt:o(!0)}},function(n,e,t){var r=t(4),i=t(33),o=t(2)("species");n.exports=function(n,e){var t;return i(n)&&("function"!=typeof(t=n.constructor)||t!==Array&&!i(t.prototype)?r(t)&&null===(t=t[o])&&(t=void 0):t=void 0),new(void 0===t?Array:t)(0===e?0:e)}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){var r=t(6),i=t(1),o=t(74);n.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(3);n.exports=r},function(n,e,t){var r=t(75);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(7),i=t(14),o=t(77).indexOf,s=t(38);n.exports=function(n,e){var t,a=i(n),l=0,c=[];for(t in a)!r(s,t)&&r(a,t)&&c.push(t);for(;e.length>l;)r(a,t=e[l++])&&(~o(c,t)||c.push(t));return c}},function(n,e,t){var r=t(46),i=Math.max,o=Math.min;n.exports=function(n,e){var t=r(n);return t<0?i(t+e,0):o(t,e)}},function(n,e,t){var r=t(19);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(0),i=t(178),o=t(82),s=t(70),a=t(47),l=t(12),c=t(18),d=t(2),u=t(20),m=t(39),h=t(119),p=h.IteratorPrototype,f=h.BUGGY_SAFARI_ITERATORS,y=d("iterator"),g=function(){return this};n.exports=function(n,e,t,d,h,b,v){i(t,e,d);var x,T,w,E=function(n){if(n===h&&A)return A;if(!f&&n in C)return C[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},I=e+" Iterator",S=!1,C=n.prototype,P=C[y]||C["@@iterator"]||h&&C[h],A=!f&&P||E(h),k="Array"==e&&C.entries||P;if(k&&(x=o(k.call(new n)),p!==Object.prototype&&x.next&&(u||o(x)===p||(s?s(x,p):"function"!=typeof x[y]&&l(x,y,g)),a(x,I,!0,!0),u&&(m[I]=g))),"values"==h&&P&&"values"!==P.name&&(S=!0,A=function(){return P.call(this)}),u&&!v||C[y]===A||l(C,y,A),m[e]=A,h)if(T={values:E("values"),keys:b?A:E("keys"),entries:E("entries")},v)for(w in T)(f||S||!(w in C))&&c(C,w,T[w]);else r({target:e,proto:!0,forced:f||S},T);return T}},function(n,e,t){var r=t(7),i=t(118),o=t(26),s=t(8);n.exports=function(n,e){for(var t=i(e),a=s.f,l=o.f,c=0;c<t.length;c++){var d=t[c];r(n,d)||a(n,d,l(e,d))}}},function(n,e,t){var r=t(19),i=t(69),o=t(81),s=t(5);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?e.concat(t(n)):e}},function(n,e,t){"use strict";var r,i,o,s=t(1),a=t(82),l=t(12),c=t(7),d=t(2),u=t(20),m=d("iterator"),h=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):h=!0);var p=null==r||s((function(){var n={};return r[m].call(n)!==n}));p&&(r={}),u&&!p||c(r,m)||l(r,m,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(n,e,t){var r=t(1);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(3);n.exports=r.Promise},function(n,e,t){var r=t(2),i=t(39),o=r("iterator"),s=Array.prototype;n.exports=function(n){return void 0!==n&&(i.Array===n||s[o]===n)}},function(n,e,t){var r=t(5);n.exports=function(n){var e=n.return;if(void 0!==e)return r(e.call(n)).value}},function(n,e,t){var r=t(2)("iterator"),i=!1;try{var o=0,s={next:function(){return{done:!!o++}},return:function(){i=!0}};s[r]=function(){return this},Array.from(s,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!i)return!1;var t=!1;try{var o={};o[r]=function(){return{next:function(){return{done:t=!0}}}},n(o)}catch(n){}return t}},function(n,e,t){var r,i,o,s=t(3),a=t(1),l=t(48),c=t(115),d=t(74),u=t(126),m=t(55),h=s.location,p=s.setImmediate,f=s.clearImmediate,y=s.process,g=s.MessageChannel,b=s.Dispatch,v=0,x={},T=function(n){if(x.hasOwnProperty(n)){var e=x[n];delete x[n],e()}},w=function(n){return function(){T(n)}},E=function(n){T(n.data)},I=function(n){s.postMessage(n+"",h.protocol+"//"+h.host)};p&&f||(p=function(n){for(var e=[],t=1;arguments.length>t;)e.push(arguments[t++]);return x[++v]=function(){("function"==typeof n?n:Function(n)).apply(void 0,e)},r(v),v},f=function(n){delete x[n]},m?r=function(n){y.nextTick(w(n))}:b&&b.now?r=function(n){b.now(w(n))}:g&&!u?(o=(i=new g).port2,i.port1.onmessage=E,r=l(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts&&h&&"file:"!==h.protocol&&!a(I)?(r=I,s.addEventListener("message",E,!1)):r="onreadystatechange"in d("script")?function(n){c.appendChild(d("script")).onreadystatechange=function(){c.removeChild(this),T(n)}}:function(n){setTimeout(w(n),0)}),n.exports={set:p,clear:f}},function(n,e,t){var r=t(76);n.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},function(n,e,t){var r=t(5),i=t(4),o=t(128);n.exports=function(n,e){if(r(n),i(e)&&e.constructor===n)return e;var t=o.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(21),i=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new i(n)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(0),i=t(1),o=t(10),s=t(82),a=t(120);r({target:"Object",stat:!0,forced:i((function(){s(1)})),sham:!a},{getPrototypeOf:function(n){return s(o(n))}})},function(n,e,t){var r=t(171);n.exports=function(n){if(r(n))throw TypeError("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(2)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(30).forEach,i=t(31)("forEach");n.exports=i?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(1);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(2);e.f=r},function(n,e,t){var r=t(111),i=t(7),o=t(135),s=t(8).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});i(e,n)||s(e,n,{value:o.f(n)})}},function(n,e,t){var r=t(0),i=t(183);r({target:"Array",stat:!0,forced:!t(124)((function(n){Array.from(n)}))},{from:i})},function(n,e,t){t(0)({target:"Object",stat:!0,sham:!t(6)},{create:t(25)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,i=n.length;++t<r;)n[i+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(60),i=t(223),o=t(224),s=t(225),a=t(226),l=t(227);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=s,c.prototype.has=a,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(35),i=t(87);n.exports=function(n){if(!i(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(244),i=t(27);n.exports=function n(e,t,o,s,a){return e===t||(null==e||null==t||!i(e)&&!i(t)?e!=e&&t!=t:r(e,t,o,s,n,a))}},function(n,e,t){var r=t(147),i=t(247),o=t(148);n.exports=function(n,e,t,s,a,l){var c=1&t,d=n.length,u=e.length;if(d!=u&&!(c&&u>d))return!1;var m=l.get(n),h=l.get(e);if(m&&h)return m==e&&h==n;var p=-1,f=!0,y=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++p<d;){var g=n[p],b=e[p];if(s)var v=c?s(b,g,p,e,n,l):s(g,b,p,n,e,l);if(void 0!==v){if(v)continue;f=!1;break}if(y){if(!i(e,(function(n,e){if(!o(y,e)&&(g===n||a(g,n,t,s,l)))return y.push(e)}))){f=!1;break}}else if(g!==b&&!a(g,b,t,s,l)){f=!1;break}}return l.delete(n),l.delete(e),f}},function(n,e,t){var r=t(88),i=t(245),o=t(246);function s(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}s.prototype.add=s.prototype.push=i,s.prototype.has=o,n.exports=s},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(257),i=t(263),o=t(153);n.exports=function(n){return o(n)?r(n):i(n)}},function(n,e,t){(function(n){var r=t(17),i=t(259),o=e&&!e.nodeType&&e,s=o&&"object"==typeof n&&n&&!n.nodeType&&n,a=s&&s.exports===o?r.Buffer:void 0,l=(a?a.isBuffer:void 0)||i;n.exports=l}).call(this,t(109)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(260),i=t(261),o=t(262),s=o&&o.isTypedArray,a=s?i(s):r;n.exports=a},function(n,e,t){var r=t(143),i=t(90);n.exports=function(n){return null!=n&&i(n.length)&&!r(n)}},function(n,e,t){var r=t(22)(t(17),"Set");n.exports=r},function(n,e,t){var r=t(87);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(158),i=t(64);n.exports=function(n,e){for(var t=0,o=(e=r(e,n)).length;null!=n&&t<o;)n=n[i(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var r=t(16),i=t(91),o=t(274),s=t(277);n.exports=function(n,e){return r(n)?n:i(n,e)?[n]:o(s(n))}},function(n,e,t){t(0)({target:"Object",stat:!0},{setPrototypeOf:t(70)})},function(n,e,t){var r=t(0),i=t(19),o=t(21),s=t(5),a=t(4),l=t(25),c=t(306),d=t(1),u=i("Reflect","construct"),m=d((function(){function n(){}return!(u((function(){}),[],n)instanceof n)})),h=!d((function(){u((function(){}))})),p=m||h;r({target:"Reflect",stat:!0,forced:p,sham:p},{construct:function(n,e){o(n),s(e);var t=arguments.length<3?n:o(arguments[2]);if(h&&!m)return u(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(n,r))}var i=t.prototype,d=l(a(i)?i:Object.prototype),p=Function.apply.call(n,d,e);return a(p)?p:d}})},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(210),i=t(215),o=t(286),s=t(294),a=t(303),l=t(188),c=o((function(n){var e=l(n);return a(e)&&(e=void 0),s(r(n,1,a,!0),i(e,2))}));n.exports=c},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,s=parseInt,a="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=a||l||Function("return this")(),d=Object.prototype.toString,u=Math.max,m=Math.min,h=function(){return c.Date.now()};function p(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function f(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(p(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=p(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var a=i.test(n);return a||o.test(n)?s(n.slice(2),a?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,i,o,s,a,l,c=0,d=!1,y=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,o=i;return r=i=void 0,c=e,s=n.apply(o,t)}function v(n){return c=n,a=setTimeout(T,e),d?b(n):s}function x(n){var t=n-l;return void 0===l||t>=e||t<0||y&&n-c>=o}function T(){var n=h();if(x(n))return w(n);a=setTimeout(T,function(n){var t=e-(n-l);return y?m(t,o-(n-c)):t}(n))}function w(n){return a=void 0,g&&r?b(n):(r=i=void 0,s)}function E(){var n=h(),t=x(n);if(r=arguments,i=this,l=n,t){if(void 0===a)return v(l);if(y)return a=setTimeout(T,e),b(l)}return void 0===a&&(a=setTimeout(T,e)),s}return e=f(e)||0,p(t)&&(d=!!t.leading,o=(y="maxWait"in t)?u(f(t.maxWait)||0,e):o,g="trailing"in t?!!t.trailing:g),E.cancel=function(){void 0!==a&&clearTimeout(a),c=0,r=l=i=a=void 0},E.flush=function(){return void 0===a?s:w(h())},E}},function(n,e,t){function r(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(n.exports=r=function(n){return typeof n},n.exports.default=n.exports,n.exports.__esModule=!0):(n.exports=r=function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},n.exports.default=n.exports,n.exports.__esModule=!0),r(e)}t(34),t(40),t(9),t(59),t(11),t(15),n.exports=r,n.exports.default=n.exports,n.exports.__esModule=!0},function(n,e,t){"use strict";t(45);var r=t(18),i=t(71),o=t(1),s=t(2),a=t(12),l=s("species"),c=RegExp.prototype;n.exports=function(n,e,t,d){var u=s(n),m=!o((function(){var e={};return e[u]=function(){return 7},7!=""[n](e)})),h=m&&!o((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[u]=/./[u]),t.exec=function(){return e=!0,null},t[u](""),!e}));if(!m||!h||t){var p=/./[u],f=e(u,""[n],(function(n,e,t,r,o){var s=e.exec;return s===i||s===c.exec?m&&!o?{done:!0,value:p.call(e,t,r)}:{done:!0,value:n.call(t,e,r)}:{done:!1}}));r(String.prototype,n,f[0]),r(c,u,f[1])}d&&a(c[u],"sham",!0)}},function(n,e,t){var r=t(28),i=t(71);n.exports=function(n,e){var t=n.exec;if("function"==typeof t){var o=t.call(n,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(n))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(n,e)}},function(n,e,t){"use strict";var r=t(0),i=t(77).indexOf,o=t(31),s=[].indexOf,a=!!s&&1/[1].indexOf(1,-0)<0,l=o("indexOf");r({target:"Array",proto:!0,forced:a||!l},{indexOf:function(n){return a?s.apply(this,arguments)||0:i(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(6),i=t(8),o=t(5),s=t(53);n.exports=r?Object.defineProperties:function(n,e){o(n);for(var t,r=s(e),a=r.length,l=0;a>l;)i.f(n,t=r[l++],e[t]);return n}},function(n,e){n.exports=function(n,e,t){if(!(n instanceof e))throw TypeError("Incorrect "+(t?t+" ":"")+"invocation");return n}},function(n,e,t){var r=t(4),i=t(28),o=t(2)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[o])?!!e:"RegExp"==i(n))}},function(n,e,t){"use strict";var r=t(5);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(1),i=function(n,e){return RegExp(n,e)};e.UNSUPPORTED_Y=r((function(){var n=i("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),e.BROKEN_CARET=r((function(){var n=i("^r","gy");return n.lastIndex=2,null!=n.exec("str")}))},function(n,e,t){"use strict";var r=t(107).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){"use strict";var r=t(0),i=t(36),o=t(14),s=t(31),a=[].join,l=i!=Object,c=s("join",",");r({target:"Array",proto:!0,forced:l||!c},{join:function(n){return a.call(o(this),void 0===n?",":n)}})},function(n,e,t){"use strict";var r=t(0),i=t(1),o=t(33),s=t(4),a=t(10),l=t(13),c=t(57),d=t(108),u=t(58),m=t(2),h=t(37),p=m("isConcatSpreadable"),f=h>=51||!i((function(){var n=[];return n[p]=!1,n.concat()[0]!==n})),y=u("concat"),g=function(n){if(!s(n))return!1;var e=n[p];return void 0!==e?!!e:o(n)};r({target:"Array",proto:!0,forced:!f||!y},{concat:function(n){var e,t,r,i,o,s=a(this),u=d(s,0),m=0;for(e=-1,r=arguments.length;e<r;e++)if(g(o=-1===e?s:arguments[e])){if(m+(i=l(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(t=0;t<i;t++,m++)t in o&&c(u,m,o[t])}else{if(m>=9007199254740991)throw TypeError("Maximum allowed index exceeded");c(u,m++,o)}return u.length=m,u}})},function(n,e,t){var r=t(0),i=t(6);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:t(8).f})},function(n,e,t){"use strict";var r=t(119).IteratorPrototype,i=t(25),o=t(32),s=t(47),a=t(39),l=function(){return this};n.exports=function(n,e,t){var c=e+" Iterator";return n.prototype=i(r,{next:o(1,t)}),s(n,c,!1,!0),a[c]=l,n}},function(n,e,t){var r=t(18);n.exports=function(n,e,t){for(var i in e)r(n,i,e[i],t);return n}},function(n,e,t){"use strict";var r=t(19),i=t(8),o=t(2),s=t(6),a=o("species");n.exports=function(n){var e=r(n),t=i.f;s&&e&&!e[a]&&t(e,a,{configurable:!0,get:function(){return this}})}},function(n,e,t){"use strict";var r=t(6),i=t(1),o=t(53),s=t(81),a=t(80),l=t(10),c=t(36),d=Object.assign,u=Object.defineProperty;n.exports=!d||i((function(){if(r&&1!==d({b:1},d(u({},"a",{enumerable:!0,get:function(){u(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=d({},n)[t]||"abcdefghijklmnopqrst"!=o(d({},e)).join("")}))?function(n,e){for(var t=l(n),i=arguments.length,d=1,u=s.f,m=a.f;i>d;)for(var h,p=c(arguments[d++]),f=u?o(p).concat(u(p)):o(p),y=f.length,g=0;y>g;)h=f[g++],r&&!m.call(p,h)||(t[h]=p[h]);return t}:d},function(n,e,t){var r=t(0),i=t(6),o=t(118),s=t(14),a=t(26),l=t(57);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(n){for(var e,t,r=s(n),i=a.f,c=o(r),d={},u=0;c.length>u;)void 0!==(t=i(r,e=c[u++]))&&l(d,e,t);return d}})},function(n,e,t){"use strict";var r=t(48),i=t(10),o=t(208),s=t(122),a=t(13),l=t(57),c=t(99);n.exports=function(n){var e,t,d,u,m,h,p=i(n),f="function"==typeof this?this:Array,y=arguments.length,g=y>1?arguments[1]:void 0,b=void 0!==g,v=c(p),x=0;if(b&&(g=r(g,y>2?arguments[2]:void 0,2)),null==v||f==Array&&s(v))for(t=new f(e=a(p.length));e>x;x++)h=b?g(p[x],x):p[x],l(t,x,h);else for(m=(u=v.call(p)).next,t=new f;!(d=m.call(u)).done;x++)h=b?o(u,g,[d.value,x],!0):d.value,l(t,x,h);return t.length=x,t}},function(n,e,t){var r=t(1);n.exports=r((function(){var n=RegExp(".","string".charAt(0));return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(1);n.exports=r((function(){var n=RegExp("(?<a>b)","string".charAt(5));return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){"use strict";var r=t(0),i=t(77).includes,o=t(103);r({target:"Array",proto:!0},{includes:function(n){return i(this,n,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(n,e,t){"use strict";var r=t(0),i=t(131),o=t(23);r({target:"String",proto:!0,forced:!t(132)("includes")},{includes:function(n){return!!~String(o(this)).indexOf(i(n),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(309)},function(n,e,t){var r=t(3),i=t(79),o=r.WeakMap;n.exports="function"==typeof o&&/native code/.test(i(o))},function(n,e,t){var r=t(4);n.exports=function(n){if(!r(n)&&null!==n)throw TypeError("Can't set "+String(n)+" as a prototype");return n}},function(n,e,t){"use strict";var r,i,o,s,a=t(0),l=t(20),c=t(3),d=t(19),u=t(121),m=t(18),h=t(179),p=t(70),f=t(47),y=t(180),g=t(4),b=t(21),v=t(170),x=t(79),T=t(193),w=t(124),E=t(106),I=t(125).set,S=t(194),C=t(127),P=t(196),A=t(128),k=t(197),z=t(24),_=t(104),R=t(2),O=t(198),D=t(55),M=t(37),j=R("species"),N="Promise",F=z.get,$=z.set,B=z.getterFor(N),L=u&&u.prototype,Y=u,U=L,W=c.TypeError,q=c.document,V=c.process,H=A.f,G=H,K=!!(q&&q.createEvent&&c.dispatchEvent),X="function"==typeof PromiseRejectionEvent,J=!1,Q=_(N,(function(){var n=x(Y)!==String(Y);if(!n&&66===M)return!0;if(l&&!U.finally)return!0;if(M>=51&&/native code/.test(Y))return!1;var e=new Y((function(n){n(1)})),t=function(n){n((function(){}),(function(){}))};return(e.constructor={})[j]=t,!(J=e.then((function(){}))instanceof t)||!n&&O&&!X})),Z=Q||!w((function(n){Y.all(n).catch((function(){}))})),nn=function(n){var e;return!(!g(n)||"function"!=typeof(e=n.then))&&e},en=function(n,e){if(!n.notified){n.notified=!0;var t=n.reactions;S((function(){for(var r=n.value,i=1==n.state,o=0;t.length>o;){var s,a,l,c=t[o++],d=i?c.ok:c.fail,u=c.resolve,m=c.reject,h=c.domain;try{d?(i||(2===n.rejection&&sn(n),n.rejection=1),!0===d?s=r:(h&&h.enter(),s=d(r),h&&(h.exit(),l=!0)),s===c.promise?m(W("Promise-chain cycle")):(a=nn(s))?a.call(s,u,m):u(s)):m(r)}catch(n){h&&!l&&h.exit(),m(n)}}n.reactions=[],n.notified=!1,e&&!n.rejection&&rn(n)}))}},tn=function(n,e,t){var r,i;K?((r=q.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:t},!X&&(i=c["on"+n])?i(r):"unhandledrejection"===n&&P("Unhandled promise rejection",t)},rn=function(n){I.call(c,(function(){var e,t=n.facade,r=n.value;if(on(n)&&(e=k((function(){D?V.emit("unhandledRejection",r,t):tn("unhandledrejection",t,r)})),n.rejection=D||on(n)?2:1,e.error))throw e.value}))},on=function(n){return 1!==n.rejection&&!n.parent},sn=function(n){I.call(c,(function(){var e=n.facade;D?V.emit("rejectionHandled",e):tn("rejectionhandled",e,n.value)}))},an=function(n,e,t){return function(r){n(e,r,t)}},ln=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,en(n,!0))},cn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw W("Promise can't be resolved itself");var r=nn(e);r?S((function(){var t={done:!1};try{r.call(e,an(cn,t,n),an(ln,t,n))}catch(e){ln(t,e,n)}})):(n.value=e,n.state=1,en(n,!1))}catch(e){ln({done:!1},e,n)}}};if(Q&&(U=(Y=function(n){v(this,Y,N),b(n),r.call(this);var e=F(this);try{n(an(cn,e),an(ln,e))}catch(n){ln(e,n)}}).prototype,(r=function(n){$(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(U,{then:function(n,e){var t=B(this),r=H(E(this,Y));return r.ok="function"!=typeof n||n,r.fail="function"==typeof e&&e,r.domain=D?V.domain:void 0,t.parent=!0,t.reactions.push(r),0!=t.state&&en(t,!1),r.promise},catch:function(n){return this.then(void 0,n)}}),i=function(){var n=new r,e=F(n);this.promise=n,this.resolve=an(cn,e),this.reject=an(ln,e)},A.f=H=function(n){return n===Y||n===o?new i(n):G(n)},!l&&"function"==typeof u&&L!==Object.prototype)){s=L.then,J||(m(L,"then",(function(n,e){var t=this;return new Y((function(n,e){s.call(t,n,e)})).then(n,e)}),{unsafe:!0}),m(L,"catch",U.catch,{unsafe:!0}));try{delete L.constructor}catch(n){}p&&p(L,U)}a({global:!0,wrap:!0,forced:Q},{Promise:Y}),f(Y,N,!1,!0),y(N),o=d(N),a({target:N,stat:!0,forced:Q},{reject:function(n){var e=H(this);return e.reject.call(void 0,n),e.promise}}),a({target:N,stat:!0,forced:l||Q},{resolve:function(n){return C(l&&this===o?Y:this,n)}}),a({target:N,stat:!0,forced:Z},{all:function(n){var e=this,t=H(e),r=t.resolve,i=t.reject,o=k((function(){var t=b(e.resolve),o=[],s=0,a=1;T(n,(function(n){var l=s++,c=!1;o.push(void 0),a++,t.call(e,n).then((function(n){c||(c=!0,o[l]=n,--a||r(o))}),i)})),--a||r(o)}));return o.error&&i(o.value),t.promise},race:function(n){var e=this,t=H(e),r=t.reject,i=k((function(){var i=b(e.resolve);T(n,(function(n){i.call(e,n).then(t.resolve,r)}))}));return i.error&&r(i.value),t.promise}})},function(n,e,t){var r=t(5),i=t(122),o=t(13),s=t(48),a=t(99),l=t(123),c=function(n,e){this.stopped=n,this.result=e};n.exports=function(n,e,t){var d,u,m,h,p,f,y,g=t&&t.that,b=!(!t||!t.AS_ENTRIES),v=!(!t||!t.IS_ITERATOR),x=!(!t||!t.INTERRUPTED),T=s(e,g,1+b+x),w=function(n){return d&&l(d),new c(!0,n)},E=function(n){return b?(r(n),x?T(n[0],n[1],w):T(n[0],n[1])):x?T(n,w):T(n)};if(v)d=n;else{if("function"!=typeof(u=a(n)))throw TypeError("Target is not iterable");if(i(u)){for(m=0,h=o(n.length);h>m;m++)if((p=E(n[m]))&&p instanceof c)return p;return new c(!1)}d=u.call(n)}for(f=d.next;!(y=f.call(d)).done;){try{p=E(y.value)}catch(n){throw l(d),n}if("object"==typeof p&&p&&p instanceof c)return p}return new c(!1)}},function(n,e,t){var r,i,o,s,a,l,c,d,u=t(3),m=t(26).f,h=t(125).set,p=t(126),f=t(195),y=t(55),g=u.MutationObserver||u.WebKitMutationObserver,b=u.document,v=u.process,x=u.Promise,T=m(u,"queueMicrotask"),w=T&&T.value;w||(r=function(){var n,e;for(y&&(n=v.domain)&&n.exit();i;){e=i.fn,i=i.next;try{e()}catch(n){throw i?s():o=void 0,n}}o=void 0,n&&n.enter()},p||y||f||!g||!b?x&&x.resolve?((c=x.resolve(void 0)).constructor=x,d=c.then,s=function(){d.call(c,r)}):s=y?function(){v.nextTick(r)}:function(){h.call(u,r)}:(a=!0,l=b.createTextNode(""),new g(r).observe(l,{characterData:!0}),s=function(){l.data=a=!a})),n.exports=w||function(n){var e={fn:n,next:void 0};o&&(o.next=e),i||(i=e,s()),o=e}},function(n,e,t){var r=t(76);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(3);n.exports=function(n,e){var t=r.console;t&&t.error&&(1===arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(0),i=t(181);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},function(n,e,t){"use strict";var r=t(0),i=t(20),o=t(121),s=t(1),a=t(19),l=t(106),c=t(127),d=t(18);if(r({target:"Promise",proto:!0,real:!0,forced:!!o&&s((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=l(this,a("Promise")),t="function"==typeof n;return this.then(t?function(t){return c(e,n()).then((function(){return t}))}:n,t?function(t){return c(e,n()).then((function(){throw t}))}:n)}}),!i&&"function"==typeof o){var u=a("Promise").prototype.finally;o.prototype.finally!==u&&d(o.prototype,"finally",u,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(83),i=t(105);n.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},function(n,e,t){"use strict";var r=t(0),i=t(203).left,o=t(31),s=t(37),a=t(55);r({target:"Array",proto:!0,forced:!o("reduce")||!a&&s>79&&s<83},{reduce:function(n){return i(this,n,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(21),i=t(10),o=t(36),s=t(13),a=function(n){return function(e,t,a,l){r(t);var c=i(e),d=o(c),u=s(c.length),m=n?u-1:0,h=n?-1:1;if(a<2)for(;;){if(m in d){l=d[m],m+=h;break}if(m+=h,n?m<0:u<=m)throw TypeError("Reduce of empty array with no initial value")}for(;n?m>=0:u>m;m+=h)m in d&&(l=t(l,d[m],m,c));return l}};n.exports={left:a(!1),right:a(!0)}},function(n,e,t){"use strict";var r,i=t(0),o=t(26).f,s=t(13),a=t(131),l=t(23),c=t(132),d=t(20),u="".startsWith,m=Math.min,h=c("startsWith");i({target:"String",proto:!0,forced:!!(d||h||(r=o(String.prototype,"startsWith"),!r||r.writable))&&!h},{startsWith:function(n){var e=String(l(this));a(n);var t=s(m(arguments.length>1?arguments[1]:void 0,e.length)),r=String(n);return u?u.call(e,r,t):e.slice(t,t+r.length)===r}})},function(n,e,t){var r=t(0),i=t(134),o=t(1),s=t(4),a=t(206).onFreeze,l=Object.freeze;r({target:"Object",stat:!0,forced:o((function(){l(1)})),sham:!i},{freeze:function(n){return l&&s(n)?l(a(n)):n}})},function(n,e,t){var r=t(38),i=t(4),o=t(7),s=t(8).f,a=t(52),l=t(134),c=a("meta"),d=0,u=Object.isExtensible||function(){return!0},m=function(n){s(n,c,{value:{objectID:"O"+ ++d,weakData:{}}})},h=n.exports={REQUIRED:!1,fastKey:function(n,e){if(!i(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!o(n,c)){if(!u(n))return"F";if(!e)return"E";m(n)}return n[c].objectID},getWeakData:function(n,e){if(!o(n,c)){if(!u(n))return!0;if(!e)return!1;m(n)}return n[c].weakData},onFreeze:function(n){return l&&h.REQUIRED&&u(n)&&!o(n,c)&&m(n),n}};r[c]=!0},function(n,e,t){var r=t(14),i=t(69).f,o={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"[object Window]"==o.call(n)?function(n){try{return i(n)}catch(n){return s.slice()}}(n):i(r(n))}},function(n,e,t){var r=t(5),i=t(123);n.exports=function(n,e,t,o){try{return o?e(r(t)[0],t[1]):e(t)}catch(e){throw i(n),e}}},function(n,e,t){var r=t(10),i=Math.floor,o="".replace,s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,a=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,l,c,d){var u=t+n.length,m=l.length,h=a;return void 0!==c&&(c=r(c),h=s),o.call(d,h,(function(r,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return n;case"`":return e.slice(0,t);case"'":return e.slice(u);case"<":s=c[o.slice(1,-1)];break;default:var a=+o;if(0===a)return r;if(a>m){var d=i(a/10);return 0===d?r:d<=m?void 0===l[d-1]?o.charAt(1):l[d-1]+o.charAt(1):r}s=l[a-1]}return void 0===s?"":s}))}},function(n,e,t){var r=t(139),i=t(211);n.exports=function n(e,t,o,s,a){var l=-1,c=e.length;for(o||(o=i),a||(a=[]);++l<c;){var d=e[l];t>0&&o(d)?t>1?n(d,t-1,o,s,a):r(a,d):s||(a[a.length]=d)}return a}},function(n,e,t){var r=t(41),i=t(85),o=t(16),s=r?r.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||i(n)||!!(s&&n&&n[s])}},function(n,e,t){var r=t(35),i=t(27);n.exports=function(n){return i(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(41),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=r?r.toStringTag:void 0;n.exports=function(n){var e=o.call(n,a),t=n[a];try{n[a]=void 0;var r=!0}catch(n){}var i=s.call(n);return r&&(e?n[a]=t:delete n[a]),i}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(216),i=t(272),o=t(93),s=t(16),a=t(283);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?s(n)?i(n[0],n[1]):r(n):a(n)}},function(n,e,t){var r=t(217),i=t(271),o=t(156);n.exports=function(n){var e=i(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(141),i=t(145);n.exports=function(n,e,t,o){var s=t.length,a=s,l=!o;if(null==n)return!a;for(n=Object(n);s--;){var c=t[s];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++s<a;){var d=(c=t[s])[0],u=n[d],m=c[1];if(l&&c[2]){if(void 0===u&&!(d in n))return!1}else{var h=new r;if(o)var p=o(u,m,d,n,e,h);if(!(void 0===p?i(m,u,3,o,h):p))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(61),i=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():i.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(61);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(61);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(61);n.exports=function(n,e){var t=this.__data__,i=r(t,n);return i<0?(++this.size,t.push([n,e])):t[i][1]=e,this}},function(n,e,t){var r=t(60);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(60),i=t(86),o=t(88);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var s=t.__data__;if(!i||s.length<199)return s.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(s)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(143),i=t(229),o=t(87),s=t(144),a=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,u=c.hasOwnProperty,m=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||i(n))&&(r(n)?m:a).test(s(n))}},function(n,e,t){var r,i=t(230),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var r=t(17)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(233),i=t(60),o=t(86);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(n,e,t){var r=t(234),i=t(235),o=t(236),s=t(237),a=t(238);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,n.exports=l},function(n,e,t){var r=t(62);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(62),i=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(62),i=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:i.call(e,n)}},function(n,e,t){var r=t(62);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(63);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(63);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(63);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(63);n.exports=function(n,e){var t=r(this,n),i=t.size;return t.set(n,e),this.size+=t.size==i?0:1,this}},function(n,e,t){var r=t(141),i=t(146),o=t(248),s=t(251),a=t(267),l=t(16),c=t(150),d=t(152),u="[object Object]",m=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,h,p,f){var y=l(n),g=l(e),b=y?"[object Array]":a(n),v=g?"[object Array]":a(e),x=(b="[object Arguments]"==b?u:b)==u,T=(v="[object Arguments]"==v?u:v)==u,w=b==v;if(w&&c(n)){if(!c(e))return!1;y=!0,x=!1}if(w&&!x)return f||(f=new r),y||d(n)?i(n,e,t,h,p,f):o(n,e,b,t,h,p,f);if(!(1&t)){var E=x&&m.call(n,"__wrapped__"),I=T&&m.call(e,"__wrapped__");if(E||I){var S=E?n.value():n,C=I?e.value():e;return f||(f=new r),p(S,C,t,h,f)}}return!!w&&(f||(f=new r),s(n,e,t,h,p,f))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(41),i=t(249),o=t(142),s=t(146),a=t(250),l=t(89),c=r?r.prototype:void 0,d=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,u,m){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new i(n),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var h=a;case"[object Set]":var p=1&r;if(h||(h=l),n.size!=e.size&&!p)return!1;var f=m.get(n);if(f)return f==e;r|=2,m.set(n,e);var y=s(h(n),h(e),r,c,u,m);return m.delete(n),y;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var r=t(17).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(252),i=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,s,a){var l=1&t,c=r(n),d=c.length;if(d!=r(e).length&&!l)return!1;for(var u=d;u--;){var m=c[u];if(!(l?m in e:i.call(e,m)))return!1}var h=a.get(n),p=a.get(e);if(h&&p)return h==e&&p==n;var f=!0;a.set(n,e),a.set(e,n);for(var y=l;++u<d;){var g=n[m=c[u]],b=e[m];if(o)var v=l?o(b,g,m,e,n,a):o(g,b,m,n,e,a);if(!(void 0===v?g===b||s(g,b,t,o,a):v)){f=!1;break}y||(y="constructor"==m)}if(f&&!y){var x=n.constructor,T=e.constructor;x==T||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof T&&T instanceof T||(f=!1)}return a.delete(n),a.delete(e),f}},function(n,e,t){var r=t(253),i=t(254),o=t(149);n.exports=function(n){return r(n,o,i)}},function(n,e,t){var r=t(139),i=t(16);n.exports=function(n,e,t){var o=e(n);return i(n)?o:r(o,t(n))}},function(n,e,t){var r=t(255),i=t(256),o=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(n){return null==n?[]:(n=Object(n),r(s(n),(function(e){return o.call(n,e)})))}:i;n.exports=a},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,i=0,o=[];++t<r;){var s=n[t];e(s,t,n)&&(o[i++]=s)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(258),i=t(85),o=t(16),s=t(150),a=t(151),l=t(152),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),d=!t&&i(n),u=!t&&!d&&s(n),m=!t&&!d&&!u&&l(n),h=t||d||u||m,p=h?r(n.length,String):[],f=p.length;for(var y in n)!e&&!c.call(n,y)||h&&("length"==y||u&&("offset"==y||"parent"==y)||m&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||a(y,f))||p.push(y);return p}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(35),i=t(90),o=t(27),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&i(n.length)&&!!s[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(140),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i&&r.process,a=function(){try{var n=o&&o.require&&o.require("util").types;return n||s&&s.binding&&s.binding("util")}catch(n){}}();n.exports=a}).call(this,t(109)(n))},function(n,e,t){var r=t(264),i=t(265),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return i(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(266)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(268),i=t(86),o=t(269),s=t(154),a=t(270),l=t(35),c=t(144),d=c(r),u=c(i),m=c(o),h=c(s),p=c(a),f=l;(r&&"[object DataView]"!=f(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||o&&"[object Promise]"!=f(o.resolve())||s&&"[object Set]"!=f(new s)||a&&"[object WeakMap]"!=f(new a))&&(f=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case d:return"[object DataView]";case u:return"[object Map]";case m:return"[object Promise]";case h:return"[object Set]";case p:return"[object WeakMap]"}return e}),n.exports=f},function(n,e,t){var r=t(22)(t(17),"DataView");n.exports=r},function(n,e,t){var r=t(22)(t(17),"Promise");n.exports=r},function(n,e,t){var r=t(22)(t(17),"WeakMap");n.exports=r},function(n,e,t){var r=t(155),i=t(149);n.exports=function(n){for(var e=i(n),t=e.length;t--;){var o=e[t],s=n[o];e[t]=[o,s,r(s)]}return e}},function(n,e,t){var r=t(145),i=t(273),o=t(280),s=t(91),a=t(155),l=t(156),c=t(64);n.exports=function(n,e){return s(n)&&a(e)?l(c(n),e):function(t){var s=i(t,n);return void 0===s&&s===e?o(t,n):r(e,s,3)}}},function(n,e,t){var r=t(157);n.exports=function(n,e,t){var i=null==n?void 0:r(n,e);return void 0===i?t:i}},function(n,e,t){var r=t(275),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(i,(function(n,t,r,i){e.push(r?i.replace(o,"$1"):t||n)})),e}));n.exports=s},function(n,e,t){var r=t(276);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(88);function i(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=t.cache;if(o.has(i))return o.get(i);var s=n.apply(this,r);return t.cache=o.set(i,s)||o,s};return t.cache=new(i.Cache||r),t}i.Cache=r,n.exports=i},function(n,e,t){var r=t(278);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(41),i=t(279),o=t(16),s=t(92),a=r?r.prototype:void 0,l=a?a.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return i(e,n)+"";if(s(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,i=Array(r);++t<r;)i[t]=e(n[t],t,n);return i}},function(n,e,t){var r=t(281),i=t(282);n.exports=function(n,e){return null!=n&&i(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(158),i=t(85),o=t(16),s=t(151),a=t(90),l=t(64);n.exports=function(n,e,t){for(var c=-1,d=(e=r(e,n)).length,u=!1;++c<d;){var m=l(e[c]);if(!(u=null!=n&&t(n,m)))break;n=n[m]}return u||++c!=d?u:!!(d=null==n?0:n.length)&&a(d)&&s(m,d)&&(o(n)||i(n))}},function(n,e,t){var r=t(284),i=t(285),o=t(91),s=t(64);n.exports=function(n){return o(n)?r(s(n)):i(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(157);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(93),i=t(287),o=t(289);n.exports=function(n,e){return o(i(n,e,r),n+"")}},function(n,e,t){var r=t(288),i=Math.max;n.exports=function(n,e,t){return e=i(void 0===e?n.length-1:e,0),function(){for(var o=arguments,s=-1,a=i(o.length-e,0),l=Array(a);++s<a;)l[s]=o[e+s];s=-1;for(var c=Array(e+1);++s<e;)c[s]=o[s];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(290),i=t(293)(r);n.exports=i},function(n,e,t){var r=t(291),i=t(292),o=t(93),s=i?function(n,e){return i(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;n.exports=s},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(22),i=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=i},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var i=t(),o=16-(i-r);if(r=i,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(147),i=t(295),o=t(300),s=t(148),a=t(301),l=t(89);n.exports=function(n,e,t){var c=-1,d=i,u=n.length,m=!0,h=[],p=h;if(t)m=!1,d=o;else if(u>=200){var f=e?null:a(n);if(f)return l(f);m=!1,d=s,p=new r}else p=e?[]:h;n:for(;++c<u;){var y=n[c],g=e?e(y):y;if(y=t||0!==y?y:0,m&&g==g){for(var b=p.length;b--;)if(p[b]===g)continue n;e&&p.push(g),h.push(y)}else d(p,g,t)||(p!==h&&p.push(g),h.push(y))}return h}},function(n,e,t){var r=t(296);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(297),i=t(298),o=t(299);n.exports=function(n,e,t){return e==e?o(n,e,t):r(n,i,t)}},function(n,e){n.exports=function(n,e,t,r){for(var i=n.length,o=t+(r?1:-1);r?o--:++o<i;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,i=n.length;++r<i;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,i=null==n?0:n.length;++r<i;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(154),i=t(302),o=t(89),s=r&&1/o(new r([,-0]))[1]==1/0?function(n){return new r(n)}:i;n.exports=s},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(153),i=t(27);n.exports=function(n){return i(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";var r=t(21),i=t(4),o=[].slice,s={},a=function(n,e,t){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("C,a","return new C("+r.join(",")+")")}return s[e](n,t)};n.exports=Function.bind||function(n){var e=r(this),t=o.call(arguments,1),s=function(){var r=t.concat(o.call(arguments));return this instanceof s?a(e,r.length,r):e.apply(n,r)};return i(e.prototype)&&(s.prototype=e.prototype),s}},function(n,e,t){"use strict";t(161)},function(n,e,t){"use strict";t(162)},function(n,e,t){"use strict";t.r(e);t(102),t(192),t(199),t(200);var r=t(56),i=(t(100),t(49),t(9),t(11),t(15),t(67),t(29),Object.freeze({}));function o(n){return null==n}function s(n){return null!=n}function a(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return null!==n&&"object"==typeof n}var d=Object.prototype.toString;function u(n){return"[object Object]"===d.call(n)}function m(n){return"[object RegExp]"===d.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function p(n){return s(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||u(n)&&n.toString===d?JSON.stringify(n,null,2):String(n)}function y(n){var e=parseFloat(n);return isNaN(e)?n:e}function g(n,e){for(var t=Object.create(null),r=n.split(","),i=0;i<r.length;i++)t[r[i]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}g("slot,component",!0);var b=g("key,ref,slot,slot-scope,is");function v(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var x=Object.prototype.hasOwnProperty;function T(n,e){return x.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var E=/-(\w)/g,I=w((function(n){return n.replace(E,(function(n,e){return e?e.toUpperCase():""}))})),S=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),C=/\B([A-Z])/g,P=w((function(n){return n.replace(C,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function k(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function z(n,e){for(var t in e)n[t]=e[t];return n}function _(n){for(var e={},t=0;t<n.length;t++)n[t]&&z(e,n[t]);return e}function R(n,e,t){}var O=function(n,e,t){return!1},D=function(n){return n};function M(n,e){if(n===e)return!0;var t=c(n),r=c(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var i=Array.isArray(n),o=Array.isArray(e);if(i&&o)return n.length===e.length&&n.every((function(n,t){return M(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(i||o)return!1;var s=Object.keys(n),a=Object.keys(e);return s.length===a.length&&s.every((function(t){return M(n[t],e[t])}))}catch(n){return!1}}function j(n,e){for(var t=0;t<n.length;t++)if(M(n[t],e))return t;return-1}function N(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var F=["component","directive","filter"],$=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:O,isReservedAttr:O,isUnknownElement:O,getTagNamespace:R,parsePlatformTagName:D,mustUseProp:O,async:!0,_lifecycleHooks:$},L=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function Y(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var U=new RegExp("[^"+L.source+".$_\\d]");var W,q="__proto__"in{},V="undefined"!=typeof window,H="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=H&&WXEnvironment.platform.toLowerCase(),K=V&&window.navigator.userAgent.toLowerCase(),X=K&&/msie|trident/.test(K),J=K&&K.indexOf("msie 9.0")>0,Q=K&&K.indexOf("edge/")>0,Z=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===G),nn=(K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K),K&&K.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(V)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var on=function(){return void 0===W&&(W=!V&&!H&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),W},sn=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function an(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,cn="undefined"!=typeof Symbol&&an(Symbol)&&"undefined"!=typeof Reflect&&an(Reflect.ownKeys);ln="undefined"!=typeof Set&&an(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=R,un=0,mn=function(){this.id=un++,this.subs=[]};mn.prototype.addSub=function(n){this.subs.push(n)},mn.prototype.removeSub=function(n){v(this.subs,n)},mn.prototype.depend=function(){mn.target&&mn.target.addDep(this)},mn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},mn.target=null;var hn=[];function pn(n){hn.push(n),mn.target=n}function fn(){hn.pop(),mn.target=hn[hn.length-1]}var yn=function(n,e,t,r,i,o,s,a){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=a,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},gn={child:{configurable:!0}};gn.child.get=function(){return this.componentInstance},Object.defineProperties(yn.prototype,gn);var bn=function(n){void 0===n&&(n="");var e=new yn;return e.text=n,e.isComment=!0,e};function vn(n){return new yn(void 0,void 0,void 0,String(n))}function xn(n){var e=new yn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var Tn=Array.prototype,wn=Object.create(Tn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=Tn[n];Y(wn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var i,o=e.apply(this,t),s=this.__ob__;switch(n){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&s.observeArray(i),s.dep.notify(),o}))}));var En=Object.getOwnPropertyNames(wn),In=!0;function Sn(n){In=n}var Cn=function(n){this.value=n,this.dep=new mn,this.vmCount=0,Y(n,"__ob__",this),Array.isArray(n)?(q?function(n,e){n.__proto__=e}(n,wn):function(n,e,t){for(var r=0,i=t.length;r<i;r++){var o=t[r];Y(n,o,e[o])}}(n,wn,En),this.observeArray(n)):this.walk(n)};function Pn(n,e){var t;if(c(n)&&!(n instanceof yn))return T(n,"__ob__")&&n.__ob__ instanceof Cn?t=n.__ob__:In&&!on()&&(Array.isArray(n)||u(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Cn(n)),e&&t&&t.vmCount++,t}function An(n,e,t,r,i){var o=new mn,s=Object.getOwnPropertyDescriptor(n,e);if(!s||!1!==s.configurable){var a=s&&s.get,l=s&&s.set;a&&!l||2!==arguments.length||(t=n[e]);var c=!i&&Pn(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=a?a.call(n):t;return mn.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(e)&&_n(e))),e},set:function(e){var r=a?a.call(n):t;e===r||e!=e&&r!=r||a&&!l||(l?l.call(n,e):t=e,c=!i&&Pn(e),o.notify())}})}}function kn(n,e,t){if(Array.isArray(n)&&h(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(An(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function zn(n,e){if(Array.isArray(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||T(n,e)&&(delete n[e],t&&t.dep.notify())}}function _n(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&_n(e)}Cn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)An(n,e[t])},Cn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Pn(n[e])};var Rn=B.optionMergeStrategies;function On(n,e){if(!e)return n;for(var t,r,i,o=cn?Reflect.ownKeys(e):Object.keys(e),s=0;s<o.length;s++)"__ob__"!==(t=o[s])&&(r=n[t],i=e[t],T(n,t)?r!==i&&u(r)&&u(i)&&On(r,i):kn(n,t,i));return n}function Dn(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,i="function"==typeof n?n.call(t,t):n;return r?On(r,i):i}:e?n?function(){return On("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Mn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function jn(n,e,t,r){var i=Object.create(n||null);return e?z(i,e):i}Rn.data=function(n,e,t){return t?Dn(n,e,t):e&&"function"!=typeof e?n:Dn(n,e)},$.forEach((function(n){Rn[n]=Mn})),F.forEach((function(n){Rn[n+"s"]=jn})),Rn.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var i={};for(var o in z(i,n),e){var s=i[o],a=e[o];s&&!Array.isArray(s)&&(s=[s]),i[o]=s?s.concat(a):Array.isArray(a)?a:[a]}return i},Rn.props=Rn.methods=Rn.inject=Rn.computed=function(n,e,t,r){if(!n)return e;var i=Object.create(null);return z(i,n),e&&z(i,e),i},Rn.provide=Dn;var Nn=function(n,e){return void 0===e?n:e};function Fn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,i,o={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(i=t[r])&&(o[I(i)]={type:null});else if(u(t))for(var s in t)i=t[s],o[I(s)]=u(i)?i:{type:i};else 0;n.props=o}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var i=0;i<t.length;i++)r[t[i]]={from:t[i]};else if(u(t))for(var o in t){var s=t[o];r[o]=u(s)?z({from:o},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Fn(n,e.extends,t)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)n=Fn(n,e.mixins[r],t);var o,s={};for(o in n)a(o);for(o in e)T(n,o)||a(o);function a(r){var i=Rn[r]||Nn;s[r]=i(n[r],e[r],t,r)}return s}function $n(n,e,t,r){if("string"==typeof t){var i=n[e];if(T(i,t))return i[t];var o=I(t);if(T(i,o))return i[o];var s=S(o);return T(i,s)?i[s]:i[t]||i[o]||i[s]}}function Bn(n,e,t,r){var i=e[n],o=!T(t,n),s=t[n],a=Wn(Boolean,i.type);if(a>-1)if(o&&!T(i,"default"))s=!1;else if(""===s||s===P(n)){var l=Wn(String,i.type);(l<0||a<l)&&(s=!0)}if(void 0===s){s=function(n,e,t){if(!T(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Yn(e.type)?r.call(n):r}(r,i,n);var c=In;Sn(!0),Pn(s),Sn(c)}return s}var Ln=/^\s*function (\w+)/;function Yn(n){var e=n&&n.toString().match(Ln);return e?e[1]:""}function Un(n,e){return Yn(n)===Yn(e)}function Wn(n,e){if(!Array.isArray(e))return Un(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Un(e[t],n))return t;return-1}function qn(n,e,t){pn();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,n,e,t))return}catch(n){Hn(n,r,"errorCaptured hook")}}Hn(n,e,t)}finally{fn()}}function Vn(n,e,t,r,i){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&p(o)&&!o._handled&&(o.catch((function(n){return qn(n,r,i+" (Promise/async)")})),o._handled=!0)}catch(n){qn(n,r,i)}return o}function Hn(n,e,t){if(B.errorHandler)try{return B.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Gn(e,null,"config.errorHandler")}Gn(n,e,t)}function Gn(n,e,t){if(!V&&!H||"undefined"==typeof console)throw n;console.error(n)}var Kn,Xn=!1,Jn=[],Qn=!1;function Zn(){Qn=!1;var n=Jn.slice(0);Jn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&an(Promise)){var ne=Promise.resolve();Kn=function(){ne.then(Zn),Z&&setTimeout(R)},Xn=!0}else if(X||"undefined"==typeof MutationObserver||!an(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Kn="undefined"!=typeof setImmediate&&an(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ee=1,te=new MutationObserver(Zn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Kn=function(){ee=(ee+1)%2,re.data=String(ee)},Xn=!0}function ie(n,e){var t;if(Jn.push((function(){if(n)try{n.call(e)}catch(n){qn(n,e,"nextTick")}else t&&t(e)})),Qn||(Qn=!0,Kn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var oe=new ln;function se(n){!function n(e,t){var r,i,o=Array.isArray(e);if(!o&&!c(e)||Object.isFrozen(e)||e instanceof yn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(o)for(r=e.length;r--;)n(e[r],t);else for(i=Object.keys(e),r=i.length;r--;)n(e[i[r]],t)}(n,oe),oe.clear()}var ae=w((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function le(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Vn(r,null,arguments,e,"v-on handler");for(var i=r.slice(),o=0;o<i.length;o++)Vn(i[o],null,n,e,"v-on handler")}return t.fns=n,t}function ce(n,e,t,r,i,s){var l,c,d,u;for(l in n)c=n[l],d=e[l],u=ae(l),o(c)||(o(d)?(o(c.fns)&&(c=n[l]=le(c,s)),a(u.once)&&(c=n[l]=i(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==d&&(d.fns=c,n[l]=d));for(l in e)o(n[l])&&r((u=ae(l)).name,e[l],u.capture)}function de(n,e,t){var r;n instanceof yn&&(n=n.data.hook||(n.data.hook={}));var i=n[e];function l(){t.apply(this,arguments),v(r.fns,l)}o(i)?r=le([l]):s(i.fns)&&a(i.merged)?(r=i).fns.push(l):r=le([i,l]),r.merged=!0,n[e]=r}function ue(n,e,t,r,i){if(s(e)){if(T(e,t))return n[t]=e[t],i||delete e[t],!0;if(T(e,r))return n[t]=e[r],i||delete e[r],!0}return!1}function me(n){return l(n)?[vn(n)]:Array.isArray(n)?function n(e,t){var r,i,c,d,u=[];for(r=0;r<e.length;r++)o(i=e[r])||"boolean"==typeof i||(c=u.length-1,d=u[c],Array.isArray(i)?i.length>0&&(he((i=n(i,(t||"")+"_"+r))[0])&&he(d)&&(u[c]=vn(d.text+i[0].text),i.shift()),u.push.apply(u,i)):l(i)?he(d)?u[c]=vn(d.text+i):""!==i&&u.push(vn(i)):he(i)&&he(d)?u[c]=vn(d.text+i.text):(a(e._isVList)&&s(i.tag)&&o(i.key)&&s(t)&&(i.key="__vlist"+t+"_"+r+"__"),u.push(i)));return u}(n):void 0}function he(n){return s(n)&&s(n.text)&&!1===n.isComment}function pe(n,e){if(n){for(var t=Object.create(null),r=cn?Reflect.ownKeys(n):Object.keys(n),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){for(var s=n[o].from,a=e;a;){if(a._provided&&T(a._provided,s)){t[o]=a._provided[s];break}a=a.$parent}if(!a)if("default"in n[o]){var l=n[o].default;t[o]="function"==typeof l?l.call(e):l}else 0}}return t}}function fe(n,e){if(!n||!n.length)return{};for(var t={},r=0,i=n.length;r<i;r++){var o=n[r],s=o.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,o.context!==e&&o.fnContext!==e||!s||null==s.slot)(t.default||(t.default=[])).push(o);else{var a=s.slot,l=t[a]||(t[a]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in t)t[c].every(ye)&&delete t[c];return t}function ye(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,o=Object.keys(e).length>0,s=n?!!n.$stable:!o,a=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(s&&t&&t!==i&&a===t.$key&&!o&&!t.$hasNormal)return t;for(var l in r={},n)n[l]&&"$"!==l[0]&&(r[l]=ve(e,l,n[l]))}else r={};for(var c in e)c in r||(r[c]=xe(e,c));return n&&Object.isExtensible(n)&&(n._normalized=r),Y(r,"$stable",s),Y(r,"$key",a),Y(r,"$hasNormal",o),r}function ve(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:me(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ge(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function xe(n,e){return function(){return n[e]}}function Te(n,e){var t,r,i,o,a;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,i=n.length;r<i;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(c(n))if(cn&&n[Symbol.iterator]){t=[];for(var l=n[Symbol.iterator](),d=l.next();!d.done;)t.push(e(d.value,t.length)),d=l.next()}else for(o=Object.keys(n),t=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],t[r]=e(n[a],a,r);return s(t)||(t=[]),t._isVList=!0,t}function we(n,e,t,r){var i,o=this.$scopedSlots[n];o?(t=t||{},r&&(t=z(z({},r),t)),i=o(t)||("function"==typeof e?e():e)):i=this.$slots[n]||("function"==typeof e?e():e);var s=t&&t.slot;return s?this.$createElement("template",{slot:s},i):i}function Ee(n){return $n(this.$options,"filters",n)||D}function Ie(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Se(n,e,t,r,i){var o=B.keyCodes[e]||t;return i&&r&&!B.keyCodes[e]?Ie(i,r):o?Ie(o,n):r?P(r)!==e:void 0===n}function Ce(n,e,t,r,i){if(t)if(c(t)){var o;Array.isArray(t)&&(t=_(t));var s=function(s){if("class"===s||"style"===s||b(s))o=n;else{var a=n.attrs&&n.attrs.type;o=r||B.mustUseProp(e,a,s)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=I(s),c=P(s);l in o||c in o||(o[s]=t[s],i&&((n.on||(n.on={}))["update:"+s]=function(n){t[s]=n}))};for(var a in t)s(a)}else;return n}function Pe(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ke(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ae(n,e,t){return ke(n,"__once__"+e+(t?"_"+t:""),!0),n}function ke(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&ze(n[r],e+"_"+r,t);else ze(n,e,t)}function ze(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function _e(n,e){if(e)if(u(e)){var t=n.on=n.on?z({},n.on):{};for(var r in e){var i=t[r],o=e[r];t[r]=i?[].concat(i,o):o}}else;return n}function Re(n,e,t,r){e=e||{$stable:!t};for(var i=0;i<n.length;i++){var o=n[i];Array.isArray(o)?Re(o,e,t):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return r&&(e.$key=r),e}function Oe(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function De(n,e){return"string"==typeof n?e+n:n}function Me(n){n._o=Ae,n._n=y,n._s=f,n._l=Te,n._t=we,n._q=M,n._i=j,n._m=Pe,n._f=Ee,n._k=Se,n._b=Ce,n._v=vn,n._e=bn,n._u=Re,n._g=_e,n._d=Oe,n._p=De}function je(n,e,t,r,o){var s,l=this,c=o.options;T(r,"_uid")?(s=Object.create(r))._original=r:(s=r,r=r._original);var d=a(c._compiled),u=!d;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||i,this.injections=pe(c.inject,r),this.slots=function(){return l.$slots||be(n.scopedSlots,l.$slots=fe(t,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),d&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,i){var o=Ue(s,n,e,t,i,u);return o&&!Array.isArray(o)&&(o.fnScopeId=c._scopeId,o.fnContext=r),o}:this._c=function(n,e,t,r){return Ue(s,n,e,t,r,u)}}function Ne(n,e,t,r,i){var o=xn(n);return o.fnContext=t,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function Fe(n,e){for(var t in e)n[I(t)]=e[t]}Me(je.prototype);var $e={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;$e.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;s(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Qe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,o){0;var s=r.data.scopedSlots,a=n.$scopedSlots,l=!!(s&&!s.$stable||a!==i&&!a.$stable||s&&n.$scopedSlots.$key!==s.$key||!s&&n.$scopedSlots.$key),c=!!(o||n.$options._renderChildren||l);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=o,n.$attrs=r.data.attrs||i,n.$listeners=t||i,e&&n.$options.props){Sn(!1);for(var d=n._props,u=n.$options._propKeys||[],m=0;m<u.length;m++){var h=u[m],p=n.$options.props;d[h]=Bn(h,p,e,n)}Sn(!0),n.$options.propsData=e}t=t||i;var f=n.$options._parentListeners;n.$options._parentListeners=t,Je(n,t,f),c&&(n.$slots=fe(o,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,it.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},Be=Object.keys($e);function Le(n,e,t,r,l){if(!o(n)){var d=t.$options._base;if(c(n)&&(n=d.extend(n)),"function"==typeof n){var u;if(o(n.cid)&&void 0===(n=function(n,e){if(a(n.error)&&s(n.errorComp))return n.errorComp;if(s(n.resolved))return n.resolved;var t=qe;t&&s(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(a(n.loading)&&s(n.loadingComp))return n.loadingComp;if(t&&!s(n.owners)){var r=n.owners=[t],i=!0,l=null,d=null;t.$on("hook:destroyed",(function(){return v(r,t)}));var u=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==d&&(clearTimeout(d),d=null))},m=N((function(t){n.resolved=Ve(t,e),i?r.length=0:u(!0)})),h=N((function(e){s(n.errorComp)&&(n.error=!0,u(!0))})),f=n(m,h);return c(f)&&(p(f)?o(n.resolved)&&f.then(m,h):p(f.component)&&(f.component.then(m,h),s(f.error)&&(n.errorComp=Ve(f.error,e)),s(f.loading)&&(n.loadingComp=Ve(f.loading,e),0===f.delay?n.loading=!0:l=setTimeout((function(){l=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,u(!1))}),f.delay||200)),s(f.timeout)&&(d=setTimeout((function(){d=null,o(n.resolved)&&h(null)}),f.timeout)))),i=!1,n.loading?n.loadingComp:n.resolved}}(u=n,d)))return function(n,e,t,r,i){var o=bn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:r,tag:i},o}(u,e,t,r,l);e=e||{},It(n),s(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var i=e.on||(e.on={}),o=i[r],a=e.model.callback;s(o)?(Array.isArray(o)?-1===o.indexOf(a):o!==a)&&(i[r]=[a].concat(o)):i[r]=a}(n.options,e);var m=function(n,e,t){var r=e.options.props;if(!o(r)){var i={},a=n.attrs,l=n.props;if(s(a)||s(l))for(var c in r){var d=P(c);ue(i,l,c,d,!0)||ue(i,a,c,d,!1)}return i}}(e,n);if(a(n.options.functional))return function(n,e,t,r,o){var a=n.options,l={},c=a.props;if(s(c))for(var d in c)l[d]=Bn(d,c,e||i);else s(t.attrs)&&Fe(l,t.attrs),s(t.props)&&Fe(l,t.props);var u=new je(t,l,o,r,n),m=a.render.call(null,u._c,u);if(m instanceof yn)return Ne(m,t,u.parent,a,u);if(Array.isArray(m)){for(var h=me(m)||[],p=new Array(h.length),f=0;f<h.length;f++)p[f]=Ne(h[f],t,u.parent,a,u);return p}}(n,m,e,t,r);var h=e.on;if(e.on=e.nativeOn,a(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Be.length;t++){var r=Be[t],i=e[r],o=$e[r];i===o||i&&i._merged||(e[r]=i?Ye(o,i):o)}}(e);var y=n.options.name||l;return new yn("vue-component-"+n.cid+(y?"-"+y:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:m,listeners:h,tag:l,children:r},u)}}}function Ye(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Ue(n,e,t,r,i,d){return(Array.isArray(t)||l(t))&&(i=r,r=t,t=void 0),a(d)&&(i=2),function(n,e,t,r,i){if(s(t)&&s(t.__ob__))return bn();s(t)&&s(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===i?r=me(r):1===i&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var l,d;if("string"==typeof e){var u;d=n.$vnode&&n.$vnode.ns||B.getTagNamespace(e),l=B.isReservedTag(e)?new yn(B.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!s(u=$n(n.$options,"components",e))?new yn(e,t,r,void 0,void 0,n):Le(u,t,n,r,e)}else l=Le(e,t,n,r);return Array.isArray(l)?l:s(l)?(s(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(s(e.children))for(var i=0,l=e.children.length;i<l;i++){var c=e.children[i];s(c.tag)&&(o(c.ns)||a(r)&&"svg"!==c.tag)&&n(c,t,r)}}(l,d),s(t)&&function(n){c(n.style)&&se(n.style);c(n.class)&&se(n.class)}(t),l):bn()}(n,e,t,r,i)}var We,qe=null;function Ve(n,e){return(n.__esModule||cn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function He(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(s(t)&&(s(t.componentOptions)||ge(t)))return t}}function Ge(n,e){We.$on(n,e)}function Ke(n,e){We.$off(n,e)}function Xe(n,e){var t=We;return function r(){var i=e.apply(null,arguments);null!==i&&t.$off(n,r)}}function Je(n,e,t){We=n,ce(e,t||{},Ge,Ke,Xe,n),We=void 0}var Qe=null;function Ze(n){var e=Qe;return Qe=n,function(){Qe=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){pn();var t=n.$options[e],r=e+" hook";if(t)for(var i=0,o=t.length;i<o;i++)Vn(t[i],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),fn()}var rt=[],it=[],ot={},st=!1,at=!1,lt=0;var ct=0,dt=Date.now;if(V&&!X){var ut=window.performance;ut&&"function"==typeof ut.now&&dt()>document.createEvent("Event").timeStamp&&(dt=function(){return ut.now()})}function mt(){var n,e;for(ct=dt(),at=!0,rt.sort((function(n,e){return n.id-e.id})),lt=0;lt<rt.length;lt++)(n=rt[lt]).before&&n.before(),e=n.id,ot[e]=null,n.run();var t=it.slice(),r=rt.slice();lt=rt.length=it.length=0,ot={},st=at=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),sn&&B.devtools&&sn.emit("flush")}var ht=0,pt=function(n,e,t,r,i){this.vm=n,i&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ht,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!U.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=R)),this.value=this.lazy?void 0:this.get()};pt.prototype.get=function(){var n;pn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;qn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&se(n),fn(),this.cleanupDeps()}return n},pt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},pt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},pt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==ot[e]){if(ot[e]=!0,at){for(var t=rt.length-1;t>lt&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);st||(st=!0,ie(mt))}}(this)},pt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Vn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},pt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},pt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||v(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ft={enumerable:!0,configurable:!0,get:R,set:R};function yt(n,e,t){ft.get=function(){return this[e][t]},ft.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ft)}function gt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},i=n.$options._propKeys=[];n.$parent&&Sn(!1);var o=function(o){i.push(o);var s=Bn(o,e,t,n);An(r,o,s),o in n||yt(n,"_props",o)};for(var s in e)o(s);Sn(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?R:A(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;u(e=n._data="function"==typeof e?function(n,e){pn();try{return n.call(e,e)}catch(n){return qn(n,e,"data()"),{}}finally{fn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,i=(n.$options.methods,t.length);for(;i--;){var o=t[i];0,r&&T(r,o)||(s=void 0,36!==(s=(o+"").charCodeAt(0))&&95!==s&&yt(n,"_data",o))}var s;Pn(e,!0)}(n):Pn(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=on();for(var i in e){var o=e[i],s="function"==typeof o?o:o.get;0,r||(t[i]=new pt(n,s||R,R,bt)),i in n||vt(n,i,o)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var i=0;i<r.length;i++)wt(n,t,r[i]);else wt(n,t,r)}}(n,e.watch)}var bt={lazy:!0};function vt(n,e,t){var r=!on();"function"==typeof t?(ft.get=r?xt(e):Tt(t),ft.set=R):(ft.get=t.get?r&&!1!==t.cache?xt(e):Tt(t.get):R,ft.set=t.set||R),Object.defineProperty(n,e,ft)}function xt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),mn.target&&e.depend(),e.value}}function Tt(n){return function(){return n.call(this,this)}}function wt(n,e,t,r){return u(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Et=0;function It(n){var e=n.options;if(n.super){var t=It(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var i in t)t[i]!==r[i]&&(e||(e={}),e[i]=t[i]);return e}(n);r&&z(n.extendOptions,r),(e=n.options=Fn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function St(n){this._init(n)}function Ct(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,i=n._Ctor||(n._Ctor={});if(i[r])return i[r];var o=n.name||t.options.name;var s=function(n){this._init(n)};return(s.prototype=Object.create(t.prototype)).constructor=s,s.cid=e++,s.options=Fn(t.options,n),s.super=t,s.options.props&&function(n){var e=n.options.props;for(var t in e)yt(n.prototype,"_props",t)}(s),s.options.computed&&function(n){var e=n.options.computed;for(var t in e)vt(n.prototype,t,e[t])}(s),s.extend=t.extend,s.mixin=t.mixin,s.use=t.use,F.forEach((function(n){s[n]=t[n]})),o&&(s.options.components[o]=s),s.superOptions=t.options,s.extendOptions=n,s.sealedOptions=z({},s.options),i[r]=s,s}}function Pt(n){return n&&(n.Ctor.options.name||n.tag)}function At(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!m(n)&&n.test(e)}function kt(n,e){var t=n.cache,r=n.keys,i=n._vnode;for(var o in t){var s=t[o];if(s){var a=s.name;a&&!e(a)&&zt(t,o,r,i)}}}function zt(n,e,t,r){var i=n[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),n[e]=null,v(t,e)}St.prototype._init=function(n){var e=this;e._uid=Et++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var i=r.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Fn(It(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Je(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=fe(e._renderChildren,r),n.$scopedSlots=i,n._c=function(e,t,r,i){return Ue(n,e,t,r,i,!1)},n.$createElement=function(e,t,r,i){return Ue(n,e,t,r,i,!0)};var o=t&&t.data;An(n,"$attrs",o&&o.attrs||i,null,!0),An(n,"$listeners",e._parentListeners||i,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=pe(n.$options.inject,n);e&&(Sn(!1),Object.keys(e).forEach((function(t){An(n,t,e[t])})),Sn(!0))}(e),gt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=kn,n.prototype.$delete=zn,n.prototype.$watch=function(n,e,t){if(u(e))return wt(this,n,e,t);(t=t||{}).user=!0;var r=new pt(this,n,e,t);if(t.immediate){var i='callback for immediate watcher "'+r.expression+'"';pn(),Vn(e,this,[r.value],this,i),fn()}return function(){r.teardown()}}}(St),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)r.$on(n[i],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,i=n.length;r<i;r++)t.$off(n[r],e);return t}var o,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var a=s.length;a--;)if((o=s[a])===e||o.fn===e){s.splice(a,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?k(t):t;for(var r=k(arguments,1),i='event handler for "'+n+'"',o=0,s=t.length;o<s;o++)Vn(t[o],e,r,e,i)}return e}}(St),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,i=t._vnode,o=Ze(t);t._vnode=n,t.$el=i?t.__patch__(i,n):t.__patch__(t.$el,n,e,!1),o(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||v(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(St),function(n){Me(n.prototype),n.prototype.$nextTick=function(n){return ie(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,i=t._parentVnode;i&&(e.$scopedSlots=be(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{qe=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){qn(t,e,"render"),n=e._vnode}finally{qe=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof yn||(n=bn()),n.parent=i,n}}(St);var _t=[String,RegExp,Array],Rt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:_t,exclude:_t,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var i=t.tag,o=t.componentInstance,s=t.componentOptions;n[r]={name:Pt(s),tag:i,componentInstance:o},e.push(r),this.max&&e.length>parseInt(this.max)&&zt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)zt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){kt(n,(function(n){return At(e,n)}))})),this.$watch("exclude",(function(e){kt(n,(function(n){return!At(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=He(n),t=e&&e.componentOptions;if(t){var r=Pt(t),i=this.include,o=this.exclude;if(i&&(!r||!At(i,r))||o&&r&&At(o,r))return e;var s=this.cache,a=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;s[l]?(e.componentInstance=s[l].componentInstance,v(a,l),a.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return B}};Object.defineProperty(n,"config",e),n.util={warn:dn,extend:z,mergeOptions:Fn,defineReactive:An},n.set=kn,n.delete=zn,n.nextTick=ie,n.observable=function(n){return Pn(n),n},n.options=Object.create(null),F.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,z(n.options.components,Rt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=k(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Fn(this.options,n),this}}(n),Ct(n),function(n){F.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&u(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(St),Object.defineProperty(St.prototype,"$isServer",{get:on}),Object.defineProperty(St.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(St,"FunctionalRenderContext",{value:je}),St.version="2.6.14";var Ot=g("style,class"),Dt=g("input,textarea,option,select,progress"),Mt=g("contenteditable,draggable,spellcheck"),jt=g("events,caret,typing,plaintext-only"),Nt=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Ft="http://www.w3.org/1999/xlink",$t=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Bt=function(n){return $t(n)?n.slice(6,n.length):""},Lt=function(n){return null==n||!1===n};function Yt(n){for(var e=n.data,t=n,r=n;s(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ut(r.data,e));for(;s(t=t.parent);)t&&t.data&&(e=Ut(e,t.data));return function(n,e){if(s(n)||s(e))return Wt(n,qt(e));return""}(e.staticClass,e.class)}function Ut(n,e){return{staticClass:Wt(n.staticClass,e.staticClass),class:s(n.class)?[n.class,e.class]:e.class}}function Wt(n,e){return n?e?n+" "+e:n:e||""}function qt(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,i=n.length;r<i;r++)s(e=qt(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Vt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Ht=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Gt=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Kt=function(n){return Ht(n)||Gt(n)};var Xt=Object.create(null);var Jt=g("text,number,password,search,email,tel,url");var Qt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Vt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(s(t)){var r=n.context,i=n.componentInstance||n.elm,o=r.$refs;e?Array.isArray(o[t])?v(o[t],i):o[t]===i&&(o[t]=void 0):n.data.refInFor?Array.isArray(o[t])?o[t].indexOf(i)<0&&o[t].push(i):o[t]=[i]:o[t]=i}}var er=new yn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&s(n.data)===s(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=s(t=n.data)&&s(t=t.attrs)&&t.type,i=s(t=e.data)&&s(t=t.attrs)&&t.type;return r===i||Jt(r)&&Jt(i)}(n,e)||a(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function ir(n,e,t){var r,i,o={};for(r=e;r<=t;++r)s(i=n[r].key)&&(o[i]=r);return o}var or={create:sr,update:sr,destroy:function(n){sr(n,er)}};function sr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,i,o=n===er,s=e===er,a=lr(n.data.directives,n.context),l=lr(e.data.directives,e.context),c=[],d=[];for(t in l)r=a[t],i=l[t],r?(i.oldValue=r.value,i.oldArg=r.arg,dr(i,"update",e,n),i.def&&i.def.componentUpdated&&d.push(i)):(dr(i,"bind",e,n),i.def&&i.def.inserted&&c.push(i));if(c.length){var u=function(){for(var t=0;t<c.length;t++)dr(c[t],"inserted",e,n)};o?de(e,"insert",u):u()}d.length&&de(e,"postpatch",(function(){for(var t=0;t<d.length;t++)dr(d[t],"componentUpdated",e,n)}));if(!o)for(t in a)l[t]||dr(a[t],"unbind",n,n,s)}(n,e)}var ar=Object.create(null);function lr(n,e){var t,r,i=Object.create(null);if(!n)return i;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=ar),i[cr(r)]=r,r.def=$n(e.$options,"directives",r.name);return i}function cr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function dr(n,e,t,r,i){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,r,i)}catch(r){qn(r,t.context,"directive "+n.name+" "+e+" hook")}}var ur=[Zt,or];function mr(n,e){var t=e.componentOptions;if(!(s(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var r,i,a=e.elm,l=n.data.attrs||{},c=e.data.attrs||{};for(r in s(c.__ob__)&&(c=e.data.attrs=z({},c)),c)i=c[r],l[r]!==i&&hr(a,r,i,e.data.pre);for(r in(X||Q)&&c.value!==l.value&&hr(a,"value",c.value),l)o(c[r])&&($t(r)?a.removeAttributeNS(Ft,Bt(r)):Mt(r)||a.removeAttribute(r))}}function hr(n,e,t,r){r||n.tagName.indexOf("-")>-1?pr(n,e,t):Nt(e)?Lt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Mt(e)?n.setAttribute(e,function(n,e){return Lt(e)||"false"===e?"false":"contenteditable"===n&&jt(e)?e:"true"}(e,t)):$t(e)?Lt(t)?n.removeAttributeNS(Ft,Bt(e)):n.setAttributeNS(Ft,e,t):pr(n,e,t)}function pr(n,e,t){if(Lt(t))n.removeAttribute(e);else{if(X&&!J&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var fr={create:mr,update:mr};function yr(n,e){var t=e.elm,r=e.data,i=n.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var a=Yt(e),l=t._transitionClasses;s(l)&&(a=Wt(a,qt(l))),a!==t._prevClass&&(t.setAttribute("class",a),t._prevClass=a)}}var gr,br={create:yr,update:yr};function vr(n,e,t){var r=gr;return function i(){var o=e.apply(null,arguments);null!==o&&wr(n,i,t,r)}}var xr=Xn&&!(nn&&Number(nn[1])<=53);function Tr(n,e,t,r){if(xr){var i=ct,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=i||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}gr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function wr(n,e,t,r){(r||gr).removeEventListener(n,e._wrapper||e,t)}function Er(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},r=n.data.on||{};gr=e.elm,function(n){if(s(n.__r)){var e=X?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}s(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),ce(t,r,Tr,wr,vr,e.context),gr=void 0}}var Ir,Sr={create:Er,update:Er};function Cr(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,r,i=e.elm,a=n.data.domProps||{},l=e.data.domProps||{};for(t in s(l.__ob__)&&(l=e.data.domProps=z({},l)),a)t in l||(i[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===a[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=r;var c=o(r)?"":String(r);Pr(i,c)&&(i.value=c)}else if("innerHTML"===t&&Gt(i.tagName)&&o(i.innerHTML)){(Ir=Ir||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var d=Ir.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;d.firstChild;)i.appendChild(d.firstChild)}else if(r!==a[t])try{i[t]=r}catch(n){}}}}function Pr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(s(r)){if(r.number)return y(t)!==y(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Ar={create:Cr,update:Cr},kr=w((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function zr(n){var e=_r(n.style);return n.staticStyle?z(n.staticStyle,e):e}function _r(n){return Array.isArray(n)?_(n):"string"==typeof n?kr(n):n}var Rr,Or=/^--/,Dr=/\s*!important$/,Mr=function(n,e,t){if(Or.test(e))n.style.setProperty(e,t);else if(Dr.test(t))n.style.setProperty(P(e),t.replace(Dr,""),"important");else{var r=Nr(e);if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)n.style[r]=t[i];else n.style[r]=t}},jr=["Webkit","Moz","ms"],Nr=w((function(n){if(Rr=Rr||document.createElement("div").style,"filter"!==(n=I(n))&&n in Rr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<jr.length;t++){var r=jr[t]+e;if(r in Rr)return r}}));function Fr(n,e){var t=e.data,r=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(r.staticStyle)&&o(r.style))){var i,a,l=e.elm,c=r.staticStyle,d=r.normalizedStyle||r.style||{},u=c||d,m=_r(e.data.style)||{};e.data.normalizedStyle=s(m.__ob__)?z({},m):m;var h=function(n,e){var t,r={};if(e)for(var i=n;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=zr(i.data))&&z(r,t);(t=zr(n.data))&&z(r,t);for(var o=n;o=o.parent;)o.data&&(t=zr(o.data))&&z(r,t);return r}(e,!0);for(a in u)o(h[a])&&Mr(l,a,"");for(a in h)(i=h[a])!==u[a]&&Mr(l,a,null==i?"":i)}}var $r={create:Fr,update:Fr},Br=/\s+/;function Lr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Br).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Yr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Br).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Ur(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&z(e,Wr(n.name||"v")),z(e,n),e}return"string"==typeof n?Wr(n):void 0}}var Wr=w((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),qr=V&&!J,Vr="transition",Hr="transitionend",Gr="animation",Kr="animationend";qr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vr="WebkitTransition",Hr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Gr="WebkitAnimation",Kr="webkitAnimationEnd"));var Xr=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Jr(n){Xr((function(){Xr(n)}))}function Qr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Lr(n,e))}function Zr(n,e){n._transitionClasses&&v(n._transitionClasses,e),Yr(n,e)}function ni(n,e,t){var r=ti(n,e),i=r.type,o=r.timeout,s=r.propCount;if(!i)return t();var a="transition"===i?Hr:Kr,l=0,c=function(){n.removeEventListener(a,d),t()},d=function(e){e.target===n&&++l>=s&&c()};setTimeout((function(){l<s&&c()}),o+1),n.addEventListener(a,d)}var ei=/\b(transform|all)(,|$)/;function ti(n,e){var t,r=window.getComputedStyle(n),i=(r[Vr+"Delay"]||"").split(", "),o=(r[Vr+"Duration"]||"").split(", "),s=ri(i,o),a=(r[Gr+"Delay"]||"").split(", "),l=(r[Gr+"Duration"]||"").split(", "),c=ri(a,l),d=0,u=0;return"transition"===e?s>0&&(t="transition",d=s,u=o.length):"animation"===e?c>0&&(t="animation",d=c,u=l.length):u=(t=(d=Math.max(s,c))>0?s>c?"transition":"animation":null)?"transition"===t?o.length:l.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&ei.test(r[Vr+"Property"])}}function ri(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return ii(e)+ii(n[t])})))}function ii(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function oi(n,e){var t=n.elm;s(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Ur(n.data.transition);if(!o(r)&&!s(t._enterCb)&&1===t.nodeType){for(var i=r.css,a=r.type,l=r.enterClass,d=r.enterToClass,u=r.enterActiveClass,m=r.appearClass,h=r.appearToClass,p=r.appearActiveClass,f=r.beforeEnter,g=r.enter,b=r.afterEnter,v=r.enterCancelled,x=r.beforeAppear,T=r.appear,w=r.afterAppear,E=r.appearCancelled,I=r.duration,S=Qe,C=Qe.$vnode;C&&C.parent;)S=C.context,C=C.parent;var P=!S._isMounted||!n.isRootInsert;if(!P||T||""===T){var A=P&&m?m:l,k=P&&p?p:u,z=P&&h?h:d,_=P&&x||f,R=P&&"function"==typeof T?T:g,O=P&&w||b,D=P&&E||v,M=y(c(I)?I.enter:I);0;var j=!1!==i&&!J,F=li(R),$=t._enterCb=N((function(){j&&(Zr(t,z),Zr(t,k)),$.cancelled?(j&&Zr(t,A),D&&D(t)):O&&O(t),t._enterCb=null}));n.data.show||de(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),R&&R(t,$)})),_&&_(t),j&&(Qr(t,A),Qr(t,k),Jr((function(){Zr(t,A),$.cancelled||(Qr(t,z),F||(ai(M)?setTimeout($,M):ni(t,a,$)))}))),n.data.show&&(e&&e(),R&&R(t,$)),j||F||$()}}}function si(n,e){var t=n.elm;s(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Ur(n.data.transition);if(o(r)||1!==t.nodeType)return e();if(!s(t._leaveCb)){var i=r.css,a=r.type,l=r.leaveClass,d=r.leaveToClass,u=r.leaveActiveClass,m=r.beforeLeave,h=r.leave,p=r.afterLeave,f=r.leaveCancelled,g=r.delayLeave,b=r.duration,v=!1!==i&&!J,x=li(h),T=y(c(b)?b.leave:b);0;var w=t._leaveCb=N((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),v&&(Zr(t,d),Zr(t,u)),w.cancelled?(v&&Zr(t,l),f&&f(t)):(e(),p&&p(t)),t._leaveCb=null}));g?g(E):E()}function E(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),m&&m(t),v&&(Qr(t,l),Qr(t,u),Jr((function(){Zr(t,l),w.cancelled||(Qr(t,d),x||(ai(T)?setTimeout(w,T):ni(t,a,w)))}))),h&&h(t,w),v||x||w())}}function ai(n){return"number"==typeof n&&!isNaN(n)}function li(n){if(o(n))return!1;var e=n.fns;return s(e)?li(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function ci(n,e){!0!==e.data.show&&oi(e)}var di=function(n){var e,t,r={},i=n.modules,c=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<i.length;++t)s(i[t][tr[e]])&&r[tr[e]].push(i[t][tr[e]]);function d(n){var e=c.parentNode(n);s(e)&&c.removeChild(e,n)}function u(n,e,t,i,o,l,d){if(s(n.elm)&&s(l)&&(n=l[d]=xn(n)),n.isRootInsert=!o,!function(n,e,t,i){var o=n.data;if(s(o)){var l=s(n.componentInstance)&&o.keepAlive;if(s(o=o.hook)&&s(o=o.init)&&o(n,!1),s(n.componentInstance))return m(n,e),h(t,n.elm,i),a(l)&&function(n,e,t,i){var o,a=n;for(;a.componentInstance;)if(a=a.componentInstance._vnode,s(o=a.data)&&s(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](er,a);e.push(a);break}h(t,n.elm,i)}(n,e,t,i),!0}}(n,e,t,i)){var u=n.data,f=n.children,g=n.tag;s(g)?(n.elm=n.ns?c.createElementNS(n.ns,g):c.createElement(g,n),b(n),p(n,f,e),s(u)&&y(n,e),h(t,n.elm,i)):a(n.isComment)?(n.elm=c.createComment(n.text),h(t,n.elm,i)):(n.elm=c.createTextNode(n.text),h(t,n.elm,i))}}function m(n,e){s(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(y(n,e),b(n)):(nr(n),e.push(n))}function h(n,e,t){s(n)&&(s(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function p(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)u(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return s(n.tag)}function y(n,t){for(var i=0;i<r.create.length;++i)r.create[i](er,n);s(e=n.data.hook)&&(s(e.create)&&e.create(er,n),s(e.insert)&&t.push(n))}function b(n){var e;if(s(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)s(e=t.context)&&s(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;s(e=Qe)&&e!==n.context&&e!==n.fnContext&&s(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function v(n,e,t,r,i,o){for(;r<=i;++r)u(t[r],o,n,e,!1,t,r)}function x(n){var e,t,i=n.data;if(s(i))for(s(e=i.hook)&&s(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(s(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function T(n,e,t){for(;e<=t;++e){var r=n[e];s(r)&&(s(r.tag)?(w(r),x(r)):d(r.elm))}}function w(n,e){if(s(e)||s(n.data)){var t,i=r.remove.length+1;for(s(e)?e.listeners+=i:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,i),s(t=n.componentInstance)&&s(t=t._vnode)&&s(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);s(t=n.data.hook)&&s(t=t.remove)?t(n,e):e()}else d(n.elm)}function E(n,e,t,r){for(var i=t;i<r;i++){var o=e[i];if(s(o)&&rr(n,o))return i}}function I(n,e,t,i,l,d){if(n!==e){s(e.elm)&&s(i)&&(e=i[l]=xn(e));var m=e.elm=n.elm;if(a(n.isAsyncPlaceholder))s(e.asyncFactory.resolved)?P(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(n.isStatic)&&e.key===n.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=n.componentInstance;else{var h,p=e.data;s(p)&&s(h=p.hook)&&s(h=h.prepatch)&&h(n,e);var y=n.children,g=e.children;if(s(p)&&f(e)){for(h=0;h<r.update.length;++h)r.update[h](n,e);s(h=p.hook)&&s(h=h.update)&&h(n,e)}o(e.text)?s(y)&&s(g)?y!==g&&function(n,e,t,r,i){var a,l,d,m=0,h=0,p=e.length-1,f=e[0],y=e[p],g=t.length-1,b=t[0],x=t[g],w=!i;for(0;m<=p&&h<=g;)o(f)?f=e[++m]:o(y)?y=e[--p]:rr(f,b)?(I(f,b,r,t,h),f=e[++m],b=t[++h]):rr(y,x)?(I(y,x,r,t,g),y=e[--p],x=t[--g]):rr(f,x)?(I(f,x,r,t,g),w&&c.insertBefore(n,f.elm,c.nextSibling(y.elm)),f=e[++m],x=t[--g]):rr(y,b)?(I(y,b,r,t,h),w&&c.insertBefore(n,y.elm,f.elm),y=e[--p],b=t[++h]):(o(a)&&(a=ir(e,m,p)),o(l=s(b.key)?a[b.key]:E(b,e,m,p))?u(b,r,n,f.elm,!1,t,h):rr(d=e[l],b)?(I(d,b,r,t,h),e[l]=void 0,w&&c.insertBefore(n,d.elm,f.elm)):u(b,r,n,f.elm,!1,t,h),b=t[++h]);m>p?v(n,o(t[g+1])?null:t[g+1].elm,t,h,g,r):h>g&&T(e,m,p)}(m,y,g,t,d):s(g)?(s(n.text)&&c.setTextContent(m,""),v(m,null,g,0,g.length-1,t)):s(y)?T(y,0,y.length-1):s(n.text)&&c.setTextContent(m,""):n.text!==e.text&&c.setTextContent(m,e.text),s(p)&&s(h=p.hook)&&s(h=h.postpatch)&&h(n,e)}}}function S(n,e,t){if(a(t)&&s(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var C=g("attrs,class,staticClass,staticStyle,key");function P(n,e,t,r){var i,o=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,a(e.isComment)&&s(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(s(l)&&(s(i=l.hook)&&s(i=i.init)&&i(e,!0),s(i=e.componentInstance)))return m(e,t),!0;if(s(o)){if(s(c))if(n.hasChildNodes())if(s(i=l)&&s(i=i.domProps)&&s(i=i.innerHTML)){if(i!==n.innerHTML)return!1}else{for(var d=!0,u=n.firstChild,h=0;h<c.length;h++){if(!u||!P(u,c[h],t,r)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else p(e,c,t);if(s(l)){var f=!1;for(var g in l)if(!C(g)){f=!0,y(e,t);break}!f&&l.class&&se(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,i){if(!o(e)){var l,d=!1,m=[];if(o(n))d=!0,u(e,m);else{var h=s(n.nodeType);if(!h&&rr(n,e))I(n,e,m,null,null,i);else{if(h){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),a(t)&&P(n,e,m))return S(e,m,!0),n;l=n,n=new yn(c.tagName(l).toLowerCase(),{},[],void 0,l)}var p=n.elm,y=c.parentNode(p);if(u(e,m,p._leaveCb?null:y,c.nextSibling(p)),s(e.parent))for(var g=e.parent,b=f(e);g;){for(var v=0;v<r.destroy.length;++v)r.destroy[v](g);if(g.elm=e.elm,b){for(var w=0;w<r.create.length;++w)r.create[w](er,g);var E=g.data.hook.insert;if(E.merged)for(var C=1;C<E.fns.length;C++)E.fns[C]()}else nr(g);g=g.parent}s(y)?T([n],0,0):s(n.tag)&&x(n)}}return S(e,m,d),e.elm}s(n)&&x(n)}}({nodeOps:Qt,modules:[fr,br,Sr,Ar,$r,V?{create:ci,activate:ci,remove:function(n,e){!0!==n.data.show?si(n,e):e()}}:{}].concat(ur)});J&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&bi(n,"input")}));var ui={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?de(t,"postpatch",(function(){ui.componentUpdated(n,e,t)})):mi(n,e,t.context),n._vOptions=[].map.call(n.options,fi)):("textarea"===t.tag||Jt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",yi),n.addEventListener("compositionend",gi),n.addEventListener("change",gi),J&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){mi(n,e,t.context);var r=n._vOptions,i=n._vOptions=[].map.call(n.options,fi);if(i.some((function(n,e){return!M(n,r[e])})))(n.multiple?e.value.some((function(n){return pi(n,i)})):e.value!==e.oldValue&&pi(e.value,i))&&bi(n,"change")}}};function mi(n,e,t){hi(n,e,t),(X||Q)&&setTimeout((function(){hi(n,e,t)}),0)}function hi(n,e,t){var r=e.value,i=n.multiple;if(!i||Array.isArray(r)){for(var o,s,a=0,l=n.options.length;a<l;a++)if(s=n.options[a],i)o=j(r,fi(s))>-1,s.selected!==o&&(s.selected=o);else if(M(fi(s),r))return void(n.selectedIndex!==a&&(n.selectedIndex=a));i||(n.selectedIndex=-1)}}function pi(n,e){return e.every((function(e){return!M(e,n)}))}function fi(n){return"_value"in n?n._value:n.value}function yi(n){n.target.composing=!0}function gi(n){n.target.composing&&(n.target.composing=!1,bi(n.target,"input"))}function bi(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function vi(n){return!n.componentInstance||n.data&&n.data.transition?n:vi(n.componentInstance._vnode)}var xi={model:ui,show:{bind:function(n,e,t){var r=e.value,i=(t=vi(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&i?(t.data.show=!0,oi(t,(function(){n.style.display=o}))):n.style.display=r?o:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=vi(t)).data&&t.data.transition?(t.data.show=!0,r?oi(t,(function(){n.style.display=n.__vOriginalDisplay})):si(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,i){i||(n.style.display=n.__vOriginalDisplay)}}},Ti={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wi(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?wi(He(e.children)):n}function Ei(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var i=t._parentListeners;for(var o in i)e[I(o)]=i[o];return e}function Ii(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Si=function(n){return n.tag||ge(n)},Ci=function(n){return"show"===n.name},Pi={name:"transition",props:Ti,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Si)).length){0;var r=this.mode;0;var i=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return i;var o=wi(i);if(!o)return i;if(this._leaving)return Ii(n,i);var s="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?s+"comment":s+o.tag:l(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key;var a=(o.data||(o.data={})).transition=Ei(this),c=this._vnode,d=wi(c);if(o.data.directives&&o.data.directives.some(Ci)&&(o.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,d)&&!ge(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=z({},a);if("out-in"===r)return this._leaving=!0,de(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ii(n,i);if("in-out"===r){if(ge(o))return c;var m,h=function(){m()};de(a,"afterEnter",h),de(a,"enterCancelled",h),de(u,"delayLeave",(function(n){m=n}))}}return i}}},Ai=z({tag:String,moveClass:String},Ti);function ki(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function zi(n){n.data.newPos=n.elm.getBoundingClientRect()}function _i(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,i=e.top-t.top;if(r||i){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete Ai.mode;var Ri={Transition:Pi,TransitionGroup:{props:Ai,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var i=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,i(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],s=Ei(this),a=0;a<i.length;a++){var l=i[a];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),t[l.key]=l,(l.data||(l.data={})).transition=s;else;}if(r){for(var c=[],d=[],u=0;u<r.length;u++){var m=r[u];m.data.transition=s,m.data.pos=m.elm.getBoundingClientRect(),t[m.key]?c.push(m):d.push(m)}this.kept=n(e,null,c),this.removed=d}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(ki),n.forEach(zi),n.forEach(_i),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Qr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Hr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Hr,n),t._moveCb=null,Zr(t,e))})}})))},methods:{hasMove:function(n,e){if(!qr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Yr(t,n)})),Lr(t,e),t.style.display="none",this.$el.appendChild(t);var r=ti(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};St.config.mustUseProp=function(n,e,t){return"value"===t&&Dt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},St.config.isReservedTag=Kt,St.config.isReservedAttr=Ot,St.config.getTagNamespace=function(n){return Gt(n)?"svg":"math"===n?"math":void 0},St.config.isUnknownElement=function(n){if(!V)return!0;if(Kt(n))return!1;if(n=n.toLowerCase(),null!=Xt[n])return Xt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Xt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Xt[n]=/HTMLUnknownElement/.test(e.toString())},z(St.options.directives,xi),z(St.options.components,Ri),St.prototype.__patch__=V?di:R,St.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=bn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new pt(n,r,R,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&V?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},V&&setTimeout((function(){B.devtools&&sn&&sn.emit("init",St)}),0);var Oi=St;
/*!
  * vue-router v3.5.2
  * (c) 2021 Evan You
  * @license MIT
  */function Di(n,e){for(var t in e)n[t]=e[t];return n}var Mi=/[!'()*]/g,ji=function(n){return"%"+n.charCodeAt(0).toString(16)},Ni=/%2C/g,Fi=function(n){return encodeURIComponent(n).replace(Mi,ji).replace(Ni,",")};function $i(n){try{return decodeURIComponent(n)}catch(n){0}return n}var Bi=function(n){return null==n||"object"==typeof n?n:String(n)};function Li(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=$i(t.shift()),i=t.length>0?$i(t.join("=")):null;void 0===e[r]?e[r]=i:Array.isArray(e[r])?e[r].push(i):e[r]=[e[r],i]})),e):e}function Yi(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return Fi(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(Fi(e)):r.push(Fi(e)+"="+Fi(n)))})),r.join("&")}return Fi(e)+"="+Fi(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Ui=/\/?$/;function Wi(n,e,t,r){var i=r&&r.options.stringifyQuery,o=e.query||{};try{o=qi(o)}catch(n){}var s={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:Gi(e,i),matched:n?Hi(n):[]};return t&&(s.redirectedFrom=Gi(t,i)),Object.freeze(s)}function qi(n){if(Array.isArray(n))return n.map(qi);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=qi(n[t]);return e}return n}var Vi=Wi(null,{path:"/"});function Hi(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Gi(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var i=n.hash;return void 0===i&&(i=""),(t||"/")+(e||Yi)(r)+i}function Ki(n,e,t){return e===Vi?n===e:!!e&&(n.path&&e.path?n.path.replace(Ui,"")===e.path.replace(Ui,"")&&(t||n.hash===e.hash&&Xi(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Xi(n.query,e.query)&&Xi(n.params,e.params))))}function Xi(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,i){var o=n[t];if(r[i]!==t)return!1;var s=e[t];return null==o||null==s?o===s:"object"==typeof o&&"object"==typeof s?Xi(o,s):String(o)===String(s)}))}function Ji(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var i=t.instances[r],o=t.enteredCbs[r];if(i&&o){delete t.enteredCbs[r];for(var s=0;s<o.length;s++)i._isBeingDestroyed||o[s](i)}}}}var Qi={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,i=e.parent,o=e.data;o.routerView=!0;for(var s=i.$createElement,a=t.name,l=i.$route,c=i._routerViewCache||(i._routerViewCache={}),d=0,u=!1;i&&i._routerRoot!==i;){var m=i.$vnode?i.$vnode.data:{};m.routerView&&d++,m.keepAlive&&i._directInactive&&i._inactive&&(u=!0),i=i.$parent}if(o.routerViewDepth=d,u){var h=c[a],p=h&&h.component;return p?(h.configProps&&Zi(p,o,h.route,h.configProps),s(p,o,r)):s()}var f=l.matched[d],y=f&&f.components[a];if(!f||!y)return c[a]=null,s();c[a]={component:y},o.registerRouteInstance=function(n,e){var t=f.instances[a];(e&&t!==n||!e&&t===n)&&(f.instances[a]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){f.instances[a]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==f.instances[a]&&(f.instances[a]=n.componentInstance),Ji(l)};var g=f.props&&f.props[a];return g&&(Di(c[a],{route:l,configProps:g}),Zi(y,o,l,g)),s(y,o,r)}};function Zi(n,e,t,r){var i=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(i){i=e.props=Di({},i);var o=e.attrs=e.attrs||{};for(var s in i)n.props&&s in n.props||(o[s]=i[s],delete i[s])}}function no(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var i=e.split("/");t&&i[i.length-1]||i.pop();for(var o=n.replace(/^\//,"").split("/"),s=0;s<o.length;s++){var a=o[s];".."===a?i.pop():"."!==a&&i.push(a)}return""!==i[0]&&i.unshift(""),i.join("/")}function eo(n){return n.replace(/\/\//g,"/")}var to=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ro=bo,io=co,oo=function(n,e){return mo(co(n,e),e)},so=mo,ao=go,lo=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function co(n,e){for(var t,r=[],i=0,o=0,s="",a=e&&e.delimiter||"/";null!=(t=lo.exec(n));){var l=t[0],c=t[1],d=t.index;if(s+=n.slice(o,d),o=d+l.length,c)s+=c[1];else{var u=n[o],m=t[2],h=t[3],p=t[4],f=t[5],y=t[6],g=t[7];s&&(r.push(s),s="");var b=null!=m&&null!=u&&u!==m,v="+"===y||"*"===y,x="?"===y||"*"===y,T=t[2]||a,w=p||f;r.push({name:h||i++,prefix:m||"",delimiter:T,optional:x,repeat:v,partial:b,asterisk:!!g,pattern:w?po(w):g?".*":"[^"+ho(T)+"]+?"})}}return o<n.length&&(s+=n.substr(o)),s&&r.push(s),r}function uo(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function mo(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",yo(e)));return function(e,r){for(var i="",o=e||{},s=(r||{}).pretty?uo:encodeURIComponent,a=0;a<n.length;a++){var l=n[a];if("string"!=typeof l){var c,d=o[l.name];if(null==d){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(to(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(c=s(d[u]),!t[a].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");i+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):s(d),!t[a].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');i+=l.prefix+c}}else i+=l}return i}}function ho(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function po(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function fo(n,e){return n.keys=e,n}function yo(n){return n&&n.sensitive?"":"i"}function go(n,e,t){to(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,i=!1!==t.end,o="",s=0;s<n.length;s++){var a=n[s];if("string"==typeof a)o+=ho(a);else{var l=ho(a.prefix),c="(?:"+a.pattern+")";e.push(a),a.repeat&&(c+="(?:"+l+c+")*"),o+=c=a.optional?a.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=ho(t.delimiter||"/"),u=o.slice(-d.length)===d;return r||(o=(u?o.slice(0,-d.length):o)+"(?:"+d+"(?=$))?"),o+=i?"$":r&&u?"":"(?="+d+"|$)",fo(new RegExp("^"+o,yo(t)),e)}function bo(n,e,t){return to(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return fo(n,e)}(n,e):to(n)?function(n,e,t){for(var r=[],i=0;i<n.length;i++)r.push(bo(n[i],e,t).source);return fo(new RegExp("(?:"+r.join("|")+")",yo(t)),e)}(n,e,t):function(n,e,t){return go(co(n,t),e,t)}(n,e,t)}ro.parse=io,ro.compile=oo,ro.tokensToFunction=so,ro.tokensToRegExp=ao;var vo=Object.create(null);function xo(n,e,t){e=e||{};try{var r=vo[n]||(vo[n]=ro.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function To(n,e,t,r){var i="string"==typeof n?{path:n}:n;if(i._normalized)return i;if(i.name){var o=(i=Di({},n)).params;return o&&"object"==typeof o&&(i.params=Di({},o)),i}if(!i.path&&i.params&&e){(i=Di({},i))._normalized=!0;var s=Di(Di({},e.params),i.params);if(e.name)i.name=e.name,i.params=s;else if(e.matched.length){var a=e.matched[e.matched.length-1].path;i.path=xo(a,s,e.path)}else 0;return i}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var i=n.indexOf("?");return i>=0&&(t=n.slice(i+1),n=n.slice(0,i)),{path:n,query:t,hash:e}}(i.path||""),c=e&&e.path||"/",d=l.path?no(l.path,c,t||i.append):c,u=function(n,e,t){void 0===e&&(e={});var r,i=t||Li;try{r=i(n||"")}catch(n){r={}}for(var o in e){var s=e[o];r[o]=Array.isArray(s)?s.map(Bi):Bi(s)}return r}(l.query,i.query,r&&r.options.parseQuery),m=i.hash||l.hash;return m&&"#"!==m.charAt(0)&&(m="#"+m),{_normalized:!0,path:d,query:u,hash:m}}var wo,Eo=function(){},Io={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,i=t.resolve(this.to,r,this.append),o=i.location,s=i.route,a=i.href,l={},c=t.options.linkActiveClass,d=t.options.linkExactActiveClass,u=null==c?"router-link-active":c,m=null==d?"router-link-exact-active":d,h=null==this.activeClass?u:this.activeClass,p=null==this.exactActiveClass?m:this.exactActiveClass,f=s.redirectedFrom?Wi(null,To(s.redirectedFrom),null,t):s;l[p]=Ki(r,f,this.exactPath),l[h]=this.exact||this.exactPath?l[p]:function(n,e){return 0===n.path.replace(Ui,"/").indexOf(e.path.replace(Ui,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,f);var y=l[p]?this.ariaCurrentValue:null,g=function(n){So(n)&&(e.replace?t.replace(o,Eo):t.push(o,Eo))},b={click:So};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=g})):b[this.event]=g;var v={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:a,route:s,navigate:g,isActive:l[h],isExactActive:l[p]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)v.on=b,v.attrs={href:a,"aria-current":y};else{var T=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(T){T.isStatic=!1;var w=T.data=Di({},T.data);for(var E in w.on=w.on||{},w.on){var I=w.on[E];E in b&&(w.on[E]=Array.isArray(I)?I:[I])}for(var S in b)S in w.on?w.on[S].push(b[S]):w.on[S]=g;var C=T.data.attrs=Di({},T.data.attrs);C.href=a,C["aria-current"]=y}else v.on=b}return n(this.tag,v,this.$slots.default)}};function So(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Co="undefined"!=typeof window;function Po(n,e,t,r,i){var o=e||[],s=t||Object.create(null),a=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,i,o,s){var a=i.path,l=i.name;0;var c=i.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return eo(e.path+"/"+n)}(a,o,c.strict);"boolean"==typeof i.caseSensitive&&(c.sensitive=i.caseSensitive);var u={path:d,regex:Ao(d,c),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:o,matchAs:s,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var o=s?eo(s+"/"+i.path):void 0;n(e,t,r,i,u,o)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==i.alias)for(var m=Array.isArray(i.alias)?i.alias:[i.alias],h=0;h<m.length;++h){0;var p={path:m[h],children:i.children};n(e,t,r,p,o,u.path||"/")}l&&(r[l]||(r[l]=u))}(o,s,a,n,i)}));for(var l=0,c=o.length;l<c;l++)"*"===o[l]&&(o.push(o.splice(l,1)[0]),c--,l--);return{pathList:o,pathMap:s,nameMap:a}}function Ao(n,e){return ro(n,[],e)}function ko(n,e){var t=Po(n),r=t.pathList,i=t.pathMap,o=t.nameMap;function s(n,t,s){var a=To(n,t,!1,e),c=a.name;if(c){var d=o[c];if(!d)return l(null,a);var u=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof a.params&&(a.params={}),t&&"object"==typeof t.params)for(var m in t.params)!(m in a.params)&&u.indexOf(m)>-1&&(a.params[m]=t.params[m]);return a.path=xo(d.path,a.params),l(d,a,s)}if(a.path){a.params={};for(var h=0;h<r.length;h++){var p=r[h],f=i[p];if(zo(f.regex,a.path,a.params))return l(f,a,s)}}return l(null,a)}function a(n,t){var r=n.redirect,i="function"==typeof r?r(Wi(n,t,null,e)):r;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var a=i,c=a.name,d=a.path,u=t.query,m=t.hash,h=t.params;if(u=a.hasOwnProperty("query")?a.query:u,m=a.hasOwnProperty("hash")?a.hash:m,h=a.hasOwnProperty("params")?a.params:h,c){o[c];return s({_normalized:!0,name:c,query:u,hash:m,params:h},void 0,t)}if(d){var p=function(n,e){return no(n,e.parent?e.parent.path:"/",!0)}(d,n);return s({_normalized:!0,path:xo(p,h),query:u,hash:m},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?a(n,r||t):n&&n.matchAs?function(n,e,t){var r=s({_normalized:!0,path:xo(t,e.params)});if(r){var i=r.matched,o=i[i.length-1];return e.params=r.params,l(o,e)}return l(null,e)}(0,t,n.matchAs):Wi(n,t,r,e)}return{match:s,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Po([e||n],r,i,o,t),t&&t.alias.length&&Po(t.alias.map((function(n){return{path:n,children:[e]}})),r,i,o,t)},getRoutes:function(){return r.map((function(n){return i[n]}))},addRoutes:function(n){Po(n,r,i,o)}}}function zo(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var i=1,o=r.length;i<o;++i){var s=n.keys[i-1];s&&(t[s.name||"pathMatch"]="string"==typeof r[i]?$i(r[i]):r[i])}return!0}var _o=Co&&window.performance&&window.performance.now?window.performance:Date;function Ro(){return _o.now().toFixed(3)}var Oo=Ro();function Do(){return Oo}function Mo(n){return Oo=n}var jo=Object.create(null);function No(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Di({},window.history.state);return t.key=Do(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Bo),function(){window.removeEventListener("popstate",Bo)}}function Fo(n,e,t,r){if(n.app){var i=n.options.scrollBehavior;i&&n.app.$nextTick((function(){var o=function(){var n=Do();if(n)return jo[n]}(),s=i.call(n,e,t,r?o:null);s&&("function"==typeof s.then?s.then((function(n){qo(n,o)})).catch((function(n){0})):qo(s,o))}))}}function $o(){var n=Do();n&&(jo[n]={x:window.pageXOffset,y:window.pageYOffset})}function Bo(n){$o(),n.state&&n.state.key&&Mo(n.state.key)}function Lo(n){return Uo(n.x)||Uo(n.y)}function Yo(n){return{x:Uo(n.x)?n.x:window.pageXOffset,y:Uo(n.y)?n.y:window.pageYOffset}}function Uo(n){return"number"==typeof n}var Wo=/^#\d/;function qo(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var i=Wo.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(i){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(i,o={x:Uo((t=o).x)?t.x:0,y:Uo(t.y)?t.y:0})}else Lo(n)&&(e=Yo(n))}else r&&Lo(n)&&(e=Yo(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Vo,Ho=Co&&((-1===(Vo=window.navigator.userAgent).indexOf("Android 2.")&&-1===Vo.indexOf("Android 4.0")||-1===Vo.indexOf("Mobile Safari")||-1!==Vo.indexOf("Chrome")||-1!==Vo.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Go(n,e){$o();var t=window.history;try{if(e){var r=Di({},t.state);r.key=Do(),t.replaceState(r,"",n)}else t.pushState({key:Mo(Ro())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Ko(n){Go(n,!0)}function Xo(n,e,t){var r=function(i){i>=n.length?t():n[i]?e(n[i],(function(){r(i+1)})):r(i+1)};r(0)}var Jo={redirected:2,aborted:4,cancelled:8,duplicated:16};function Qo(n,e){return ns(n,e,Jo.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return es.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Zo(n,e){return ns(n,e,Jo.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ns(n,e,t,r){var i=new Error(r);return i._isRouter=!0,i.from=n,i.to=e,i.type=t,i}var es=["params","query","hash"];function ts(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function rs(n,e){return ts(n)&&n._isRouter&&(null==e||n.type===e)}function is(n){return function(e,t,r){var i=!1,o=0,s=null;os(n,(function(n,e,t,a){if("function"==typeof n&&void 0===n.cid){i=!0,o++;var l,c=ls((function(e){var i;((i=e).__esModule||as&&"Module"===i[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:wo.extend(e),t.components[a]=e,--o<=0&&r()})),d=ls((function(n){var e="Failed to resolve async component "+a+": "+n;s||(s=ts(n)?n:new Error(e),r(s))}));try{l=n(c,d)}catch(n){d(n)}if(l)if("function"==typeof l.then)l.then(c,d);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,d)}}})),i||r()}}function os(n,e){return ss(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function ss(n){return Array.prototype.concat.apply([],n)}var as="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ls(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var cs=function(n,e){this.router=n,this.base=function(n){if(!n)if(Co){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Vi,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function ds(n,e,t,r){var i=os(n,(function(n,r,i,o){var s=function(n,e){"function"!=typeof n&&(n=wo.extend(n));return n.options[e]}(n,e);if(s)return Array.isArray(s)?s.map((function(n){return t(n,r,i,o)})):t(s,r,i,o)}));return ss(r?i.reverse():i)}function us(n,e){if(e)return function(){return n.apply(e,arguments)}}cs.prototype.listen=function(n){this.cb=n},cs.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},cs.prototype.onError=function(n){this.errorCbs.push(n)},cs.prototype.transitionTo=function(n,e,t){var r,i=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(r,(function(){i.updateRoute(r),e&&e(r),i.ensureURL(),i.router.afterHooks.forEach((function(n){n&&n(r,o)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!i.ready&&(rs(n,Jo.redirected)&&o===Vi||(i.ready=!0,i.readyErrorCbs.forEach((function(e){e(n)}))))}))},cs.prototype.confirmTransition=function(n,e,t){var r=this,i=this.current;this.pending=n;var o,s,a=function(n){!rs(n)&&ts(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=i.matched.length-1;if(Ki(n,i)&&l===c&&n.matched[l]===i.matched[c])return this.ensureURL(),a(((s=ns(o=i,n,Jo.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",s));var d=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=d.updated,m=d.deactivated,h=d.activated,p=[].concat(function(n){return ds(n,"beforeRouteLeave",us,!0)}(m),this.router.beforeHooks,function(n){return ds(n,"beforeRouteUpdate",us)}(u),h.map((function(n){return n.beforeEnter})),is(h)),f=function(e,t){if(r.pending!==n)return a(Zo(i,n));try{e(n,i,(function(e){!1===e?(r.ensureURL(!0),a(function(n,e){return ns(n,e,Jo.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(i,n))):ts(e)?(r.ensureURL(!0),a(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(a(Qo(i,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){a(n)}};Xo(p,f,(function(){Xo(function(n){return ds(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,i,o){return n(r,i,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,r)}))}(h).concat(r.router.resolveHooks),f,(function(){if(r.pending!==n)return a(Zo(i,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Ji(n)}))}))}))},cs.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},cs.prototype.setupListeners=function(){},cs.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Vi,this.pending=null};var ms=function(n){function e(e,t){n.call(this,e,t),this._startLocation=hs(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Ho&&t;r&&this.listeners.push(No());var i=function(){var t=n.current,i=hs(n.base);n.current===Vi&&i===n._startLocation||n.transitionTo(i,(function(n){r&&Fo(e,n,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){Go(eo(r.base+n.fullPath)),Fo(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){Ko(eo(r.base+n.fullPath)),Fo(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(hs(this.base)!==this.current.fullPath){var e=eo(this.base+this.current.fullPath);n?Go(e):Ko(e)}},e.prototype.getCurrentLocation=function(){return hs(this.base)},e}(cs);function hs(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(eo(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var ps=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=hs(n);if(!/^\/#/.test(e))return window.location.replace(eo(n+"/#"+e)),!0}(this.base)||fs()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Ho&&e;t&&this.listeners.push(No());var r=function(){var e=n.current;fs()&&n.transitionTo(ys(),(function(r){t&&Fo(n.router,r,e,!0),Ho||vs(r.fullPath)}))},i=Ho?"popstate":"hashchange";window.addEventListener(i,r),this.listeners.push((function(){window.removeEventListener(i,r)}))}},e.prototype.push=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){bs(n.fullPath),Fo(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){vs(n.fullPath),Fo(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;ys()!==e&&(n?bs(e):vs(e))},e.prototype.getCurrentLocation=function(){return ys()},e}(cs);function fs(){var n=ys();return"/"===n.charAt(0)||(vs("/"+n),!1)}function ys(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function gs(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function bs(n){Ho?Go(gs(n)):window.location.hash=n}function vs(n){Ho?Ko(gs(n)):window.location.replace(gs(n))}var xs=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){rs(n,Jo.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(cs),Ts=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ko(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Ho&&!1!==n.fallback,this.fallback&&(e="hash"),Co||(e="abstract"),this.mode=e,e){case"history":this.history=new ms(this,n.base);break;case"hash":this.history=new ps(this,n.base,this.fallback);break;case"abstract":this.history=new xs(this,n.base);break;default:0}},ws={currentRoute:{configurable:!0}};function Es(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ts.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},ws.currentRoute.get=function(){return this.history&&this.history.current},Ts.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof ms||t instanceof ps){var r=function(n){t.setupListeners(),function(n){var r=t.current,i=e.options.scrollBehavior;Ho&&i&&"fullPath"in n&&Fo(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ts.prototype.beforeEach=function(n){return Es(this.beforeHooks,n)},Ts.prototype.beforeResolve=function(n){return Es(this.resolveHooks,n)},Ts.prototype.afterEach=function(n){return Es(this.afterHooks,n)},Ts.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ts.prototype.onError=function(n){this.history.onError(n)},Ts.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Ts.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ts.prototype.go=function(n){this.history.go(n)},Ts.prototype.back=function(){this.go(-1)},Ts.prototype.forward=function(){this.go(1)},Ts.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ts.prototype.resolve=function(n,e,t){var r=To(n,e=e||this.history.current,t,this),i=this.match(r,e),o=i.redirectedFrom||i.fullPath;return{location:r,route:i,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?eo(n+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:i}},Ts.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ts.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Vi&&this.history.transitionTo(this.history.getCurrentLocation())},Ts.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Vi&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ts.prototype,ws),Ts.install=function n(e){if(!n.installed||wo!==e){n.installed=!0,wo=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Qi),e.component("RouterLink",Io);var i=e.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Ts.version="3.5.2",Ts.isNavigationFailure=rs,Ts.NavigationFailureType=Jo,Ts.START_LOCATION=Vi,Co&&window.Vue&&window.Vue.use(Ts);var Is=Ts;t(182),t(130),t(202),t(96),t(204),t(97),t(98),t(205);function Ss(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(34),t(40),t(59);var Cs=t(42),Ps=(t(138),t(45),t(68),t(186),t(187),{NotFound:function(){return t.e(7).then(t.bind(null,381))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,380))}}),As={"v-1faf30c2":function(){return t.e(8).then(t.bind(null,384))},"v-236676a8":function(){return t.e(9).then(t.bind(null,385))},"v-5e4c40e7":function(){return t.e(10).then(t.bind(null,386))},"v-0c1f8ed9":function(){return t.e(11).then(t.bind(null,387))},"v-4f9c4c0e":function(){return t.e(12).then(t.bind(null,388))},"v-06ac883d":function(){return t.e(13).then(t.bind(null,389))},"v-23edadb9":function(){return t.e(14).then(t.bind(null,390))},"v-63f8e29d":function(){return t.e(15).then(t.bind(null,391))},"v-7a688d45":function(){return t.e(16).then(t.bind(null,392))},"v-396e9a03":function(){return t.e(17).then(t.bind(null,393))},"v-606f4a0e":function(){return t.e(18).then(t.bind(null,394))},"v-76f3a019":function(){return t.e(19).then(t.bind(null,395))},"v-46e9519a":function(){return t.e(20).then(t.bind(null,396))},"v-281b8d36":function(){return t.e(21).then(t.bind(null,397))},"v-d789178e":function(){return t.e(22).then(t.bind(null,398))},"v-680f8b01":function(){return t.e(23).then(t.bind(null,399))},"v-081054f9":function(){return t.e(24).then(t.bind(null,400))},"v-9bfd5d0e":function(){return t.e(25).then(t.bind(null,401))},"v-6da111be":function(){return t.e(26).then(t.bind(null,402))},"v-2334b1ce":function(){return t.e(27).then(t.bind(null,403))},"v-38fea491":function(){return t.e(28).then(t.bind(null,404))},"v-5e36b9f9":function(){return t.e(29).then(t.bind(null,405))},"v-ed8b760e":function(){return t.e(30).then(t.bind(null,406))},"v-24ca16b9":function(){return t.e(31).then(t.bind(null,407))},"v-57d2f483":function(){return t.e(32).then(t.bind(null,408))},"v-52f88d79":function(){return t.e(33).then(t.bind(null,409))},"v-5022f50d":function(){return t.e(34).then(t.bind(null,410))},"v-d744928e":function(){return t.e(35).then(t.bind(null,411))},"v-8b55a88e":function(){return t.e(36).then(t.bind(null,412))},"v-728ee3e3":function(){return t.e(37).then(t.bind(null,413))},"v-bf399a4e":function(){return t.e(38).then(t.bind(null,414))},"v-3bd1050e":function(){return t.e(39).then(t.bind(null,415))},"v-44fd97ef":function(){return t.e(40).then(t.bind(null,416))},"v-17b7af4e":function(){return t.e(41).then(t.bind(null,417))},"v-03b1eb28":function(){return t.e(42).then(t.bind(null,418))},"v-8d2c781c":function(){return t.e(6).then(t.bind(null,419))},"v-1f78d2c5":function(){return t.e(43).then(t.bind(null,420))},"v-7e2a5059":function(){return t.e(44).then(t.bind(null,421))},"v-30a86c39":function(){return t.e(45).then(t.bind(null,422))},"v-3fa89199":function(){return t.e(46).then(t.bind(null,423))},"v-7b99fa79":function(){return t.e(47).then(t.bind(null,424))},"v-b6426a0e":function(){return t.e(48).then(t.bind(null,425))},"v-2813ef33":function(){return t.e(49).then(t.bind(null,426))},"v-22a2e879":function(){return t.e(50).then(t.bind(null,427))},"v-f077aece":function(){return t.e(51).then(t.bind(null,428))},"v-252e0b10":function(){return t.e(52).then(t.bind(null,429))},"v-579f2b62":function(){return t.e(53).then(t.bind(null,430))},"v-16818fba":function(){return t.e(54).then(t.bind(null,431))},"v-c6c422ce":function(){return t.e(55).then(t.bind(null,432))},"v-4e62f04e":function(){return t.e(56).then(t.bind(null,433))},"v-7b20e0d9":function(){return t.e(57).then(t.bind(null,434))},"v-5026c2f9":function(){return t.e(58).then(t.bind(null,435))},"v-18783384":function(){return t.e(59).then(t.bind(null,436))},"v-00e1f18e":function(){return t.e(60).then(t.bind(null,437))},"v-3f563961":function(){return t.e(61).then(t.bind(null,438))},"v-db1118ce":function(){return t.e(62).then(t.bind(null,439))},"v-7aae0b0e":function(){return t.e(63).then(t.bind(null,440))},"v-26a1ae83":function(){return t.e(64).then(t.bind(null,441))},"v-7119cffe":function(){return t.e(65).then(t.bind(null,442))}};function ks(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var zs=/-(\w)/g,_s=ks((function(n){return n.replace(zs,(function(n,e){return e?e.toUpperCase():""}))})),Rs=/\B([A-Z])/g,Os=ks((function(n){return n.replace(Rs,"-$1").toLowerCase()})),Ds=ks((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function Ms(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Ds(_s(e))):n(Ds(e))||n(Os(e))}var js=Object.assign({},Ps,As),Ns=function(n){return js[n]},Fs=function(n){return As[n]},$s=function(n){return Ps[n]},Bs=function(n){return Oi.component(n)};function Ls(n){return Ms(Fs,n)}function Ys(n){return Ms($s,n)}function Us(n){return Ms(Ns,n)}function Ws(n){return Ms(Bs,n)}function qs(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ws(e)||!Us(e)){n.next=5;break}return n.next=3,Us(e)();case 3:t=n.sent,Oi.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Vs(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Hs=t(94),Gs=(t(175),t(176),t(163)),Ks=t.n(Gs),Xs={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Hs.a)(n,1)[0]})).map((function(n){var e=Object(Hs.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(n[t],'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=Qs(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Cs.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=Zs(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ks()([{name:"description",content:this.$description}],n,this.siteMeta,na)},updateCanonicalLink:function(){Js(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",Qs(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){Zs(null,this.currentMetaTags),Js()}};function Js(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function Qs(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function Zs(n,e){if(e&&Object(Cs.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function na(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(95);var ea=t(164),ta={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(ea)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),i=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+r,s=0;s<t.length;s++){var a=t[s],l=t[s+1],c=0===s&&0===r||r>=a.parentElement.offsetTop+10&&(!l||r<l.parentElement.offsetTop-10),d=decodeURIComponent(this.$route.hash);if(c&&d!==decodeURIComponent(a.hash)){var u=a;if(o===i)for(var m=s+1;m<t.length;m++)if(d===decodeURIComponent(t[m].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(u.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},ra=(t(84),t(66)),ia=t.n(ra),oa=[Xs,ta,{mounted:function(){var n=this;ia.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Oi.component(n.name)||ia.a.start(),t()})),this.$router.afterEach((function(){ia.a.done(),n.isSidebarOpen=!1}))}}],sa={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Vs("layout",n),Oi.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},aa=t(44),la=Object(aa.a)(sa,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(Cs.a)(t));break;default:throw new Error("Unknown option name.")}}(la,"mixins",oa);var ca=[{name:"v-1faf30c2",path:"/",component:la,beforeEnter:function(n,e,t){qs("Layout","v-1faf30c2").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-236676a8",path:"/api/",component:la,beforeEnter:function(n,e,t){qs("Layout","v-236676a8").then(t)}},{path:"/api/index.html",redirect:"/api/"},{name:"v-5e4c40e7",path:"/api/classes/AbstractSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-5e4c40e7").then(t)}},{name:"v-0c1f8ed9",path:"/api/classes/AbstractSystemManager.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-0c1f8ed9").then(t)}},{name:"v-4f9c4c0e",path:"/api/classes/Allocator.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-4f9c4c0e").then(t)}},{name:"v-06ac883d",path:"/api/classes/Bits.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-06ac883d").then(t)}},{name:"v-23edadb9",path:"/api/classes/Component.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-23edadb9").then(t)}},{name:"v-63f8e29d",path:"/api/classes/ComponentBlueprint.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-63f8e29d").then(t)}},{name:"v-7a688d45",path:"/api/classes/Engine.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-7a688d45").then(t)}},{name:"v-396e9a03",path:"/api/classes/Entity.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-396e9a03").then(t)}},{name:"v-606f4a0e",path:"/api/classes/EntityFactory.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-606f4a0e").then(t)}},{name:"v-76f3a019",path:"/api/classes/EntityManager.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-76f3a019").then(t)}},{name:"v-46e9519a",path:"/api/classes/EntitySignal.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-46e9519a").then(t)}},{name:"v-281b8d36",path:"/api/classes/EntitySystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-281b8d36").then(t)}},{name:"v-d789178e",path:"/api/classes/EntitySystemManager.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-d789178e").then(t)}},{name:"v-680f8b01",path:"/api/classes/Family.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-680f8b01").then(t)}},{name:"v-081054f9",path:"/api/classes/FamilyBuilder.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-081054f9").then(t)}},{name:"v-9bfd5d0e",path:"/api/classes/IntervalIteratingSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-9bfd5d0e").then(t)}},{name:"v-6da111be",path:"/api/classes/IntervalSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-6da111be").then(t)}},{name:"v-2334b1ce",path:"/api/classes/IteratingSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-2334b1ce").then(t)}},{name:"v-38fea491",path:"/api/classes/Pool.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-38fea491").then(t)}},{name:"v-5e36b9f9",path:"/api/classes/PoolAllocator.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-5e36b9f9").then(t)}},{name:"v-ed8b760e",path:"/api/classes/ReadonlyBits.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-ed8b760e").then(t)}},{name:"v-24ca16b9",path:"/api/classes/SortedIteratingSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-24ca16b9").then(t)}},{name:"v-57d2f483",path:"/api/classes/SortedSubIteratingSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-57d2f483").then(t)}},{name:"v-52f88d79",path:"/api/classes/SubSystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-52f88d79").then(t)}},{name:"v-5022f50d",path:"/api/classes/SubSystemManager.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-5022f50d").then(t)}},{name:"v-d744928e",path:"/api/interfaces/ComponentConstructor.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-d744928e").then(t)}},{name:"v-8b55a88e",path:"/api/interfaces/NoArgsComponentConstructor.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-8b55a88e").then(t)}},{name:"v-728ee3e3",path:"/api/interfaces/PoolAllocatorConfig.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-728ee3e3").then(t)}},{name:"v-bf399a4e",path:"/api/interfaces/Poolable.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-bf399a4e").then(t)}},{name:"v-3bd1050e",path:"/api/interfaces/ReadonlyInt32Array.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-3bd1050e").then(t)}},{name:"v-44fd97ef",path:"/api/interfaces/SystemConstructor.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-44fd97ef").then(t)}},{name:"v-17b7af4e",path:"/api/modules.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-17b7af4e").then(t)}},{name:"v-03b1eb28",path:"/guide/",component:la,beforeEnter:function(n,e,t){qs("Layout","v-03b1eb28").then(t)}},{path:"/guide/index.html",redirect:"/guide/"},{name:"v-8d2c781c",path:"/guide/core/",component:la,beforeEnter:function(n,e,t){qs("Layout","v-8d2c781c").then(t)}},{path:"/guide/core/index.html",redirect:"/guide/core/"},{name:"v-1f78d2c5",path:"/guide/core/component.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-1f78d2c5").then(t)}},{name:"v-7e2a5059",path:"/guide/core/dependency-injection.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-7e2a5059").then(t)}},{name:"v-30a86c39",path:"/guide/core/engine.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-30a86c39").then(t)}},{name:"v-3fa89199",path:"/guide/core/entity.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-3fa89199").then(t)}},{name:"v-7b99fa79",path:"/guide/core/entitysystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-7b99fa79").then(t)}},{name:"v-b6426a0e",path:"/guide/core/family.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-b6426a0e").then(t)}},{name:"v-2813ef33",path:"/guide/core/pooling.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-2813ef33").then(t)}},{name:"v-22a2e879",path:"/guide/core/signal.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-22a2e879").then(t)}},{name:"v-f077aece",path:"/guide/core/special-considerations.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-f077aece").then(t)}},{name:"v-252e0b10",path:"/guide/data-driven/",component:la,beforeEnter:function(n,e,t){qs("Layout","v-252e0b10").then(t)}},{path:"/guide/data-driven/index.html",redirect:"/guide/data-driven/"},{name:"v-579f2b62",path:"/guide/data-driven/blueprints.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-579f2b62").then(t)}},{name:"v-16818fba",path:"/guide/data-driven/components.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-16818fba").then(t)}},{name:"v-c6c422ce",path:"/guide/data-driven/entityfactory.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-c6c422ce").then(t)}},{name:"v-4e62f04e",path:"/guide/data-driven/types.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-4e62f04e").then(t)}},{name:"v-7b20e0d9",path:"/guide/data-driven/usage.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-7b20e0d9").then(t)}},{name:"v-5026c2f9",path:"/guide/migration.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-5026c2f9").then(t)}},{name:"v-18783384",path:"/guide/systems/",component:la,beforeEnter:function(n,e,t){qs("Layout","v-18783384").then(t)}},{path:"/guide/systems/index.html",redirect:"/guide/systems/"},{name:"v-00e1f18e",path:"/guide/systems/intervaliteratingsystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-00e1f18e").then(t)}},{name:"v-3f563961",path:"/guide/systems/intervalsystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-3f563961").then(t)}},{name:"v-db1118ce",path:"/guide/systems/iteratingsystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-db1118ce").then(t)}},{name:"v-7aae0b0e",path:"/guide/systems/sortediteratingsystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-7aae0b0e").then(t)}},{name:"v-26a1ae83",path:"/guide/systems/sortedsubiteratingsystem.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-26a1ae83").then(t)}},{name:"v-7119cffe",path:"/guide/what-is-an-ecs.html",component:la,beforeEnter:function(n,e,t){qs("Layout","v-7119cffe").then(t)}},{path:"*",component:la}],da={title:"typed-ecstasy",description:"A high-performance entity framework  without the use of black-magic and thus making the API easy and transparent to use.",base:"/typed-ecstasy/",headTags:[],pages:[{title:"Home",frontmatter:{home:!0,heroText:null,heroAlt:"typed-ecstasy",heroImage:"/logo.png",tagline:"A high-performance entity framework  without the use of black-magic and thus making the API easy and transparent to use..",actionText:"Get Started →",actionLink:"/guide/",features:[{title:"Composition over Inheritance",details:"Using components to compose entities rather than creating entity hierarchies allows you to easily share code and keep it DRY."},{title:"Data-Driven",details:"You want to create entities from the data in your map files? With a data-driven approach you can easily do this. Check out the guide to find out more!"},{title:"Typesafe",details:"typed-ecstasy makes use of TypeScript to ensure a pleasant and safe development experience!"}],footer:"Apache-2.0 License"},regularPath:"/",relativePath:"README.md",key:"v-1faf30c2",path:"/",headers:[{level:3,title:"What is typed-ecstasy?",slug:"what-is-typed-ecstasy",normalizedTitle:"what is typed-ecstasy?",charIndex:2},{level:3,title:"Liberal License",slug:"liberal-license",normalizedTitle:"liberal license",charIndex:329}],headersStr:"What is typed-ecstasy? Liberal License",content:"# What is typed-ecstasy?\n\nA tiny entity framework written in TypeScript. It is a port of Ashley from LibGDX. typed-ecstasy is a high-performance entity framework without the use of black-magic and thus making the API easy and transparent to use.\n\nFind out what an Entity Component System (ECS) is here if you don't know yet.\n\n\n# Liberal License\n\nThanks to its Apache 2.0 license, users have the freedom to use it, modify it and redistribute as they please. Commercial purposes are perfectly allowed.",normalizedContent:"# what is typed-ecstasy?\n\na tiny entity framework written in typescript. it is a port of ashley from libgdx. typed-ecstasy is a high-performance entity framework without the use of black-magic and thus making the api easy and transparent to use.\n\nfind out what an entity component system (ecs) is here if you don't know yet.\n\n\n# liberal license\n\nthanks to its apache 2.0 license, users have the freedom to use it, modify it and redistribute as they please. commercial purposes are perfectly allowed.",charsets:{}},{frontmatter:{},regularPath:"/api/",relativePath:"api/README.md",key:"v-236676a8",path:"/api/",headers:[{level:3,title:"Get started",slug:"get-started",normalizedTitle:"get started",charIndex:611},{level:3,title:"Report issues",slug:"report-issues",normalizedTitle:"report issues",charIndex:839},{level:3,title:"Contribute",slug:"contribute",normalizedTitle:"contribute",charIndex:1136},{level:3,title:"License",slug:"license",normalizedTitle:"license",charIndex:1393}],headersStr:"Get started Report issues Contribute License",content:"A tiny entity framework written in TypeScript. It started as a port of the C++ Entity Component System ecstasy, which is a port of Ashley from LibGDX. typed-ecstasy is a high-performance entity framework without the use of black-magic and thus making the API easy and transparent to use.\n\nAutomated unit tests are running on Travis-CI\n\nFor a real project using this, check out my asteroids clone.\n\n# Fair Warning\n\nSince version 1, the target is now es2015, so if you want to support older browser, you'll have to ensure that this module is being transpiled to an older es version during your build-process.\n\n\n# Get started\n\n * Read the documentation\n * Look at the test files (src/**/*.spec.ts) might answer some questions if the documentation doesn't cover it yet.\n * Ask questions if the above doesn't clarify something good enough.\n\n\n# Report issues\n\nSomething not working quite as expected? Do you need a feature that has not been implemented yet? Check the issue tracker and add a new one if your problem is not already listed. Please try to provide a detailed description of your problem, including the steps to reproduce it.\n\n\n# Contribute\n\nAwesome! If you would like to contribute with a new feature or submit a bugfix, fork this repo and send a pull request. Please, make sure all the unit tests are passing before submitting and add new ones in case you introduced new features.\n\n\n# License\n\ntyped-ecstasy is licensed under the Apache 2 License, meaning you can use it free of charge, without strings attached in commercial and non-commercial projects. Credits are appreciated but not mandatory.",normalizedContent:"a tiny entity framework written in typescript. it started as a port of the c++ entity component system ecstasy, which is a port of ashley from libgdx. typed-ecstasy is a high-performance entity framework without the use of black-magic and thus making the api easy and transparent to use.\n\nautomated unit tests are running on travis-ci\n\nfor a real project using this, check out my asteroids clone.\n\n# fair warning\n\nsince version 1, the target is now es2015, so if you want to support older browser, you'll have to ensure that this module is being transpiled to an older es version during your build-process.\n\n\n# get started\n\n * read the documentation\n * look at the test files (src/**/*.spec.ts) might answer some questions if the documentation doesn't cover it yet.\n * ask questions if the above doesn't clarify something good enough.\n\n\n# report issues\n\nsomething not working quite as expected? do you need a feature that has not been implemented yet? check the issue tracker and add a new one if your problem is not already listed. please try to provide a detailed description of your problem, including the steps to reproduce it.\n\n\n# contribute\n\nawesome! if you would like to contribute with a new feature or submit a bugfix, fork this repo and send a pull request. please, make sure all the unit tests are passing before submitting and add new ones in case you introduced new features.\n\n\n# license\n\ntyped-ecstasy is licensed under the apache 2 license, meaning you can use it free of charge, without strings attached in commercial and non-commercial projects. credits are appreciated but not mandatory.",charsets:{}},{title:"Class: AbstractSystem",frontmatter:{},regularPath:"/api/classes/AbstractSystem.html",relativePath:"api/classes/AbstractSystem.md",key:"v-5e4c40e7",path:"/api/classes/AbstractSystem.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:66},{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:230},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:304},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:326},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:359},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:385},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:326},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:343},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:359},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:374},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:385},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:397},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:412},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:425},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:438},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:450},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:464}],headersStr:"Type parameters Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine Methods getPriority isEnabled onDisable onEnable setEnabled setPriority",content:"# Class: AbstractSystem<TSystem>\n\nBase class for all systems.\n\n\n# Type parameters\n\nNAME      TYPE                          DESCRIPTION\nTSystem   extends AbstractSystem<any>   The base system class (EntitySystem or SubSystem).\n\n\n# Hierarchy\n\n * AbstractSystem\n   \n   ↳ EntitySystem\n   \n   ↳ SubSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n\n\n# Methods\n\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * setEnabled\n * setPriority\n\n\n# Constructors\n\n\n# constructor\n\n• new AbstractSystem<TSystem>()\n\n# Type parameters\n\nNAME      TYPE\nTSystem   extends AbstractSystem<any, TSystem>\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n\n# Methods\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:36\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:28\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66",normalizedContent:"# class: abstractsystem<tsystem>\n\nbase class for all systems.\n\n\n# type parameters\n\nname      type                          description\ntsystem   extends abstractsystem<any>   the base system class (entitysystem or subsystem).\n\n\n# hierarchy\n\n * abstractsystem\n   \n   ↳ entitysystem\n   \n   ↳ subsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n\n\n# methods\n\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * setenabled\n * setpriority\n\n\n# constructors\n\n\n# constructor\n\n• new abstractsystem<tsystem>()\n\n# type parameters\n\nname      type\ntsystem   extends abstractsystem<any, tsystem>\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n\n# methods\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystem.ts:36\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystem.ts:28\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystem.ts:66",charsets:{}},{title:"Class: AbstractSystemManager",frontmatter:{},regularPath:"/api/classes/AbstractSystemManager.html",relativePath:"api/classes/AbstractSystemManager.md",key:"v-0c1f8ed9",path:"/api/classes/AbstractSystemManager.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:81},{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:245},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:340},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:362},{level:3,title:"Accessors",slug:"accessors",normalizedTitle:"accessors",charIndex:395},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:429},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:362},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:379},{level:2,title:"Accessors",slug:"accessors-2",normalizedTitle:"accessors",charIndex:395},{level:3,title:"delayOperations",slug:"delayoperations",normalizedTitle:"delayoperations",charIndex:409},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:429},{level:3,title:"add",slug:"add",normalizedTitle:"add",charIndex:441},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:448},{level:3,title:"getAll",slug:"getall",normalizedTitle:"getall",charIndex:455},{level:3,title:"hasEnabledSystems",slug:"hasenabledsystems",normalizedTitle:"hasenabledsystems",charIndex:465},{level:3,title:"remove",slug:"remove",normalizedTitle:"remove",charIndex:486},{level:3,title:"removeAll",slug:"removeall",normalizedTitle:"removeall",charIndex:496}],headersStr:"Type parameters Hierarchy Table of contents Constructors Accessors Methods Constructors constructor Accessors delayOperations Methods add get getAll hasEnabledSystems remove removeAll",content:"# Class: AbstractSystemManager<TSystem>\n\nBase class for all system managers.\n\n\n# Type parameters\n\nNAME      TYPE                          DESCRIPTION\nTSystem   extends AbstractSystem<any>   The base system class (EntitySystem or SubSystem).\n\n\n# Hierarchy\n\n * AbstractSystemManager\n   \n   ↳ EntitySystemManager\n   \n   ↳ SubSystemManager\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Accessors\n\n * delayOperations\n\n\n# Methods\n\n * add\n * get\n * getAll\n * hasEnabledSystems\n * remove\n * removeAll\n\n\n# Constructors\n\n\n# constructor\n\n• new AbstractSystemManager<TSystem>(container)\n\n# Type parameters\n\nNAME      TYPE\nTSystem   extends AbstractSystem<any, TSystem>\n\n# Parameters\n\nNAME        TYPE                DESCRIPTION\ncontainer   ContainerInstance   The container instance to use.\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:32\n\n\n# Accessors\n\n\n# delayOperations\n\n• Protected set delayOperations(shouldDelay): void\n\n# Parameters\n\nNAME          TYPE\nshouldDelay   boolean\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:37\n\n\n# Methods\n\n\n# add\n\n▸ add<T>(constructor, priority?): T\n\nAdds the system to this manager.\n\n# Type parameters\n\nNAME   TYPE                             DESCRIPTION\nT      extends AbstractSystem<any, T>   The entity system class.\n\n# Parameters\n\nNAME          TYPE                   DEFAULT VALUE   DESCRIPTION\nconstructor   SystemConstructor<T>   undefined       The system to add.\npriority      number                 0               The priority to execute this system with (lower means higher\n                                                     priority).\n\n# Returns\n\nT\n\nThe newly created system.\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:54\n\n----------------------------------------\n\n\n# get\n\n▸ get<T>(clazz): undefined | T\n\nGet a system by its class.\n\n# Type parameters\n\nNAME   TYPE                             DESCRIPTION\nT      extends AbstractSystem<any, T>   The entity system class.\n\n# Parameters\n\nNAME    TYPE                   DESCRIPTION\nclazz   SystemConstructor<T>   The constructor for T.\n\n# Returns\n\nundefined | T\n\nThe T of the specified class, or undefined if no such system exists.\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:125\n\n----------------------------------------\n\n\n# getAll\n\n▸ getAll(): TSystem[]\n\n# Returns\n\nTSystem[]\n\nA list of all entity systems managed by the Engine sorted by priority.\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:132\n\n----------------------------------------\n\n\n# hasEnabledSystems\n\n▸ hasEnabledSystems(): boolean\n\n# Returns\n\nboolean\n\nTrue if any added system is enabled.\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:42\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nRemoves the system from this Engine.\n\n# Parameters\n\nNAME    TYPE                         DESCRIPTION\nclazz   SystemConstructor<TSystem>   The System class to remove.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:84\n\n----------------------------------------\n\n\n# removeAll\n\n▸ removeAll(): void\n\nRemoves all systems registered with this Engine.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:105",normalizedContent:"# class: abstractsystemmanager<tsystem>\n\nbase class for all system managers.\n\n\n# type parameters\n\nname      type                          description\ntsystem   extends abstractsystem<any>   the base system class (entitysystem or subsystem).\n\n\n# hierarchy\n\n * abstractsystemmanager\n   \n   ↳ entitysystemmanager\n   \n   ↳ subsystemmanager\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# accessors\n\n * delayoperations\n\n\n# methods\n\n * add\n * get\n * getall\n * hasenabledsystems\n * remove\n * removeall\n\n\n# constructors\n\n\n# constructor\n\n• new abstractsystemmanager<tsystem>(container)\n\n# type parameters\n\nname      type\ntsystem   extends abstractsystem<any, tsystem>\n\n# parameters\n\nname        type                description\ncontainer   containerinstance   the container instance to use.\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:32\n\n\n# accessors\n\n\n# delayoperations\n\n• protected set delayoperations(shoulddelay): void\n\n# parameters\n\nname          type\nshoulddelay   boolean\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:37\n\n\n# methods\n\n\n# add\n\n▸ add<t>(constructor, priority?): t\n\nadds the system to this manager.\n\n# type parameters\n\nname   type                             description\nt      extends abstractsystem<any, t>   the entity system class.\n\n# parameters\n\nname          type                   default value   description\nconstructor   systemconstructor<t>   undefined       the system to add.\npriority      number                 0               the priority to execute this system with (lower means higher\n                                                     priority).\n\n# returns\n\nt\n\nthe newly created system.\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:54\n\n----------------------------------------\n\n\n# get\n\n▸ get<t>(clazz): undefined | t\n\nget a system by its class.\n\n# type parameters\n\nname   type                             description\nt      extends abstractsystem<any, t>   the entity system class.\n\n# parameters\n\nname    type                   description\nclazz   systemconstructor<t>   the constructor for t.\n\n# returns\n\nundefined | t\n\nthe t of the specified class, or undefined if no such system exists.\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:125\n\n----------------------------------------\n\n\n# getall\n\n▸ getall(): tsystem[]\n\n# returns\n\ntsystem[]\n\na list of all entity systems managed by the engine sorted by priority.\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:132\n\n----------------------------------------\n\n\n# hasenabledsystems\n\n▸ hasenabledsystems(): boolean\n\n# returns\n\nboolean\n\ntrue if any added system is enabled.\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:42\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nremoves the system from this engine.\n\n# parameters\n\nname    type                         description\nclazz   systemconstructor<tsystem>   the system class to remove.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:84\n\n----------------------------------------\n\n\n# removeall\n\n▸ removeall(): void\n\nremoves all systems registered with this engine.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:105",charsets:{cjk:!0}},{title:"Class: Allocator",frontmatter:{},regularPath:"/api/classes/Allocator.html",relativePath:"api/classes/Allocator.md",key:"v-4f9c4c0e",path:"/api/classes/Allocator.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:200},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:222},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:255},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:222},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:239},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:255},{level:3,title:"freeComponent",slug:"freecomponent",normalizedTitle:"freecomponent",charIndex:267},{level:3,title:"freeEntity",slug:"freeentity",normalizedTitle:"freeentity",charIndex:284},{level:3,title:"obtainComponent",slug:"obtaincomponent",normalizedTitle:"obtaincomponent",charIndex:298},{level:3,title:"obtainEntity",slug:"obtainentity",normalizedTitle:"obtainentity",charIndex:317}],headersStr:"Table of contents Constructors Methods Constructors constructor Methods freeComponent freeEntity obtainComponent obtainEntity",content:"# Class: Allocator\n\nAn allocator can be used for obtaining new or reused entities/components. This allocator just creates new instances every time and does not support pooling.\n\nsee PoolAllocator\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * freeComponent\n * freeEntity\n * obtainComponent\n * obtainEntity\n\n\n# Constructors\n\n\n# constructor\n\n• new Allocator()\n\n\n# Methods\n\n\n# freeComponent\n\n▸ freeComponent(_component): void\n\nFree a component (possibly marking it for reuse).\n\n# Parameters\n\nNAME         TYPE        DESCRIPTION\n_component   Component   The component to free.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/Allocator.ts:39\n\n----------------------------------------\n\n\n# freeEntity\n\n▸ freeEntity(_entity): void\n\nFree an entity (possibly marking it for reuse).\n\n# Parameters\n\nNAME      TYPE     DESCRIPTION\n_entity   Entity   The entity to free.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/Allocator.ts:21\n\n----------------------------------------\n\n\n# obtainComponent\n\n▸ obtainComponent<T>(Class): T\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends Component<T>   The component class to obtain, do not specify manually!\n\n# Parameters\n\nNAME    TYPE                            DESCRIPTION\nClass   NoArgsComponentConstructor<T>   The component constructor to use.\n\n# Returns\n\nT\n\nA new or reused component of the specified class.\n\n# Defined in\n\nsrc/core/Allocator.ts:30\n\n----------------------------------------\n\n\n# obtainEntity\n\n▸ obtainEntity(): Entity\n\n# Returns\n\nEntity\n\nA new or reused entity.\n\n# Defined in\n\nsrc/core/Allocator.ts:12",normalizedContent:"# class: allocator\n\nan allocator can be used for obtaining new or reused entities/components. this allocator just creates new instances every time and does not support pooling.\n\nsee poolallocator\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * freecomponent\n * freeentity\n * obtaincomponent\n * obtainentity\n\n\n# constructors\n\n\n# constructor\n\n• new allocator()\n\n\n# methods\n\n\n# freecomponent\n\n▸ freecomponent(_component): void\n\nfree a component (possibly marking it for reuse).\n\n# parameters\n\nname         type        description\n_component   component   the component to free.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/allocator.ts:39\n\n----------------------------------------\n\n\n# freeentity\n\n▸ freeentity(_entity): void\n\nfree an entity (possibly marking it for reuse).\n\n# parameters\n\nname      type     description\n_entity   entity   the entity to free.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/allocator.ts:21\n\n----------------------------------------\n\n\n# obtaincomponent\n\n▸ obtaincomponent<t>(class): t\n\n# type parameters\n\nname   type                   description\nt      extends component<t>   the component class to obtain, do not specify manually!\n\n# parameters\n\nname    type                            description\nclass   noargscomponentconstructor<t>   the component constructor to use.\n\n# returns\n\nt\n\na new or reused component of the specified class.\n\n# defined in\n\nsrc/core/allocator.ts:30\n\n----------------------------------------\n\n\n# obtainentity\n\n▸ obtainentity(): entity\n\n# returns\n\nentity\n\na new or reused entity.\n\n# defined in\n\nsrc/core/allocator.ts:12",charsets:{}},{title:"Class: Bits",frontmatter:{},regularPath:"/api/classes/Bits.html",relativePath:"api/classes/Bits.md",key:"v-06ac883d",path:"/api/classes/Bits.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:140},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:185},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:207},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:240},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:264},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:207},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:224},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:240},{level:3,title:"data",slug:"data",normalizedTitle:"data",charIndex:255},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:264},{level:3,title:"and",slug:"and",normalizedTitle:"and",charIndex:276},{level:3,title:"andNot",slug:"andnot",normalizedTitle:"andnot",charIndex:283},{level:3,title:"clear",slug:"clear",normalizedTitle:"clear",charIndex:293},{level:3,title:"clearAll",slug:"clearall",normalizedTitle:"clearall",charIndex:302},{level:3,title:"containsAll",slug:"containsall",normalizedTitle:"containsall",charIndex:314},{level:3,title:"equals",slug:"equals",normalizedTitle:"equals",charIndex:329},{level:3,title:"flip",slug:"flip",normalizedTitle:"flip",charIndex:339},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:347},{level:3,title:"getAndClear",slug:"getandclear",normalizedTitle:"getandclear",charIndex:354},{level:3,title:"getAndSet",slug:"getandset",normalizedTitle:"getandset",charIndex:369},{level:3,title:"getData",slug:"getdata",normalizedTitle:"getdata",charIndex:382},{level:3,title:"getStringId",slug:"getstringid",normalizedTitle:"getstringid",charIndex:393},{level:3,title:"intersects",slug:"intersects",normalizedTitle:"intersects",charIndex:408},{level:3,title:"isEmpty",slug:"isempty",normalizedTitle:"isempty",charIndex:422},{level:3,title:"length",slug:"length",normalizedTitle:"length",charIndex:433},{level:3,title:"nextClearBit",slug:"nextclearbit",normalizedTitle:"nextclearbit",charIndex:443},{level:3,title:"nextSetBit",slug:"nextsetbit",normalizedTitle:"nextsetbit",charIndex:459},{level:3,title:"numBits",slug:"numbits",normalizedTitle:"numbits",charIndex:473},{level:3,title:"or",slug:"or",normalizedTitle:"or",charIndex:86},{level:3,title:"set",slug:"set",normalizedTitle:"set",charIndex:20},{level:3,title:"setAll",slug:"setall",normalizedTitle:"setall",charIndex:497},{level:3,title:"usedWords",slug:"usedwords",normalizedTitle:"usedwords",charIndex:507},{level:3,title:"xor",slug:"xor",normalizedTitle:"xor",charIndex:520}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties data Methods and andNot clear clearAll containsAll equals flip get getAndClear getAndSet getData getStringId intersects isEmpty length nextClearBit nextSetBit numBits or set setAll usedWords xor",content:'# Class: Bits\n\nA bitset, without size limitation, allows comparison via bitwise operators to other bit fields. Mostly for internal use.\n\n\n# Hierarchy\n\n * ReadonlyBits\n   \n   ↳ Bits\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * data\n\n\n# Methods\n\n * and\n * andNot\n * clear\n * clearAll\n * containsAll\n * equals\n * flip\n * get\n * getAndClear\n * getAndSet\n * getData\n * getStringId\n * intersects\n * isEmpty\n * length\n * nextClearBit\n * nextSetBit\n * numBits\n * or\n * set\n * setAll\n * usedWords\n * xor\n\n\n# Constructors\n\n\n# constructor\n\n• new Bits(nbits?)\n\nCreates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1.\n\n# Parameters\n\nNAME    TYPE     DEFAULT VALUE   DESCRIPTION\nnbits   number   64              The initial size of the bit set.\n\n# Inherited from\n\nReadonlyBits.constructor\n\n# Defined in\n\nsrc/utils/Bits.ts:17\n\n\n# Properties\n\n\n# data\n\n• Protected data: Int32Array\n\n# Inherited from\n\nReadonlyBits.data\n\n# Defined in\n\nsrc/utils/Bits.ts:10\n\n\n# Methods\n\n\n# and\n\n▸ and(other): Bits\n\nPerforms a logical AND of this target bit set with the argument bit set. This bit set is modified so that each bit in it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nBits\n\nThis for chaining.\n\n# Defined in\n\nsrc/utils/Bits.ts:282\n\n----------------------------------------\n\n\n# andNot\n\n▸ andNot(other): Bits\n\nClears all of the bits in this instance whose corresponding bit is set in the other instance.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nBits\n\nThis for chaining.\n\n# Defined in\n\nsrc/utils/Bits.ts:303\n\n----------------------------------------\n\n\n# clear\n\n▸ clear(index): void\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit to clear.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/utils/Bits.ts:263\n\n----------------------------------------\n\n\n# clearAll\n\n▸ clearAll(): void\n\nClears the entire bitset.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/utils/Bits.ts:270\n\n----------------------------------------\n\n\n# containsAll\n\n▸ containsAll(other): boolean\n\nReturns true if this instance is a super set of the other instance, i.e. it has all bits set to true that are also set to true in the other instance.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nboolean\n\nTrue if this bit set is a super set of the specified set.\n\n# Inherited from\n\nReadonlyBits.containsAll\n\n# Defined in\n\nsrc/utils/Bits.ts:162\n\n----------------------------------------\n\n\n# equals\n\n▸ equals(other): boolean\n\nCompare with another set of bits.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The bits to compare with.\n\n# Returns\n\nboolean\n\nTrue if all bits match.\n\n# Inherited from\n\nReadonlyBits.equals\n\n# Defined in\n\nsrc/utils/Bits.ts:188\n\n----------------------------------------\n\n\n# flip\n\n▸ flip(index): void\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit to flip.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/utils/Bits.ts:247\n\n----------------------------------------\n\n\n# get\n\n▸ get(index): boolean\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit.\n\n# Returns\n\nboolean\n\nWhether the bit is set.\n\n# Inherited from\n\nReadonlyBits.get\n\n# Defined in\n\nsrc/utils/Bits.ts:32\n\n----------------------------------------\n\n\n# getAndClear\n\n▸ getAndClear(index): boolean\n\nReturns the bit at the given index and clears it in one go.\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit.\n\n# Returns\n\nboolean\n\nWhether the bit was set before invocation.\n\n# Defined in\n\nsrc/utils/Bits.ts:212\n\n----------------------------------------\n\n\n# getAndSet\n\n▸ getAndSet(index): boolean\n\nReturns the bit at the given index and sets it in one go.\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit.\n\n# Returns\n\nboolean\n\nWhether the bit was set before invocation.\n\n# Defined in\n\nsrc/utils/Bits.ts:226\n\n----------------------------------------\n\n\n# getData\n\n▸ getData(): ReadonlyInt32Array\n\n# Returns\n\nReadonlyInt32Array\n\nA readonly version of the underlying data.\n\n# Inherited from\n\nReadonlyBits.getData\n\n# Defined in\n\nsrc/utils/Bits.ts:24\n\n----------------------------------------\n\n\n# getStringId\n\n▸ getStringId(): string\n\n# Returns\n\nstring\n\nAll numbers as string, comma separated.\n\n# Inherited from\n\nReadonlyBits.getStringId\n\n# Defined in\n\nsrc/utils/Bits.ts:178\n\n----------------------------------------\n\n\n# intersects\n\n▸ intersects(other): boolean\n\nReturns true if the other instance has any bits set to true that are also set to true in this instance.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nboolean\n\nTrue if this bit set intersects the specified bit set.\n\n# Inherited from\n\nReadonlyBits.intersects\n\n# Defined in\n\nsrc/utils/Bits.ts:145\n\n----------------------------------------\n\n\n# isEmpty\n\n▸ isEmpty(): boolean\n\n# Returns\n\nboolean\n\nTrue if this bitset contains no bits that are set to true.\n\n# Inherited from\n\nReadonlyBits.isEmpty\n\n# Defined in\n\nsrc/utils/Bits.ts:73\n\n----------------------------------------\n\n\n# length\n\n▸ length(): number\n\nReturns the "logical size" of this bitset: The index of the highest set bit in the bitset plus one. Returns zero if the bitset contains no set bits.\n\n# Returns\n\nnumber\n\nThe logical size of this bitset.\n\n# Inherited from\n\nReadonlyBits.length\n\n# Defined in\n\nsrc/utils/Bits.ts:58\n\n----------------------------------------\n\n\n# nextClearBit\n\n▸ nextClearBit(fromIndex): number\n\nReturns the index of the first bit that is set to false that occurs on or after the specified starting index.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nfromIndex   number   The index to start looking.\n\n# Returns\n\nnumber\n\n>= 0 if a falsy bit was found, -1 otherwise.\n\n# Inherited from\n\nReadonlyBits.nextClearBit\n\n# Defined in\n\nsrc/utils/Bits.ts:119\n\n----------------------------------------\n\n\n# nextSetBit\n\n▸ nextSetBit(fromIndex): number\n\nReturns the index of the first bit that is set to true that occurs on or after the specified starting index.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nfromIndex   number   The index to start looking.\n\n# Returns\n\nnumber\n\n>= 0 if a truthy bit was found, -1 otherwise.\n\n# Inherited from\n\nReadonlyBits.nextSetBit\n\n# Defined in\n\nsrc/utils/Bits.ts:89\n\n----------------------------------------\n\n\n# numBits\n\n▸ numBits(): number\n\n# Returns\n\nnumber\n\nThe number of bits currently stored, not the highest set bit!\n\n# Inherited from\n\nReadonlyBits.numBits\n\n# Defined in\n\nsrc/utils/Bits.ts:39\n\n----------------------------------------\n\n\n# or\n\n▸ or(other): Bits\n\nPerforms a logical OR of this instance with the other instance. This instance is modified so that a bit in it has the value true if and only if it either already had the value true or the corresponding bit in the other instance has the value true.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   A bit set.\n\n# Returns\n\nBits\n\nThis for chaining.\n\n# Defined in\n\nsrc/utils/Bits.ts:319\n\n----------------------------------------\n\n\n# set\n\n▸ set(index): void\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit to set.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/utils/Bits.ts:235\n\n----------------------------------------\n\n\n# setAll\n\n▸ setAll(): void\n\nSets the entire bitset.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/utils/Bits.ts:242\n\n----------------------------------------\n\n\n# usedWords\n\n▸ usedWords(): number\n\n# Returns\n\nnumber\n\nThe minimal number of words to store all the bits.\n\n# Inherited from\n\nReadonlyBits.usedWords\n\n# Defined in\n\nsrc/utils/Bits.ts:44\n\n----------------------------------------\n\n\n# xor\n\n▸ xor(other): Bits\n\nPerforms a logical XOR of this bit set with the bit set argument. This bit set is modified so that a bit in it has the value true if and only if one of the following statements holds:\n\n * The bit initially has the value true, and the corresponding bit in the argument has the value false.\n * The bit initially has the value false, and the corresponding bit in the argument has the value true.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nBits\n\nThis for chaining.\n\n# Defined in\n\nsrc/utils/Bits.ts:345',normalizedContent:'# class: bits\n\na bitset, without size limitation, allows comparison via bitwise operators to other bit fields. mostly for internal use.\n\n\n# hierarchy\n\n * readonlybits\n   \n   ↳ bits\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * data\n\n\n# methods\n\n * and\n * andnot\n * clear\n * clearall\n * containsall\n * equals\n * flip\n * get\n * getandclear\n * getandset\n * getdata\n * getstringid\n * intersects\n * isempty\n * length\n * nextclearbit\n * nextsetbit\n * numbits\n * or\n * set\n * setall\n * usedwords\n * xor\n\n\n# constructors\n\n\n# constructor\n\n• new bits(nbits?)\n\ncreates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1.\n\n# parameters\n\nname    type     default value   description\nnbits   number   64              the initial size of the bit set.\n\n# inherited from\n\nreadonlybits.constructor\n\n# defined in\n\nsrc/utils/bits.ts:17\n\n\n# properties\n\n\n# data\n\n• protected data: int32array\n\n# inherited from\n\nreadonlybits.data\n\n# defined in\n\nsrc/utils/bits.ts:10\n\n\n# methods\n\n\n# and\n\n▸ and(other): bits\n\nperforms a logical and of this target bit set with the argument bit set. this bit set is modified so that each bit in it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nbits\n\nthis for chaining.\n\n# defined in\n\nsrc/utils/bits.ts:282\n\n----------------------------------------\n\n\n# andnot\n\n▸ andnot(other): bits\n\nclears all of the bits in this instance whose corresponding bit is set in the other instance.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nbits\n\nthis for chaining.\n\n# defined in\n\nsrc/utils/bits.ts:303\n\n----------------------------------------\n\n\n# clear\n\n▸ clear(index): void\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit to clear.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/utils/bits.ts:263\n\n----------------------------------------\n\n\n# clearall\n\n▸ clearall(): void\n\nclears the entire bitset.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/utils/bits.ts:270\n\n----------------------------------------\n\n\n# containsall\n\n▸ containsall(other): boolean\n\nreturns true if this instance is a super set of the other instance, i.e. it has all bits set to true that are also set to true in the other instance.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nboolean\n\ntrue if this bit set is a super set of the specified set.\n\n# inherited from\n\nreadonlybits.containsall\n\n# defined in\n\nsrc/utils/bits.ts:162\n\n----------------------------------------\n\n\n# equals\n\n▸ equals(other): boolean\n\ncompare with another set of bits.\n\n# parameters\n\nname    type           description\nother   readonlybits   the bits to compare with.\n\n# returns\n\nboolean\n\ntrue if all bits match.\n\n# inherited from\n\nreadonlybits.equals\n\n# defined in\n\nsrc/utils/bits.ts:188\n\n----------------------------------------\n\n\n# flip\n\n▸ flip(index): void\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit to flip.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/utils/bits.ts:247\n\n----------------------------------------\n\n\n# get\n\n▸ get(index): boolean\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit.\n\n# returns\n\nboolean\n\nwhether the bit is set.\n\n# inherited from\n\nreadonlybits.get\n\n# defined in\n\nsrc/utils/bits.ts:32\n\n----------------------------------------\n\n\n# getandclear\n\n▸ getandclear(index): boolean\n\nreturns the bit at the given index and clears it in one go.\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit.\n\n# returns\n\nboolean\n\nwhether the bit was set before invocation.\n\n# defined in\n\nsrc/utils/bits.ts:212\n\n----------------------------------------\n\n\n# getandset\n\n▸ getandset(index): boolean\n\nreturns the bit at the given index and sets it in one go.\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit.\n\n# returns\n\nboolean\n\nwhether the bit was set before invocation.\n\n# defined in\n\nsrc/utils/bits.ts:226\n\n----------------------------------------\n\n\n# getdata\n\n▸ getdata(): readonlyint32array\n\n# returns\n\nreadonlyint32array\n\na readonly version of the underlying data.\n\n# inherited from\n\nreadonlybits.getdata\n\n# defined in\n\nsrc/utils/bits.ts:24\n\n----------------------------------------\n\n\n# getstringid\n\n▸ getstringid(): string\n\n# returns\n\nstring\n\nall numbers as string, comma separated.\n\n# inherited from\n\nreadonlybits.getstringid\n\n# defined in\n\nsrc/utils/bits.ts:178\n\n----------------------------------------\n\n\n# intersects\n\n▸ intersects(other): boolean\n\nreturns true if the other instance has any bits set to true that are also set to true in this instance.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nboolean\n\ntrue if this bit set intersects the specified bit set.\n\n# inherited from\n\nreadonlybits.intersects\n\n# defined in\n\nsrc/utils/bits.ts:145\n\n----------------------------------------\n\n\n# isempty\n\n▸ isempty(): boolean\n\n# returns\n\nboolean\n\ntrue if this bitset contains no bits that are set to true.\n\n# inherited from\n\nreadonlybits.isempty\n\n# defined in\n\nsrc/utils/bits.ts:73\n\n----------------------------------------\n\n\n# length\n\n▸ length(): number\n\nreturns the "logical size" of this bitset: the index of the highest set bit in the bitset plus one. returns zero if the bitset contains no set bits.\n\n# returns\n\nnumber\n\nthe logical size of this bitset.\n\n# inherited from\n\nreadonlybits.length\n\n# defined in\n\nsrc/utils/bits.ts:58\n\n----------------------------------------\n\n\n# nextclearbit\n\n▸ nextclearbit(fromindex): number\n\nreturns the index of the first bit that is set to false that occurs on or after the specified starting index.\n\n# parameters\n\nname        type     description\nfromindex   number   the index to start looking.\n\n# returns\n\nnumber\n\n>= 0 if a falsy bit was found, -1 otherwise.\n\n# inherited from\n\nreadonlybits.nextclearbit\n\n# defined in\n\nsrc/utils/bits.ts:119\n\n----------------------------------------\n\n\n# nextsetbit\n\n▸ nextsetbit(fromindex): number\n\nreturns the index of the first bit that is set to true that occurs on or after the specified starting index.\n\n# parameters\n\nname        type     description\nfromindex   number   the index to start looking.\n\n# returns\n\nnumber\n\n>= 0 if a truthy bit was found, -1 otherwise.\n\n# inherited from\n\nreadonlybits.nextsetbit\n\n# defined in\n\nsrc/utils/bits.ts:89\n\n----------------------------------------\n\n\n# numbits\n\n▸ numbits(): number\n\n# returns\n\nnumber\n\nthe number of bits currently stored, not the highest set bit!\n\n# inherited from\n\nreadonlybits.numbits\n\n# defined in\n\nsrc/utils/bits.ts:39\n\n----------------------------------------\n\n\n# or\n\n▸ or(other): bits\n\nperforms a logical or of this instance with the other instance. this instance is modified so that a bit in it has the value true if and only if it either already had the value true or the corresponding bit in the other instance has the value true.\n\n# parameters\n\nname    type           description\nother   readonlybits   a bit set.\n\n# returns\n\nbits\n\nthis for chaining.\n\n# defined in\n\nsrc/utils/bits.ts:319\n\n----------------------------------------\n\n\n# set\n\n▸ set(index): void\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit to set.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/utils/bits.ts:235\n\n----------------------------------------\n\n\n# setall\n\n▸ setall(): void\n\nsets the entire bitset.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/utils/bits.ts:242\n\n----------------------------------------\n\n\n# usedwords\n\n▸ usedwords(): number\n\n# returns\n\nnumber\n\nthe minimal number of words to store all the bits.\n\n# inherited from\n\nreadonlybits.usedwords\n\n# defined in\n\nsrc/utils/bits.ts:44\n\n----------------------------------------\n\n\n# xor\n\n▸ xor(other): bits\n\nperforms a logical xor of this bit set with the bit set argument. this bit set is modified so that a bit in it has the value true if and only if one of the following statements holds:\n\n * the bit initially has the value true, and the corresponding bit in the argument has the value false.\n * the bit initially has the value false, and the corresponding bit in the argument has the value true.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nbits\n\nthis for chaining.\n\n# defined in\n\nsrc/utils/bits.ts:345',charsets:{}},{title:"Class: Component",frontmatter:{},regularPath:"/api/classes/Component.html",relativePath:"api/classes/Component.md",key:"v-23edadb9",path:"/api/classes/Component.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:150},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:172},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:205},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:172},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:189},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:205},{level:3,title:"getComponentBit",slug:"getcomponentbit",normalizedTitle:"getcomponentbit",charIndex:217},{level:3,title:"getComponentClass",slug:"getcomponentclass",normalizedTitle:"getcomponentclass",charIndex:236},{level:3,title:"is",slug:"is",normalizedTitle:"is",charIndex:63},{level:3,title:"getComponentBit",slug:"getcomponentbit-2",normalizedTitle:"getcomponentbit",charIndex:217}],headersStr:"Table of contents Constructors Methods Constructors constructor Methods getComponentBit getComponentClass is getComponentBit",content:"# Class: Component\n\nBase class for all components. A Component is intended as a data holder and provides data to be processed in an EntitySystem.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * getComponentBit\n * getComponentClass\n * is\n * getComponentBit\n\n\n# Constructors\n\n\n# constructor\n\n• new Component()\n\n\n# Methods\n\n\n# getComponentBit\n\n▸ getComponentBit(): any\n\n# Returns\n\nany\n\nThe bit of this component.\n\n# Defined in\n\nsrc/core/Component.ts:44\n\n----------------------------------------\n\n\n# getComponentClass\n\n▸ getComponentClass(): any\n\n# Returns\n\nany\n\nThe class of this component.\n\n# Defined in\n\nsrc/core/Component.ts:37\n\n----------------------------------------\n\n\n# is\n\n▸ is(clazz): boolean\n\nCheck if this component matches the specified class.\n\n# Parameters\n\nNAME    TYPE                              DESCRIPTION\nclazz   ComponentConstructor<Component>   The class to compare with.\n\n# Returns\n\nboolean\n\nTrue if it matches.\n\n# Defined in\n\nsrc/core/Component.ts:68\n\n----------------------------------------\n\n\n# getComponentBit\n\n▸ Static getComponentBit(): number\n\nthrows When called on Component itself rather than on a subclass.\n\n# Returns\n\nnumber\n\nThe bit of this component class.\n\n# Defined in\n\nsrc/core/Component.ts:52",normalizedContent:"# class: component\n\nbase class for all components. a component is intended as a data holder and provides data to be processed in an entitysystem.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * getcomponentbit\n * getcomponentclass\n * is\n * getcomponentbit\n\n\n# constructors\n\n\n# constructor\n\n• new component()\n\n\n# methods\n\n\n# getcomponentbit\n\n▸ getcomponentbit(): any\n\n# returns\n\nany\n\nthe bit of this component.\n\n# defined in\n\nsrc/core/component.ts:44\n\n----------------------------------------\n\n\n# getcomponentclass\n\n▸ getcomponentclass(): any\n\n# returns\n\nany\n\nthe class of this component.\n\n# defined in\n\nsrc/core/component.ts:37\n\n----------------------------------------\n\n\n# is\n\n▸ is(clazz): boolean\n\ncheck if this component matches the specified class.\n\n# parameters\n\nname    type                              description\nclazz   componentconstructor<component>   the class to compare with.\n\n# returns\n\nboolean\n\ntrue if it matches.\n\n# defined in\n\nsrc/core/component.ts:68\n\n----------------------------------------\n\n\n# getcomponentbit\n\n▸ static getcomponentbit(): number\n\nthrows when called on component itself rather than on a subclass.\n\n# returns\n\nnumber\n\nthe bit of this component class.\n\n# defined in\n\nsrc/core/component.ts:52",charsets:{}},{title:"Class: ComponentBlueprint",frontmatter:{},regularPath:"/api/classes/ComponentBlueprint.html",relativePath:"api/classes/ComponentBlueprint.md",key:"v-63f8e29d",path:"/api/classes/ComponentBlueprint.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:134},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:220},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:242},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:275},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:299},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:242},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:259},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:275},{level:3,title:"name",slug:"name",normalizedTitle:"name",charIndex:43},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:299},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:311},{level:3,title:"setOverrides",slug:"setoverrides",normalizedTitle:"setoverrides",charIndex:318}],headersStr:"Type parameters Table of contents Constructors Properties Methods Constructors constructor Properties name Methods get setOverrides",content:"# Class: ComponentBlueprint<T>\n\nStores the name of a component and key/value pairs to construct the component.\n\nsee EntityFactory\n\n\n# Type parameters\n\nNAME   TYPE   DESCRIPTION\nT      any    The blueprint interface.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * name\n\n\n# Methods\n\n * get\n * setOverrides\n\n\n# Constructors\n\n\n# constructor\n\n• new ComponentBlueprint<T>(name, defaultValues)\n\nCreates a new blueprint with the specified component name.\n\n# Type parameters\n\nNAME   TYPE\nT      any\n\n# Parameters\n\nNAME            TYPE     DESCRIPTION\nname            string   The name of the component.\ndefaultValues   T        The default values to use.\n\n# Defined in\n\nsrc/factory/ComponentBlueprint.ts:23\n\n\n# Properties\n\n\n# name\n\n• Readonly name: string\n\nThe name of this blueprint.\n\n# Defined in\n\nsrc/factory/ComponentBlueprint.ts:11\n\n\n# Methods\n\n\n# get\n\n▸ get<TKey>(key, fallback): Exclude<T[TKey], undefined>\n\nGet a value.\n\n# Type parameters\n\nNAME   TYPE             DESCRIPTION\nTKey   extends string   The type of key, do not specify manually!\n\n# Parameters\n\nNAME       TYPE                          DESCRIPTION\nkey        TKey                          The key.\nfallback   Exclude<T[TKey], undefined>   The value to return if no default value and no override\n                                         value exists for the key.\n\n# Returns\n\nExclude<T[TKey], undefined>\n\nThe corresponding value from overrides, defaultValues or the fallback parameter (in that order).\n\n# Defined in\n\nsrc/factory/ComponentBlueprint.ts:45\n\n----------------------------------------\n\n\n# setOverrides\n\n▸ Protected setOverrides(overrides?): void\n\nSet the overrides map.\n\n# Parameters\n\nNAME         TYPE         DESCRIPTION\noverrides?   Partial<T>   The overrides to use on the next get* calls.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/factory/ComponentBlueprint.ts:33",normalizedContent:"# class: componentblueprint<t>\n\nstores the name of a component and key/value pairs to construct the component.\n\nsee entityfactory\n\n\n# type parameters\n\nname   type   description\nt      any    the blueprint interface.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * name\n\n\n# methods\n\n * get\n * setoverrides\n\n\n# constructors\n\n\n# constructor\n\n• new componentblueprint<t>(name, defaultvalues)\n\ncreates a new blueprint with the specified component name.\n\n# type parameters\n\nname   type\nt      any\n\n# parameters\n\nname            type     description\nname            string   the name of the component.\ndefaultvalues   t        the default values to use.\n\n# defined in\n\nsrc/factory/componentblueprint.ts:23\n\n\n# properties\n\n\n# name\n\n• readonly name: string\n\nthe name of this blueprint.\n\n# defined in\n\nsrc/factory/componentblueprint.ts:11\n\n\n# methods\n\n\n# get\n\n▸ get<tkey>(key, fallback): exclude<t[tkey], undefined>\n\nget a value.\n\n# type parameters\n\nname   type             description\ntkey   extends string   the type of key, do not specify manually!\n\n# parameters\n\nname       type                          description\nkey        tkey                          the key.\nfallback   exclude<t[tkey], undefined>   the value to return if no default value and no override\n                                         value exists for the key.\n\n# returns\n\nexclude<t[tkey], undefined>\n\nthe corresponding value from overrides, defaultvalues or the fallback parameter (in that order).\n\n# defined in\n\nsrc/factory/componentblueprint.ts:45\n\n----------------------------------------\n\n\n# setoverrides\n\n▸ protected setoverrides(overrides?): void\n\nset the overrides map.\n\n# parameters\n\nname         type         description\noverrides?   partial<t>   the overrides to use on the next get* calls.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/factory/componentblueprint.ts:33",charsets:{}},{title:"Class: Engine",frontmatter:{},regularPath:"/api/classes/Engine.html",relativePath:"api/classes/Engine.md",key:"v-7a688d45",path:"/api/classes/Engine.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:180},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:202},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:235},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:274},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:202},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:219},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:235},{level:3,title:"entities",slug:"entities",normalizedTitle:"entities",charIndex:91},{level:3,title:"systems",slug:"systems",normalizedTitle:"systems",charIndex:104},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:274},{level:3,title:"getContainer",slug:"getcontainer",normalizedTitle:"getcontainer",charIndex:286},{level:3,title:"isUpdating",slug:"isupdating",normalizedTitle:"isupdating",charIndex:302},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:134}],headersStr:"Table of contents Constructors Properties Methods Constructors constructor Properties entities systems Methods getContainer isUpdating update",content:"# Class: Engine\n\nThe heart of the Entity framework. It is responsible for keeping track of entities and systems. The engine should be updated every tick via the update method.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * entities\n * systems\n\n\n# Methods\n\n * getContainer\n * isUpdating\n * update\n\n\n# Constructors\n\n\n# constructor\n\n• new Engine(allocator?)\n\nCreates a new Engine.\n\n# Parameters\n\nNAME        TYPE        DESCRIPTION\nallocator   Allocator   The optional allocator to use for creating entities &\n                        components.\n\n# Defined in\n\nsrc/core/Engine.ts:28\n\n\n# Properties\n\n\n# entities\n\n• Readonly entities: EntityManager\n\n# Defined in\n\nsrc/core/Engine.ts:19\n\n----------------------------------------\n\n\n# systems\n\n• Readonly systems: EntitySystemManager\n\n# Defined in\n\nsrc/core/Engine.ts:17\n\n\n# Methods\n\n\n# getContainer\n\n▸ getContainer(): ContainerInstance\n\n# Returns\n\nContainerInstance\n\nThe IOC Container (currently using typedi).\n\n# Defined in\n\nsrc/core/Engine.ts:67\n\n----------------------------------------\n\n\n# isUpdating\n\n▸ isUpdating(): boolean\n\n# Returns\n\nboolean\n\nTrue if this engine is currently updating systems.\n\n# Defined in\n\nsrc/core/Engine.ts:38\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltaTime): void\n\nUpdates all the systems in this Engine.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\ndeltaTime   number   The time passed since the last frame.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/Engine.ts:47",normalizedContent:"# class: engine\n\nthe heart of the entity framework. it is responsible for keeping track of entities and systems. the engine should be updated every tick via the update method.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * entities\n * systems\n\n\n# methods\n\n * getcontainer\n * isupdating\n * update\n\n\n# constructors\n\n\n# constructor\n\n• new engine(allocator?)\n\ncreates a new engine.\n\n# parameters\n\nname        type        description\nallocator   allocator   the optional allocator to use for creating entities &\n                        components.\n\n# defined in\n\nsrc/core/engine.ts:28\n\n\n# properties\n\n\n# entities\n\n• readonly entities: entitymanager\n\n# defined in\n\nsrc/core/engine.ts:19\n\n----------------------------------------\n\n\n# systems\n\n• readonly systems: entitysystemmanager\n\n# defined in\n\nsrc/core/engine.ts:17\n\n\n# methods\n\n\n# getcontainer\n\n▸ getcontainer(): containerinstance\n\n# returns\n\ncontainerinstance\n\nthe ioc container (currently using typedi).\n\n# defined in\n\nsrc/core/engine.ts:67\n\n----------------------------------------\n\n\n# isupdating\n\n▸ isupdating(): boolean\n\n# returns\n\nboolean\n\ntrue if this engine is currently updating systems.\n\n# defined in\n\nsrc/core/engine.ts:38\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltatime): void\n\nupdates all the systems in this engine.\n\n# parameters\n\nname        type     description\ndeltatime   number   the time passed since the last frame.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/engine.ts:47",charsets:{}},{title:"Class: Entity",frontmatter:{},regularPath:"/api/classes/Entity.html",relativePath:"api/classes/Entity.md",key:"v-396e9a03",path:"/api/classes/Entity.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:81},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:103},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:136},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:203},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:103},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:120},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:136},{level:3,title:"flags",slug:"flags",normalizedTitle:"flags",charIndex:151},{level:3,title:"manager",slug:"manager",normalizedTitle:"manager",charIndex:160},{level:3,title:"scheduledForRemoval",slug:"scheduledforremoval",normalizedTitle:"scheduledforremoval",charIndex:171},{level:3,title:"uuid",slug:"uuid",normalizedTitle:"uuid",charIndex:194},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:203},{level:3,title:"add",slug:"add",normalizedTitle:"add",charIndex:215},{level:3,title:"addInternal",slug:"addinternal",normalizedTitle:"addinternal",charIndex:222},{level:3,title:"destroy",slug:"destroy",normalizedTitle:"destroy",charIndex:237},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:248},{level:3,title:"getAll",slug:"getall",normalizedTitle:"getall",charIndex:255},{level:3,title:"getComponentBits",slug:"getcomponentbits",normalizedTitle:"getcomponentbits",charIndex:265},{level:3,title:"getFamilyBits",slug:"getfamilybits",normalizedTitle:"getfamilybits",charIndex:285},{level:3,title:"getId",slug:"getid",normalizedTitle:"getid",charIndex:302},{level:3,title:"has",slug:"has",normalizedTitle:"has",charIndex:311},{level:3,title:"isScheduledForRemoval",slug:"isscheduledforremoval",normalizedTitle:"isscheduledforremoval",charIndex:318},{level:3,title:"remove",slug:"remove",normalizedTitle:"remove",charIndex:343},{level:3,title:"removeAll",slug:"removeall",normalizedTitle:"removeall",charIndex:353},{level:3,title:"removeAllInternal",slug:"removeallinternal",normalizedTitle:"removeallinternal",charIndex:366},{level:3,title:"removeInternal",slug:"removeinternal",normalizedTitle:"removeinternal",charIndex:387},{level:3,title:"require",slug:"require",normalizedTitle:"require",charIndex:405}],headersStr:"Table of contents Constructors Properties Methods Constructors constructor Properties flags manager scheduledForRemoval uuid Methods add addInternal destroy get getAll getComponentBits getFamilyBits getId has isScheduledForRemoval remove removeAll removeAllInternal removeInternal require",content:"# Class: Entity\n\nSimple containers of Components, which give an entity data.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * flags\n * manager\n * scheduledForRemoval\n * uuid\n\n\n# Methods\n\n * add\n * addInternal\n * destroy\n * get\n * getAll\n * getComponentBits\n * getFamilyBits\n * getId\n * has\n * isScheduledForRemoval\n * remove\n * removeAll\n * removeAllInternal\n * removeInternal\n * require\n\n\n# Constructors\n\n\n# constructor\n\n• new Entity()\n\n\n# Properties\n\n\n# flags\n\n• flags: number = 0\n\nA flag that can be used to bit mask this entity. Up to the user to manage.\n\n# Defined in\n\nsrc/core/Entity.ts:11\n\n----------------------------------------\n\n\n# manager\n\n• Protected manager: null | EntityManager = null\n\n# Defined in\n\nsrc/core/Entity.ts:25\n\n----------------------------------------\n\n\n# scheduledForRemoval\n\n• Protected scheduledForRemoval: boolean = false\n\n# Defined in\n\nsrc/core/Entity.ts:15\n\n----------------------------------------\n\n\n# uuid\n\n• Protected uuid: number = 0\n\n# Defined in\n\nsrc/core/Entity.ts:13\n\n\n# Methods\n\n\n# add\n\n▸ add<T>(component): T\n\nAdd a component.\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends Component<T>   The component class.\n\n# Parameters\n\nNAME        TYPE   DESCRIPTION\ncomponent   T      The component to add.\n\n# Returns\n\nT\n\nThe added component.\n\n# Defined in\n\nsrc/core/Entity.ts:49\n\n----------------------------------------\n\n\n# addInternal\n\n▸ Protected addInternal(component): boolean\n\n# Parameters\n\nNAME        TYPE\ncomponent   Component\n\n# Returns\n\nboolean\n\n# Defined in\n\nsrc/core/Entity.ts:111\n\n----------------------------------------\n\n\n# destroy\n\n▸ destroy(): void\n\nRemove this entity from its engine.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/Entity.ts:38\n\n----------------------------------------\n\n\n# get\n\n▸ get<T>(clazz): undefined | T\n\nRetrieve a Component from this Entity by class.\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends Component<T>   The component class.\n\n# Parameters\n\nNAME    TYPE                      DESCRIPTION\nclazz   ComponentConstructor<T>   The Component class.\n\n# Returns\n\nundefined | T\n\nThe instance of the specified Component attached to this Entity, or undefined if no such Component exists.\n\n# Defined in\n\nsrc/core/Entity.ts:84\n\n----------------------------------------\n\n\n# getAll\n\n▸ getAll(): Component[]\n\n# Returns\n\nComponent[]\n\nA list with all the Components of this Entity.\n\n# Defined in\n\nsrc/core/Entity.ts:73\n\n----------------------------------------\n\n\n# getComponentBits\n\n▸ getComponentBits(): ReadonlyBits\n\n# Returns\n\nReadonlyBits\n\nThis Entity's Component bits, describing all the Components it contains.\n\n# Defined in\n\nsrc/core/Entity.ts:150\n\n----------------------------------------\n\n\n# getFamilyBits\n\n▸ getFamilyBits(): ReadonlyBits\n\n# Returns\n\nReadonlyBits\n\nThis Entity's Family bits, describing all the Families it belongs to.\n\n# Defined in\n\nsrc/core/Entity.ts:155\n\n----------------------------------------\n\n\n# getId\n\n▸ getId(): number\n\n# Returns\n\nnumber\n\nThe Entity's unique id.\n\n# Defined in\n\nsrc/core/Entity.ts:28\n\n----------------------------------------\n\n\n# has\n\n▸ has(clazz): boolean\n\n# Parameters\n\nNAME    TYPE                              DESCRIPTION\nclazz   ComponentConstructor<Component>   The Component class.\n\n# Returns\n\nboolean\n\nWhether or not the Entity has a Component for the specified class.\n\n# Defined in\n\nsrc/core/Entity.ts:106\n\n----------------------------------------\n\n\n# isScheduledForRemoval\n\n▸ isScheduledForRemoval(): boolean\n\n# Returns\n\nboolean\n\nTrue if the entity is scheduled to be removed.\n\n# Defined in\n\nsrc/core/Entity.ts:33\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nRemoves the Component of the specified type. Since there is only ever one Component of one type, we don't need an instance reference.\n\n# Parameters\n\nNAME    TYPE                              DESCRIPTION\nclazz   ComponentConstructor<Component>   The Component class.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/Entity.ts:61\n\n----------------------------------------\n\n\n# removeAll\n\n▸ removeAll(): void\n\nRemoves all the Components from the Entity.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/Entity.ts:67\n\n----------------------------------------\n\n\n# removeAllInternal\n\n▸ Protected removeAllInternal(): boolean\n\n# Returns\n\nboolean\n\n# Defined in\n\nsrc/core/Entity.ts:139\n\n----------------------------------------\n\n\n# removeInternal\n\n▸ Protected removeInternal(clazz): undefined | Component\n\n# Parameters\n\nNAME    TYPE\nclazz   ComponentConstructor<Component>\n\n# Returns\n\nundefined | Component\n\n# Defined in\n\nsrc/core/Entity.ts:126\n\n----------------------------------------\n\n\n# require\n\n▸ require<T>(clazz): T\n\nRequire a Component from this Entity by class.\n\nthrows If the component doesn't exist on this entity.\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends Component<T>   The component class.\n\n# Parameters\n\nNAME    TYPE                      DESCRIPTION\nclazz   ComponentConstructor<T>   The Component class.\n\n# Returns\n\nT\n\nThe instance of the specified Component attached to this Entity.\n\n# Defined in\n\nsrc/core/Entity.ts:96",normalizedContent:"# class: entity\n\nsimple containers of components, which give an entity data.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * flags\n * manager\n * scheduledforremoval\n * uuid\n\n\n# methods\n\n * add\n * addinternal\n * destroy\n * get\n * getall\n * getcomponentbits\n * getfamilybits\n * getid\n * has\n * isscheduledforremoval\n * remove\n * removeall\n * removeallinternal\n * removeinternal\n * require\n\n\n# constructors\n\n\n# constructor\n\n• new entity()\n\n\n# properties\n\n\n# flags\n\n• flags: number = 0\n\na flag that can be used to bit mask this entity. up to the user to manage.\n\n# defined in\n\nsrc/core/entity.ts:11\n\n----------------------------------------\n\n\n# manager\n\n• protected manager: null | entitymanager = null\n\n# defined in\n\nsrc/core/entity.ts:25\n\n----------------------------------------\n\n\n# scheduledforremoval\n\n• protected scheduledforremoval: boolean = false\n\n# defined in\n\nsrc/core/entity.ts:15\n\n----------------------------------------\n\n\n# uuid\n\n• protected uuid: number = 0\n\n# defined in\n\nsrc/core/entity.ts:13\n\n\n# methods\n\n\n# add\n\n▸ add<t>(component): t\n\nadd a component.\n\n# type parameters\n\nname   type                   description\nt      extends component<t>   the component class.\n\n# parameters\n\nname        type   description\ncomponent   t      the component to add.\n\n# returns\n\nt\n\nthe added component.\n\n# defined in\n\nsrc/core/entity.ts:49\n\n----------------------------------------\n\n\n# addinternal\n\n▸ protected addinternal(component): boolean\n\n# parameters\n\nname        type\ncomponent   component\n\n# returns\n\nboolean\n\n# defined in\n\nsrc/core/entity.ts:111\n\n----------------------------------------\n\n\n# destroy\n\n▸ destroy(): void\n\nremove this entity from its engine.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entity.ts:38\n\n----------------------------------------\n\n\n# get\n\n▸ get<t>(clazz): undefined | t\n\nretrieve a component from this entity by class.\n\n# type parameters\n\nname   type                   description\nt      extends component<t>   the component class.\n\n# parameters\n\nname    type                      description\nclazz   componentconstructor<t>   the component class.\n\n# returns\n\nundefined | t\n\nthe instance of the specified component attached to this entity, or undefined if no such component exists.\n\n# defined in\n\nsrc/core/entity.ts:84\n\n----------------------------------------\n\n\n# getall\n\n▸ getall(): component[]\n\n# returns\n\ncomponent[]\n\na list with all the components of this entity.\n\n# defined in\n\nsrc/core/entity.ts:73\n\n----------------------------------------\n\n\n# getcomponentbits\n\n▸ getcomponentbits(): readonlybits\n\n# returns\n\nreadonlybits\n\nthis entity's component bits, describing all the components it contains.\n\n# defined in\n\nsrc/core/entity.ts:150\n\n----------------------------------------\n\n\n# getfamilybits\n\n▸ getfamilybits(): readonlybits\n\n# returns\n\nreadonlybits\n\nthis entity's family bits, describing all the families it belongs to.\n\n# defined in\n\nsrc/core/entity.ts:155\n\n----------------------------------------\n\n\n# getid\n\n▸ getid(): number\n\n# returns\n\nnumber\n\nthe entity's unique id.\n\n# defined in\n\nsrc/core/entity.ts:28\n\n----------------------------------------\n\n\n# has\n\n▸ has(clazz): boolean\n\n# parameters\n\nname    type                              description\nclazz   componentconstructor<component>   the component class.\n\n# returns\n\nboolean\n\nwhether or not the entity has a component for the specified class.\n\n# defined in\n\nsrc/core/entity.ts:106\n\n----------------------------------------\n\n\n# isscheduledforremoval\n\n▸ isscheduledforremoval(): boolean\n\n# returns\n\nboolean\n\ntrue if the entity is scheduled to be removed.\n\n# defined in\n\nsrc/core/entity.ts:33\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nremoves the component of the specified type. since there is only ever one component of one type, we don't need an instance reference.\n\n# parameters\n\nname    type                              description\nclazz   componentconstructor<component>   the component class.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entity.ts:61\n\n----------------------------------------\n\n\n# removeall\n\n▸ removeall(): void\n\nremoves all the components from the entity.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entity.ts:67\n\n----------------------------------------\n\n\n# removeallinternal\n\n▸ protected removeallinternal(): boolean\n\n# returns\n\nboolean\n\n# defined in\n\nsrc/core/entity.ts:139\n\n----------------------------------------\n\n\n# removeinternal\n\n▸ protected removeinternal(clazz): undefined | component\n\n# parameters\n\nname    type\nclazz   componentconstructor<component>\n\n# returns\n\nundefined | component\n\n# defined in\n\nsrc/core/entity.ts:126\n\n----------------------------------------\n\n\n# require\n\n▸ require<t>(clazz): t\n\nrequire a component from this entity by class.\n\nthrows if the component doesn't exist on this entity.\n\n# type parameters\n\nname   type                   description\nt      extends component<t>   the component class.\n\n# parameters\n\nname    type                      description\nclazz   componentconstructor<t>   the component class.\n\n# returns\n\nt\n\nthe instance of the specified component attached to this entity.\n\n# defined in\n\nsrc/core/entity.ts:96",charsets:{cjk:!0}},{title:"Class: EntityFactory",frontmatter:{},regularPath:"/api/classes/EntityFactory.html",relativePath:"api/classes/EntityFactory.md",key:"v-606f4a0e",path:"/api/classes/EntityFactory.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:101},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:231},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:253},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:286},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:253},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:270},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:286},{level:3,title:"addEntityBlueprint",slug:"addentityblueprint",normalizedTitle:"addentityblueprint",charIndex:298},{level:3,title:"assemble",slug:"assemble",normalizedTitle:"assemble",charIndex:62}],headersStr:"Type parameters Table of contents Constructors Methods Constructors constructor Methods addEntityBlueprint assemble",content:"# Class: EntityFactory<TEntityConfig, TContext>\n\nA factory to assemble entities from blueprints.\n\n\n# Type parameters\n\nNAME            DESCRIPTION\nTEntityConfig   The entity configuration type.\nTContext        The context type.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * addEntityBlueprint\n * assemble\n\n\n# Constructors\n\n\n# constructor\n\n• new EntityFactory<TEntityConfig, TContext>(componentFactories, context, allocator)\n\nCreates a new EntityFactory.\n\n# Type parameters\n\nNAME\nTEntityConfig\nTContext\n\n# Parameters\n\nNAME                 TYPE                                 DESCRIPTION\ncomponentFactories   ComponentFactoryRegistry<any, any>   The component factory registry to use.\ncontext              TContext                             The context to pass to component factories.\nallocator            Allocator                            The entity/component allocator to use.\n\n# Defined in\n\nsrc/factory/EntityFactory.ts:39\n\n\n# Methods\n\n\n# addEntityBlueprint\n\n▸ addEntityBlueprint(name, blueprint): void\n\n# Parameters\n\nNAME        TYPE                        DESCRIPTION\nname        string                      The name used to identify the entity blueprint.\nblueprint   ComponentBlueprint<any>[]   The list of component blueprints for this entity.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/factory/EntityFactory.ts:54\n\n----------------------------------------\n\n\n# assemble\n\n▸ assemble(blueprintName, overrides?): Entity\n\nCreates and assembles an Entity.\n\nthrows An exception if the entity could not be assembled.\n\n# Parameters\n\nNAME            TYPE                                   DESCRIPTION\nblueprintName   string                                 The name of the entity blueprint.\noverrides?      EntityConfigOverrides<TEntityConfig>   A map of overrides.\n\n# Returns\n\nEntity\n\nA fully assembled Entity or null if the assembly failed.\n\n# Defined in\n\nsrc/factory/EntityFactory.ts:66",normalizedContent:"# class: entityfactory<tentityconfig, tcontext>\n\na factory to assemble entities from blueprints.\n\n\n# type parameters\n\nname            description\ntentityconfig   the entity configuration type.\ntcontext        the context type.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * addentityblueprint\n * assemble\n\n\n# constructors\n\n\n# constructor\n\n• new entityfactory<tentityconfig, tcontext>(componentfactories, context, allocator)\n\ncreates a new entityfactory.\n\n# type parameters\n\nname\ntentityconfig\ntcontext\n\n# parameters\n\nname                 type                                 description\ncomponentfactories   componentfactoryregistry<any, any>   the component factory registry to use.\ncontext              tcontext                             the context to pass to component factories.\nallocator            allocator                            the entity/component allocator to use.\n\n# defined in\n\nsrc/factory/entityfactory.ts:39\n\n\n# methods\n\n\n# addentityblueprint\n\n▸ addentityblueprint(name, blueprint): void\n\n# parameters\n\nname        type                        description\nname        string                      the name used to identify the entity blueprint.\nblueprint   componentblueprint<any>[]   the list of component blueprints for this entity.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/factory/entityfactory.ts:54\n\n----------------------------------------\n\n\n# assemble\n\n▸ assemble(blueprintname, overrides?): entity\n\ncreates and assembles an entity.\n\nthrows an exception if the entity could not be assembled.\n\n# parameters\n\nname            type                                   description\nblueprintname   string                                 the name of the entity blueprint.\noverrides?      entityconfigoverrides<tentityconfig>   a map of overrides.\n\n# returns\n\nentity\n\na fully assembled entity or null if the assembly failed.\n\n# defined in\n\nsrc/factory/entityfactory.ts:66",charsets:{}},{title:"Class: EntityManager",frontmatter:{},regularPath:"/api/classes/EntityManager.html",relativePath:"api/classes/EntityManager.md",key:"v-76f3a019",path:"/api/classes/EntityManager.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:118},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:140},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:173},{level:3,title:"Accessors",slug:"accessors",normalizedTitle:"accessors",charIndex:210},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:257},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:140},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:157},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:173},{level:3,title:"onAdd",slug:"onadd",normalizedTitle:"onadd",charIndex:188},{level:3,title:"onRemove",slug:"onremove",normalizedTitle:"onremove",charIndex:197},{level:2,title:"Accessors",slug:"accessors-2",normalizedTitle:"accessors",charIndex:210},{level:3,title:"delayOperations",slug:"delayoperations",normalizedTitle:"delayoperations",charIndex:224},{level:3,title:"notifying",slug:"notifying",normalizedTitle:"notifying",charIndex:243},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:257},{level:3,title:"add",slug:"add",normalizedTitle:"add",charIndex:269},{level:3,title:"forFamily",slug:"forfamily",normalizedTitle:"forfamily",charIndex:276},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:289},{level:3,title:"getAll",slug:"getall",normalizedTitle:"getall",charIndex:296},{level:3,title:"onAddForFamily",slug:"onaddforfamily",normalizedTitle:"onaddforfamily",charIndex:306},{level:3,title:"onRemoveForFamily",slug:"onremoveforfamily",normalizedTitle:"onremoveforfamily",charIndex:324},{level:3,title:"remove",slug:"remove",normalizedTitle:"remove",charIndex:345},{level:3,title:"removeAll",slug:"removeall",normalizedTitle:"removeall",charIndex:355},{level:3,title:"removeInternal",slug:"removeinternal",normalizedTitle:"removeinternal",charIndex:368}],headersStr:"Table of contents Constructors Properties Accessors Methods Constructors constructor Properties onAdd onRemove Accessors delayOperations notifying Methods add forFamily get getAll onAddForFamily onRemoveForFamily remove removeAll removeInternal",content:"# Class: EntityManager\n\nA manager for all entities in an engine. It is responsible for keeping track of Entities.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * onAdd\n * onRemove\n\n\n# Accessors\n\n * delayOperations\n * notifying\n\n\n# Methods\n\n * add\n * forFamily\n * get\n * getAll\n * onAddForFamily\n * onRemoveForFamily\n * remove\n * removeAll\n * removeInternal\n\n\n# Constructors\n\n\n# constructor\n\n• new EntityManager(engine, allocator)\n\nCreates a new EntityManager.\n\n# Parameters\n\nNAME        TYPE        DESCRIPTION\nengine      Engine      The engine of this manager.\nallocator   Allocator   The allocator to use for freeing entities.\n\n# Defined in\n\nsrc/core/EntityManager.ts:71\n\n\n# Properties\n\n\n# onAdd\n\n• Readonly onAdd: EntitySignal\n\nWill dispatch an event after an entity has been added.\n\n# Defined in\n\nsrc/core/EntityManager.ts:60\n\n----------------------------------------\n\n\n# onRemove\n\n• Readonly onRemove: EntitySignal\n\nWill dispatch an event after an entity has been removed.\n\n# Defined in\n\nsrc/core/EntityManager.ts:63\n\n\n# Accessors\n\n\n# delayOperations\n\n• Protected set delayOperations(shouldDelay): void\n\n# Parameters\n\nNAME          TYPE\nshouldDelay   boolean\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntityManager.ts:77\n\n----------------------------------------\n\n\n# notifying\n\n• Protected set notifying(notifying): void\n\n# Parameters\n\nNAME        TYPE\nnotifying   boolean\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntityManager.ts:83\n\n\n# Methods\n\n\n# add\n\n▸ add(entity): void\n\nAdds an entity to this manager.\n\nthrows If the entity has already been added to an entity manager.\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nentity   Entity   The entity to add.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntityManager.ts:94\n\n----------------------------------------\n\n\n# forFamily\n\n▸ forFamily(family): Entity[]\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nfamily   Family   A Family instance.\n\n# Returns\n\nEntity[]\n\nA list of entities for the specified Family. Will return the same instance every time.\n\n# Defined in\n\nsrc/core/EntityManager.ts:138\n\n----------------------------------------\n\n\n# get\n\n▸ get(id): undefined | Entity\n\n# Parameters\n\nNAME   TYPE     DESCRIPTION\nid     number   The id of an Entity.\n\n# Returns\n\nundefined | Entity\n\nThe entity associated with the specified id or undefined if no such entity exists.\n\n# Defined in\n\nsrc/core/EntityManager.ts:125\n\n----------------------------------------\n\n\n# getAll\n\n▸ getAll(): Entity[]\n\n# Returns\n\nEntity[]\n\nA list of all entities.\n\n# Defined in\n\nsrc/core/EntityManager.ts:130\n\n----------------------------------------\n\n\n# onAddForFamily\n\n▸ onAddForFamily(family): EntitySignal\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nfamily   Family   A Family instance.\n\n# Returns\n\nEntitySignal\n\nThe EntitySignal which emits when an entity is added to the specified Family.\n\n# Defined in\n\nsrc/core/EntityManager.ts:146\n\n----------------------------------------\n\n\n# onRemoveForFamily\n\n▸ onRemoveForFamily(family): EntitySignal\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nfamily   Family   A Family instance.\n\n# Returns\n\nEntitySignal\n\nThe EntitySignal which emits when an entity is removed from the specified Family.\n\n# Defined in\n\nsrc/core/EntityManager.ts:156\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(entity): void\n\nRemoves an entity.\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nentity   Entity   The entity to remove.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntityManager.ts:106\n\n----------------------------------------\n\n\n# removeAll\n\n▸ removeAll(): void\n\nRemoves all entities.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntityManager.ts:116\n\n----------------------------------------\n\n\n# removeInternal\n\n▸ Protected removeInternal(entity): void\n\n# Parameters\n\nNAME     TYPE\nentity   Entity\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntityManager.ts:200",normalizedContent:"# class: entitymanager\n\na manager for all entities in an engine. it is responsible for keeping track of entities.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * onadd\n * onremove\n\n\n# accessors\n\n * delayoperations\n * notifying\n\n\n# methods\n\n * add\n * forfamily\n * get\n * getall\n * onaddforfamily\n * onremoveforfamily\n * remove\n * removeall\n * removeinternal\n\n\n# constructors\n\n\n# constructor\n\n• new entitymanager(engine, allocator)\n\ncreates a new entitymanager.\n\n# parameters\n\nname        type        description\nengine      engine      the engine of this manager.\nallocator   allocator   the allocator to use for freeing entities.\n\n# defined in\n\nsrc/core/entitymanager.ts:71\n\n\n# properties\n\n\n# onadd\n\n• readonly onadd: entitysignal\n\nwill dispatch an event after an entity has been added.\n\n# defined in\n\nsrc/core/entitymanager.ts:60\n\n----------------------------------------\n\n\n# onremove\n\n• readonly onremove: entitysignal\n\nwill dispatch an event after an entity has been removed.\n\n# defined in\n\nsrc/core/entitymanager.ts:63\n\n\n# accessors\n\n\n# delayoperations\n\n• protected set delayoperations(shoulddelay): void\n\n# parameters\n\nname          type\nshoulddelay   boolean\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitymanager.ts:77\n\n----------------------------------------\n\n\n# notifying\n\n• protected set notifying(notifying): void\n\n# parameters\n\nname        type\nnotifying   boolean\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitymanager.ts:83\n\n\n# methods\n\n\n# add\n\n▸ add(entity): void\n\nadds an entity to this manager.\n\nthrows if the entity has already been added to an entity manager.\n\n# parameters\n\nname     type     description\nentity   entity   the entity to add.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitymanager.ts:94\n\n----------------------------------------\n\n\n# forfamily\n\n▸ forfamily(family): entity[]\n\n# parameters\n\nname     type     description\nfamily   family   a family instance.\n\n# returns\n\nentity[]\n\na list of entities for the specified family. will return the same instance every time.\n\n# defined in\n\nsrc/core/entitymanager.ts:138\n\n----------------------------------------\n\n\n# get\n\n▸ get(id): undefined | entity\n\n# parameters\n\nname   type     description\nid     number   the id of an entity.\n\n# returns\n\nundefined | entity\n\nthe entity associated with the specified id or undefined if no such entity exists.\n\n# defined in\n\nsrc/core/entitymanager.ts:125\n\n----------------------------------------\n\n\n# getall\n\n▸ getall(): entity[]\n\n# returns\n\nentity[]\n\na list of all entities.\n\n# defined in\n\nsrc/core/entitymanager.ts:130\n\n----------------------------------------\n\n\n# onaddforfamily\n\n▸ onaddforfamily(family): entitysignal\n\n# parameters\n\nname     type     description\nfamily   family   a family instance.\n\n# returns\n\nentitysignal\n\nthe entitysignal which emits when an entity is added to the specified family.\n\n# defined in\n\nsrc/core/entitymanager.ts:146\n\n----------------------------------------\n\n\n# onremoveforfamily\n\n▸ onremoveforfamily(family): entitysignal\n\n# parameters\n\nname     type     description\nfamily   family   a family instance.\n\n# returns\n\nentitysignal\n\nthe entitysignal which emits when an entity is removed from the specified family.\n\n# defined in\n\nsrc/core/entitymanager.ts:156\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(entity): void\n\nremoves an entity.\n\n# parameters\n\nname     type     description\nentity   entity   the entity to remove.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitymanager.ts:106\n\n----------------------------------------\n\n\n# removeall\n\n▸ removeall(): void\n\nremoves all entities.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitymanager.ts:116\n\n----------------------------------------\n\n\n# removeinternal\n\n▸ protected removeinternal(entity): void\n\n# parameters\n\nname     type\nentity   entity\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitymanager.ts:200",charsets:{cjk:!0}},{title:"Class: EntitySignal",frontmatter:{},regularPath:"/api/classes/EntitySignal.html",relativePath:"api/classes/EntitySignal.md",key:"v-46e9519a",path:"/api/classes/EntitySignal.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:51},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:124},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:146},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:179},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:146},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:163},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:179},{level:3,title:"connect",slug:"connect",normalizedTitle:"connect",charIndex:191},{level:3,title:"disconnect",slug:"disconnect",normalizedTitle:"disconnect",charIndex:202},{level:3,title:"disconnectAll",slug:"disconnectall",normalizedTitle:"disconnectall",charIndex:216},{level:3,title:"emit",slug:"emit",normalizedTitle:"emit",charIndex:233},{level:3,title:"emitCollecting",slug:"emitcollecting",normalizedTitle:"emitcollecting",charIndex:241}],headersStr:"Hierarchy Table of contents Constructors Methods Constructors constructor Methods connect disconnect disconnectAll emit emitCollecting",content:"# Class: EntitySignal\n\nA simple entity signal.\n\n\n# Hierarchy\n\n * Signal<(entity: Entity) => void>\n   \n   ↳ EntitySignal\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * connect\n * disconnect\n * disconnectAll\n * emit\n * emitCollecting\n\n\n# Constructors\n\n\n# constructor\n\n• new EntitySignal()\n\n# Inherited from\n\nSignal<(entity: Entity) => void>.constructor\n\n\n# Methods\n\n\n# connect\n\n▸ connect(callback, order?): SignalConnection\n\nSubscribe to this signal.\n\n# Parameters\n\nNAME       TYPE                       DESCRIPTION\ncallback   (entity: Entity) => void   This callback will be run when emit() is called.\norder?     number                     Handlers with a higher order value will be called later.\n\n# Returns\n\nSignalConnection\n\n# Inherited from\n\nSignal.connect\n\n# Defined in\n\nnode_modules/typed-signals/dist/Signal.d.ts:18\n\n----------------------------------------\n\n\n# disconnect\n\n▸ disconnect(callback): boolean\n\nUnsubscribe from this signal with the original callback instance. While you can use this method, the SignalConnection returned by connect() will not be updated!\n\n# Parameters\n\nNAME       TYPE                       DESCRIPTION\ncallback   (entity: Entity) => void   The callback you passed to connect().\n\n# Returns\n\nboolean\n\n# Inherited from\n\nSignal.disconnect\n\n# Defined in\n\nnode_modules/typed-signals/dist/Signal.d.ts:25\n\n----------------------------------------\n\n\n# disconnectAll\n\n▸ disconnectAll(): void\n\nDisconnect all handlers from this signal event.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSignal.disconnectAll\n\n# Defined in\n\nnode_modules/typed-signals/dist/Signal.d.ts:29\n\n----------------------------------------\n\n\n# emit\n\n▸ emit(...args): void\n\nPublish this signal event (call all handlers).\n\n# Parameters\n\nNAME      TYPE\n...args   [entity: Entity]\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSignal.emit\n\n# Defined in\n\nnode_modules/typed-signals/dist/Signal.d.ts:33\n\n----------------------------------------\n\n\n# emitCollecting\n\n▸ Protected emitCollecting(collector, args): void\n\n# Parameters\n\nNAME        TYPE\ncollector   Collector<(entity: Entity) => void>\nargs        [entity: Entity]\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSignal.emitCollecting\n\n# Defined in\n\nnode_modules/typed-signals/dist/Signal.d.ts:34",normalizedContent:"# class: entitysignal\n\na simple entity signal.\n\n\n# hierarchy\n\n * signal<(entity: entity) => void>\n   \n   ↳ entitysignal\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * connect\n * disconnect\n * disconnectall\n * emit\n * emitcollecting\n\n\n# constructors\n\n\n# constructor\n\n• new entitysignal()\n\n# inherited from\n\nsignal<(entity: entity) => void>.constructor\n\n\n# methods\n\n\n# connect\n\n▸ connect(callback, order?): signalconnection\n\nsubscribe to this signal.\n\n# parameters\n\nname       type                       description\ncallback   (entity: entity) => void   this callback will be run when emit() is called.\norder?     number                     handlers with a higher order value will be called later.\n\n# returns\n\nsignalconnection\n\n# inherited from\n\nsignal.connect\n\n# defined in\n\nnode_modules/typed-signals/dist/signal.d.ts:18\n\n----------------------------------------\n\n\n# disconnect\n\n▸ disconnect(callback): boolean\n\nunsubscribe from this signal with the original callback instance. while you can use this method, the signalconnection returned by connect() will not be updated!\n\n# parameters\n\nname       type                       description\ncallback   (entity: entity) => void   the callback you passed to connect().\n\n# returns\n\nboolean\n\n# inherited from\n\nsignal.disconnect\n\n# defined in\n\nnode_modules/typed-signals/dist/signal.d.ts:25\n\n----------------------------------------\n\n\n# disconnectall\n\n▸ disconnectall(): void\n\ndisconnect all handlers from this signal event.\n\n# returns\n\nvoid\n\n# inherited from\n\nsignal.disconnectall\n\n# defined in\n\nnode_modules/typed-signals/dist/signal.d.ts:29\n\n----------------------------------------\n\n\n# emit\n\n▸ emit(...args): void\n\npublish this signal event (call all handlers).\n\n# parameters\n\nname      type\n...args   [entity: entity]\n\n# returns\n\nvoid\n\n# inherited from\n\nsignal.emit\n\n# defined in\n\nnode_modules/typed-signals/dist/signal.d.ts:33\n\n----------------------------------------\n\n\n# emitcollecting\n\n▸ protected emitcollecting(collector, args): void\n\n# parameters\n\nname        type\ncollector   collector<(entity: entity) => void>\nargs        [entity: entity]\n\n# returns\n\nvoid\n\n# inherited from\n\nsignal.emitcollecting\n\n# defined in\n\nnode_modules/typed-signals/dist/signal.d.ts:34",charsets:{}},{title:"Class: EntitySystem",frontmatter:{},regularPath:"/api/classes/EntitySystem.html",relativePath:"api/classes/EntitySystem.md",key:"v-281b8d36",path:"/api/classes/EntitySystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:180},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:332},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:354},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:387},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:413},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:354},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:371},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:387},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:402},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:413},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:425},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:440},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:453},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:466},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:478},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:492},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:507}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine Methods getPriority isEnabled onDisable onEnable setEnabled setPriority update",content:"# Class: EntitySystem\n\nBase class for all normal systems. An EntitySystem is intended to process entities.\n\nsee SubSystem for systems to be used on a SortedSubIteratingSystem.\n\n\n# Hierarchy\n\n * AbstractSystem<EntitySystem>\n   \n   ↳ EntitySystem\n   \n   ↳↳ IntervalSystem\n   \n   ↳↳ IteratingSystem\n   \n   ↳↳ SortedIteratingSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n\n\n# Methods\n\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * setEnabled\n * setPriority\n * update\n\n\n# Constructors\n\n\n# constructor\n\n• new EntitySystem()\n\n# Inherited from\n\nAbstractSystem.constructor\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nAbstractSystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n\n# Methods\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nAbstractSystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nAbstractSystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.onDisable\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:36\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.onEnable\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:28\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ Abstract update(deltaTime): void\n\nThe update method called every tick.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\ndeltaTime   number   The time passed since last frame in seconds.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/core/EntitySystem.ts:14",normalizedContent:"# class: entitysystem\n\nbase class for all normal systems. an entitysystem is intended to process entities.\n\nsee subsystem for systems to be used on a sortedsubiteratingsystem.\n\n\n# hierarchy\n\n * abstractsystem<entitysystem>\n   \n   ↳ entitysystem\n   \n   ↳↳ intervalsystem\n   \n   ↳↳ iteratingsystem\n   \n   ↳↳ sortediteratingsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n\n\n# methods\n\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * setenabled\n * setpriority\n * update\n\n\n# constructors\n\n\n# constructor\n\n• new entitysystem()\n\n# inherited from\n\nabstractsystem.constructor\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nabstractsystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n\n# methods\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nabstractsystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nabstractsystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.ondisable\n\n# defined in\n\nsrc/core/abstractsystem.ts:36\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.onenable\n\n# defined in\n\nsrc/core/abstractsystem.ts:28\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ abstract update(deltatime): void\n\nthe update method called every tick.\n\n# parameters\n\nname        type     description\ndeltatime   number   the time passed since last frame in seconds.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/core/entitysystem.ts:14",charsets:{}},{title:"Class: EntitySystemManager",frontmatter:{},regularPath:"/api/classes/EntitySystemManager.html",relativePath:"api/classes/EntitySystemManager.md",key:"v-d789178e",path:"/api/classes/EntitySystemManager.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:64},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:147},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:169},{level:3,title:"Accessors",slug:"accessors",normalizedTitle:"accessors",charIndex:202},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:236},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:169},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:186},{level:2,title:"Accessors",slug:"accessors-2",normalizedTitle:"accessors",charIndex:202},{level:3,title:"delayOperations",slug:"delayoperations",normalizedTitle:"delayoperations",charIndex:216},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:236},{level:3,title:"add",slug:"add",normalizedTitle:"add",charIndex:248},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:255},{level:3,title:"getAll",slug:"getall",normalizedTitle:"getall",charIndex:262},{level:3,title:"hasEnabledSystems",slug:"hasenabledsystems",normalizedTitle:"hasenabledsystems",charIndex:272},{level:3,title:"remove",slug:"remove",normalizedTitle:"remove",charIndex:293},{level:3,title:"removeAll",slug:"removeall",normalizedTitle:"removeall",charIndex:303}],headersStr:"Hierarchy Table of contents Constructors Accessors Methods Constructors constructor Accessors delayOperations Methods add get getAll hasEnabledSystems remove removeAll",content:"# Class: EntitySystemManager\n\nA manager for entity systems.\n\n\n# Hierarchy\n\n * AbstractSystemManager<EntitySystem>\n   \n   ↳ EntitySystemManager\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Accessors\n\n * delayOperations\n\n\n# Methods\n\n * add\n * get\n * getAll\n * hasEnabledSystems\n * remove\n * removeAll\n\n\n# Constructors\n\n\n# constructor\n\n• new EntitySystemManager(container)\n\n# Parameters\n\nNAME        TYPE                DESCRIPTION\ncontainer   ContainerInstance   The container instance to use.\n\n# Inherited from\n\nAbstractSystemManager.constructor\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:32\n\n\n# Accessors\n\n\n# delayOperations\n\n• Protected set delayOperations(shouldDelay): void\n\n# Parameters\n\nNAME          TYPE\nshouldDelay   boolean\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystemManager.delayOperations\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:37\n\n\n# Methods\n\n\n# add\n\n▸ add<T>(constructor, priority?): T\n\nAdds the system to this manager.\n\n# Type parameters\n\nNAME   TYPE                      DESCRIPTION\nT      extends EntitySystem<T>   The entity system class.\n\n# Parameters\n\nNAME          TYPE                   DEFAULT VALUE   DESCRIPTION\nconstructor   SystemConstructor<T>   undefined       The system to add.\npriority      number                 0               The priority to execute this system with (lower means higher\n                                                     priority).\n\n# Returns\n\nT\n\nThe newly created system.\n\n# Inherited from\n\nAbstractSystemManager.add\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:54\n\n----------------------------------------\n\n\n# get\n\n▸ get<T>(clazz): undefined | T\n\nGet a system by its class.\n\n# Type parameters\n\nNAME   TYPE                      DESCRIPTION\nT      extends EntitySystem<T>   The entity system class.\n\n# Parameters\n\nNAME    TYPE                   DESCRIPTION\nclazz   SystemConstructor<T>   The constructor for T.\n\n# Returns\n\nundefined | T\n\nThe T of the specified class, or undefined if no such system exists.\n\n# Inherited from\n\nAbstractSystemManager.get\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:125\n\n----------------------------------------\n\n\n# getAll\n\n▸ getAll(): EntitySystem[]\n\n# Returns\n\nEntitySystem[]\n\nA list of all entity systems managed by the Engine sorted by priority.\n\n# Inherited from\n\nAbstractSystemManager.getAll\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:132\n\n----------------------------------------\n\n\n# hasEnabledSystems\n\n▸ hasEnabledSystems(): boolean\n\n# Returns\n\nboolean\n\nTrue if any added system is enabled.\n\n# Inherited from\n\nAbstractSystemManager.hasEnabledSystems\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:42\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nRemoves the system from this Engine.\n\n# Parameters\n\nNAME    TYPE                              DESCRIPTION\nclazz   SystemConstructor<EntitySystem>   The System class to remove.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystemManager.remove\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:84\n\n----------------------------------------\n\n\n# removeAll\n\n▸ removeAll(): void\n\nRemoves all systems registered with this Engine.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystemManager.removeAll\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:105",normalizedContent:"# class: entitysystemmanager\n\na manager for entity systems.\n\n\n# hierarchy\n\n * abstractsystemmanager<entitysystem>\n   \n   ↳ entitysystemmanager\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# accessors\n\n * delayoperations\n\n\n# methods\n\n * add\n * get\n * getall\n * hasenabledsystems\n * remove\n * removeall\n\n\n# constructors\n\n\n# constructor\n\n• new entitysystemmanager(container)\n\n# parameters\n\nname        type                description\ncontainer   containerinstance   the container instance to use.\n\n# inherited from\n\nabstractsystemmanager.constructor\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:32\n\n\n# accessors\n\n\n# delayoperations\n\n• protected set delayoperations(shoulddelay): void\n\n# parameters\n\nname          type\nshoulddelay   boolean\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystemmanager.delayoperations\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:37\n\n\n# methods\n\n\n# add\n\n▸ add<t>(constructor, priority?): t\n\nadds the system to this manager.\n\n# type parameters\n\nname   type                      description\nt      extends entitysystem<t>   the entity system class.\n\n# parameters\n\nname          type                   default value   description\nconstructor   systemconstructor<t>   undefined       the system to add.\npriority      number                 0               the priority to execute this system with (lower means higher\n                                                     priority).\n\n# returns\n\nt\n\nthe newly created system.\n\n# inherited from\n\nabstractsystemmanager.add\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:54\n\n----------------------------------------\n\n\n# get\n\n▸ get<t>(clazz): undefined | t\n\nget a system by its class.\n\n# type parameters\n\nname   type                      description\nt      extends entitysystem<t>   the entity system class.\n\n# parameters\n\nname    type                   description\nclazz   systemconstructor<t>   the constructor for t.\n\n# returns\n\nundefined | t\n\nthe t of the specified class, or undefined if no such system exists.\n\n# inherited from\n\nabstractsystemmanager.get\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:125\n\n----------------------------------------\n\n\n# getall\n\n▸ getall(): entitysystem[]\n\n# returns\n\nentitysystem[]\n\na list of all entity systems managed by the engine sorted by priority.\n\n# inherited from\n\nabstractsystemmanager.getall\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:132\n\n----------------------------------------\n\n\n# hasenabledsystems\n\n▸ hasenabledsystems(): boolean\n\n# returns\n\nboolean\n\ntrue if any added system is enabled.\n\n# inherited from\n\nabstractsystemmanager.hasenabledsystems\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:42\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nremoves the system from this engine.\n\n# parameters\n\nname    type                              description\nclazz   systemconstructor<entitysystem>   the system class to remove.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystemmanager.remove\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:84\n\n----------------------------------------\n\n\n# removeall\n\n▸ removeall(): void\n\nremoves all systems registered with this engine.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystemmanager.removeall\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:105",charsets:{cjk:!0}},{title:"Class: Family",frontmatter:{},regularPath:"/api/classes/Family.html",relativePath:"api/classes/Family.md",key:"v-680f8b01",path:"/api/classes/Family.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:329},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:351},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:376},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:351},{level:3,title:"index",slug:"index",normalizedTitle:"index",charIndex:366},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:376},{level:3,title:"matches",slug:"matches",normalizedTitle:"matches",charIndex:388},{level:3,title:"all",slug:"all",normalizedTitle:"all",charIndex:290},{level:3,title:"exclude",slug:"exclude",normalizedTitle:"exclude",charIndex:316},{level:3,title:"one",slug:"one",normalizedTitle:"one",charIndex:43}],headersStr:"Table of contents Properties Methods Properties index Methods matches all exclude one",content:"# Class: Family\n\nRepresents a group of Components. It is used to describe what Entity objects an EntitySystem should process. Families can't be instantiated directly but must be accessed via a builder. This is to avoid duplicate families that describe the same components Start with Family.all, Family.one or Family.exclude.\n\n\n# Table of contents\n\n\n# Properties\n\n * index\n\n\n# Methods\n\n * matches\n * all\n * exclude\n * one\n\n\n# Properties\n\n\n# index\n\n• Readonly index: number\n\nThe unique identifier of this Family.\n\n# Defined in\n\nsrc/core/Family.ts:129\n\n\n# Methods\n\n\n# matches\n\n▸ matches(entity): boolean\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nentity   Entity   The entity to check.\n\n# Returns\n\nboolean\n\nWhether the entity matches the family requirements or not.\n\n# Defined in\n\nsrc/core/Family.ts:150\n\n----------------------------------------\n\n\n# all\n\n▸ Static all(...classes): FamilyBuilder\n\nEntities of the family will have to contain all of the specified components.\n\n# Parameters\n\nNAME         TYPE                                DESCRIPTION\n...classes   ComponentConstructor<Component>[]   All of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# Returns\n\nFamilyBuilder\n\nA builder singleton instance to get a Family.\n\n# Defined in\n\nsrc/core/Family.ts:168\n\n----------------------------------------\n\n\n# exclude\n\n▸ Static exclude(...classes): FamilyBuilder\n\nEntities of the family cannot contain any of the specified components.\n\n# Parameters\n\nNAME         TYPE                                DESCRIPTION\n...classes   ComponentConstructor<Component>[]   If any one of these classes is on an entity, it will not\n                                                 belong to this family.\n\n# Returns\n\nFamilyBuilder\n\nA builder singleton instance to get a Family.\n\n# Defined in\n\nsrc/core/Family.ts:188\n\n----------------------------------------\n\n\n# one\n\n▸ Static one(...classes): FamilyBuilder\n\nEntities of the family will have to contain at least one of the specified components.\n\n# Parameters\n\nNAME         TYPE                                DESCRIPTION\n...classes   ComponentConstructor<Component>[]   One of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# Returns\n\nFamilyBuilder\n\nA builder singleton instance to get a Family.\n\n# Defined in\n\nsrc/core/Family.ts:178",normalizedContent:"# class: family\n\nrepresents a group of components. it is used to describe what entity objects an entitysystem should process. families can't be instantiated directly but must be accessed via a builder. this is to avoid duplicate families that describe the same components start with family.all, family.one or family.exclude.\n\n\n# table of contents\n\n\n# properties\n\n * index\n\n\n# methods\n\n * matches\n * all\n * exclude\n * one\n\n\n# properties\n\n\n# index\n\n• readonly index: number\n\nthe unique identifier of this family.\n\n# defined in\n\nsrc/core/family.ts:129\n\n\n# methods\n\n\n# matches\n\n▸ matches(entity): boolean\n\n# parameters\n\nname     type     description\nentity   entity   the entity to check.\n\n# returns\n\nboolean\n\nwhether the entity matches the family requirements or not.\n\n# defined in\n\nsrc/core/family.ts:150\n\n----------------------------------------\n\n\n# all\n\n▸ static all(...classes): familybuilder\n\nentities of the family will have to contain all of the specified components.\n\n# parameters\n\nname         type                                description\n...classes   componentconstructor<component>[]   all of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# returns\n\nfamilybuilder\n\na builder singleton instance to get a family.\n\n# defined in\n\nsrc/core/family.ts:168\n\n----------------------------------------\n\n\n# exclude\n\n▸ static exclude(...classes): familybuilder\n\nentities of the family cannot contain any of the specified components.\n\n# parameters\n\nname         type                                description\n...classes   componentconstructor<component>[]   if any one of these classes is on an entity, it will not\n                                                 belong to this family.\n\n# returns\n\nfamilybuilder\n\na builder singleton instance to get a family.\n\n# defined in\n\nsrc/core/family.ts:188\n\n----------------------------------------\n\n\n# one\n\n▸ static one(...classes): familybuilder\n\nentities of the family will have to contain at least one of the specified components.\n\n# parameters\n\nname         type                                description\n...classes   componentconstructor<component>[]   one of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# returns\n\nfamilybuilder\n\na builder singleton instance to get a family.\n\n# defined in\n\nsrc/core/family.ts:178",charsets:{}},{title:"Class: FamilyBuilder",frontmatter:{},regularPath:"/api/classes/FamilyBuilder.html",relativePath:"api/classes/FamilyBuilder.md",key:"v-081054f9",path:"/api/classes/FamilyBuilder.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:241},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:263},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:263},{level:3,title:"all",slug:"all",normalizedTitle:"all",charIndex:79},{level:3,title:"exclude",slug:"exclude",normalizedTitle:"exclude",charIndex:105},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:229},{level:3,title:"one",slug:"one",normalizedTitle:"one",charIndex:91}],headersStr:"Table of contents Methods Methods all exclude get one",content:"# Class: FamilyBuilder\n\nA builder pattern to create Family objects. Use Family.all, Family.one or Family.exclude to start.\n\nexample\n\nlet family = Family.all(ComponentA, ComponentB).one(ComponentC, ComponentD).exclude(ComponentE).get();\n\n\n\n# Table of contents\n\n\n# Methods\n\n * all\n * exclude\n * get\n * one\n\n\n# Methods\n\n\n# all\n\n▸ all(...classes): FamilyBuilder\n\nEntities of the family will have to contain all of the specified components.\n\n# Parameters\n\nNAME         TYPE                                DESCRIPTION\n...classes   ComponentConstructor<Component>[]   All of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# Returns\n\nFamilyBuilder\n\nThis for chaining.\n\n# Defined in\n\nsrc/core/Family.ts:72\n\n----------------------------------------\n\n\n# exclude\n\n▸ exclude(...classes): FamilyBuilder\n\nEntities of the family cannot contain any of the specified components.\n\n# Parameters\n\nNAME         TYPE                                DESCRIPTION\n...classes   ComponentConstructor<Component>[]   If any one of these classes is on an entity, it will not\n                                                 belong to this family.\n\n# Returns\n\nFamilyBuilder\n\nThis for chaining.\n\n# Defined in\n\nsrc/core/Family.ts:92\n\n----------------------------------------\n\n\n# get\n\n▸ get(): Family\n\n# Returns\n\nFamily\n\nA Family for the configured component types.\n\n# Defined in\n\nsrc/core/Family.ts:97\n\n----------------------------------------\n\n\n# one\n\n▸ one(...classes): FamilyBuilder\n\nEntities of the family will have to contain at least one of the specified components.\n\n# Parameters\n\nNAME         TYPE                                DESCRIPTION\n...classes   ComponentConstructor<Component>[]   One of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# Returns\n\nFamilyBuilder\n\nThis for chaining.\n\n# Defined in\n\nsrc/core/Family.ts:82",normalizedContent:"# class: familybuilder\n\na builder pattern to create family objects. use family.all, family.one or family.exclude to start.\n\nexample\n\nlet family = family.all(componenta, componentb).one(componentc, componentd).exclude(componente).get();\n\n\n\n# table of contents\n\n\n# methods\n\n * all\n * exclude\n * get\n * one\n\n\n# methods\n\n\n# all\n\n▸ all(...classes): familybuilder\n\nentities of the family will have to contain all of the specified components.\n\n# parameters\n\nname         type                                description\n...classes   componentconstructor<component>[]   all of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# returns\n\nfamilybuilder\n\nthis for chaining.\n\n# defined in\n\nsrc/core/family.ts:72\n\n----------------------------------------\n\n\n# exclude\n\n▸ exclude(...classes): familybuilder\n\nentities of the family cannot contain any of the specified components.\n\n# parameters\n\nname         type                                description\n...classes   componentconstructor<component>[]   if any one of these classes is on an entity, it will not\n                                                 belong to this family.\n\n# returns\n\nfamilybuilder\n\nthis for chaining.\n\n# defined in\n\nsrc/core/family.ts:92\n\n----------------------------------------\n\n\n# get\n\n▸ get(): family\n\n# returns\n\nfamily\n\na family for the configured component types.\n\n# defined in\n\nsrc/core/family.ts:97\n\n----------------------------------------\n\n\n# one\n\n▸ one(...classes): familybuilder\n\nentities of the family will have to contain at least one of the specified components.\n\n# parameters\n\nname         type                                description\n...classes   componentconstructor<component>[]   one of these classes must be on an entity for it to belong\n                                                 to this family.\n\n# returns\n\nfamilybuilder\n\nthis for chaining.\n\n# defined in\n\nsrc/core/family.ts:82",charsets:{}},{title:"Class: IntervalIteratingSystem",frontmatter:{},regularPath:"/api/classes/IntervalIteratingSystem.html",relativePath:"api/classes/IntervalIteratingSystem.md",key:"v-9bfd5d0e",path:"/api/classes/IntervalIteratingSystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:203},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:269},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:291},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:324},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:360},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:291},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:308},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:324},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:339},{level:3,title:"family",slug:"family",normalizedTitle:"family",charIndex:349},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:360},{level:3,title:"getEntities",slug:"getentities",normalizedTitle:"getentities",charIndex:372},{level:3,title:"getInterval",slug:"getinterval",normalizedTitle:"getinterval",charIndex:387},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:402},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:417},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:430},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:443},{level:3,title:"processEntity",slug:"processentity",normalizedTitle:"processentity",charIndex:184},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:472},{level:3,title:"setInterval",slug:"setinterval",normalizedTitle:"setinterval",charIndex:486},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:501},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:516},{level:3,title:"updateInterval",slug:"updateinterval",normalizedTitle:"updateinterval",charIndex:526}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine family Methods getEntities getInterval getPriority isEnabled onDisable onEnable processEntity setEnabled setInterval setPriority update updateInterval",content:"# Class: IntervalIteratingSystem\n\nA simple EntitySystem that processes a Family of entities not once per frame, but after a given interval. Entity processing logic should be placed in processEntity.\n\n\n# Hierarchy\n\n * IntervalSystem\n   \n   ↳ IntervalIteratingSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n * family\n\n\n# Methods\n\n * getEntities\n * getInterval\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * processEntity\n * setEnabled\n * setInterval\n * setPriority\n * update\n * updateInterval\n\n\n# Constructors\n\n\n# constructor\n\n• new IntervalIteratingSystem(family, interval)\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\nfamily     Family   Represents the collection of family the system should\n                    process.\ninterval   number   The time in seconds between calls to updateInterval.\n\n# Overrides\n\nIntervalSystem.constructor\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:19\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nIntervalSystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• Readonly family: Family\n\nThe Family used when the system was created.\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:11\n\n\n# Methods\n\n\n# getEntities\n\n▸ getEntities(): Entity[]\n\n# Returns\n\nEntity[]\n\nA list of entities processed by the system.\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:41\n\n----------------------------------------\n\n\n# getInterval\n\n▸ getInterval(): number\n\n# Returns\n\nnumber\n\nThe time in seconds between calls to updateInterval.\n\n# Inherited from\n\nIntervalSystem.getInterval\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:32\n\n----------------------------------------\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nIntervalSystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nIntervalSystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Overrides\n\nIntervalSystem.onDisable\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:28\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Overrides\n\nIntervalSystem.onEnable\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:24\n\n----------------------------------------\n\n\n# processEntity\n\n▸ Protected Abstract processEntity(entity): void\n\nThe user should place the entity processing logic here.\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nentity   Entity   The entity to be processed.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:50\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nIntervalSystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setInterval\n\n▸ setInterval(interval): void\n\nUpdate the interval.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\ninterval   number   The time in seconds between calls to updateInterval.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nIntervalSystem.setInterval\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:25\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nIntervalSystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltaTime): void\n\nThe update method called every tick.\n\n# Parameters\n\nNAME        TYPE\ndeltaTime   number\n\n# Returns\n\nvoid\n\n# Inherited from\n\nIntervalSystem.update\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:36\n\n----------------------------------------\n\n\n# updateInterval\n\n▸ Protected updateInterval(): void\n\nThe processing logic of the system should be placed here. Will be called once every defined interval.\n\n# Returns\n\nvoid\n\n# Overrides\n\nIntervalSystem.updateInterval\n\n# Defined in\n\nsrc/systems/IntervalIteratingSystem.ts:32",normalizedContent:"# class: intervaliteratingsystem\n\na simple entitysystem that processes a family of entities not once per frame, but after a given interval. entity processing logic should be placed in processentity.\n\n\n# hierarchy\n\n * intervalsystem\n   \n   ↳ intervaliteratingsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n * family\n\n\n# methods\n\n * getentities\n * getinterval\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * processentity\n * setenabled\n * setinterval\n * setpriority\n * update\n * updateinterval\n\n\n# constructors\n\n\n# constructor\n\n• new intervaliteratingsystem(family, interval)\n\n# parameters\n\nname       type     description\nfamily     family   represents the collection of family the system should\n                    process.\ninterval   number   the time in seconds between calls to updateinterval.\n\n# overrides\n\nintervalsystem.constructor\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:19\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nintervalsystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• readonly family: family\n\nthe family used when the system was created.\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:11\n\n\n# methods\n\n\n# getentities\n\n▸ getentities(): entity[]\n\n# returns\n\nentity[]\n\na list of entities processed by the system.\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:41\n\n----------------------------------------\n\n\n# getinterval\n\n▸ getinterval(): number\n\n# returns\n\nnumber\n\nthe time in seconds between calls to updateinterval.\n\n# inherited from\n\nintervalsystem.getinterval\n\n# defined in\n\nsrc/systems/intervalsystem.ts:32\n\n----------------------------------------\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nintervalsystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nintervalsystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# overrides\n\nintervalsystem.ondisable\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:28\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# overrides\n\nintervalsystem.onenable\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:24\n\n----------------------------------------\n\n\n# processentity\n\n▸ protected abstract processentity(entity): void\n\nthe user should place the entity processing logic here.\n\n# parameters\n\nname     type     description\nentity   entity   the entity to be processed.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:50\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nintervalsystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setinterval\n\n▸ setinterval(interval): void\n\nupdate the interval.\n\n# parameters\n\nname       type     description\ninterval   number   the time in seconds between calls to updateinterval.\n\n# returns\n\nvoid\n\n# inherited from\n\nintervalsystem.setinterval\n\n# defined in\n\nsrc/systems/intervalsystem.ts:25\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nintervalsystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltatime): void\n\nthe update method called every tick.\n\n# parameters\n\nname        type\ndeltatime   number\n\n# returns\n\nvoid\n\n# inherited from\n\nintervalsystem.update\n\n# defined in\n\nsrc/systems/intervalsystem.ts:36\n\n----------------------------------------\n\n\n# updateinterval\n\n▸ protected updateinterval(): void\n\nthe processing logic of the system should be placed here. will be called once every defined interval.\n\n# returns\n\nvoid\n\n# overrides\n\nintervalsystem.updateinterval\n\n# defined in\n\nsrc/systems/intervaliteratingsystem.ts:32",charsets:{}},{title:"Class: IntervalSystem",frontmatter:{},regularPath:"/api/classes/IntervalSystem.html",relativePath:"api/classes/IntervalSystem.md",key:"v-6da111be",path:"/api/classes/IntervalSystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:189},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:278},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:300},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:333},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:359},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:300},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:317},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:333},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:348},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:359},{level:3,title:"getInterval",slug:"getinterval",normalizedTitle:"getinterval",charIndex:371},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:386},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:401},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:414},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:427},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:439},{level:3,title:"setInterval",slug:"setinterval",normalizedTitle:"setinterval",charIndex:453},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:468},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:69},{level:3,title:"updateInterval",slug:"updateinterval",normalizedTitle:"updateinterval",charIndex:169}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine Methods getInterval getPriority isEnabled onDisable onEnable setEnabled setInterval setPriority update updateInterval",content:"# Class: IntervalSystem\n\nA simple EntitySystem that does not run its update logic every call to update, but after a given interval. The actual logic should be placed in updateInterval.\n\n\n# Hierarchy\n\n * EntitySystem\n   \n   ↳ IntervalSystem\n   \n   ↳↳ IntervalIteratingSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n\n\n# Methods\n\n * getInterval\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * setEnabled\n * setInterval\n * setPriority\n * update\n * updateInterval\n\n\n# Constructors\n\n\n# constructor\n\n• new IntervalSystem(interval)\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\ninterval   number   The time in seconds between calls to updateInterval.\n\n# Overrides\n\nEntitySystem.constructor\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:15\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nEntitySystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n\n# Methods\n\n\n# getInterval\n\n▸ getInterval(): number\n\n# Returns\n\nnumber\n\nThe time in seconds between calls to updateInterval.\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:32\n\n----------------------------------------\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nEntitySystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nEntitySystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.onDisable\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:36\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.onEnable\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:28\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setInterval\n\n▸ setInterval(interval): void\n\nUpdate the interval.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\ninterval   number   The time in seconds between calls to updateInterval.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:25\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltaTime): void\n\nThe update method called every tick.\n\n# Parameters\n\nNAME        TYPE\ndeltaTime   number\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.update\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:36\n\n----------------------------------------\n\n\n# updateInterval\n\n▸ Protected Abstract updateInterval(): void\n\nThe processing logic of the system should be placed here. Will be called once every defined interval.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/IntervalSystem.ts:49",normalizedContent:"# class: intervalsystem\n\na simple entitysystem that does not run its update logic every call to update, but after a given interval. the actual logic should be placed in updateinterval.\n\n\n# hierarchy\n\n * entitysystem\n   \n   ↳ intervalsystem\n   \n   ↳↳ intervaliteratingsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n\n\n# methods\n\n * getinterval\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * setenabled\n * setinterval\n * setpriority\n * update\n * updateinterval\n\n\n# constructors\n\n\n# constructor\n\n• new intervalsystem(interval)\n\n# parameters\n\nname       type     description\ninterval   number   the time in seconds between calls to updateinterval.\n\n# overrides\n\nentitysystem.constructor\n\n# defined in\n\nsrc/systems/intervalsystem.ts:15\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nentitysystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n\n# methods\n\n\n# getinterval\n\n▸ getinterval(): number\n\n# returns\n\nnumber\n\nthe time in seconds between calls to updateinterval.\n\n# defined in\n\nsrc/systems/intervalsystem.ts:32\n\n----------------------------------------\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nentitysystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nentitysystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.ondisable\n\n# defined in\n\nsrc/core/abstractsystem.ts:36\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.onenable\n\n# defined in\n\nsrc/core/abstractsystem.ts:28\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setinterval\n\n▸ setinterval(interval): void\n\nupdate the interval.\n\n# parameters\n\nname       type     description\ninterval   number   the time in seconds between calls to updateinterval.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/intervalsystem.ts:25\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltatime): void\n\nthe update method called every tick.\n\n# parameters\n\nname        type\ndeltatime   number\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.update\n\n# defined in\n\nsrc/systems/intervalsystem.ts:36\n\n----------------------------------------\n\n\n# updateinterval\n\n▸ protected abstract updateinterval(): void\n\nthe processing logic of the system should be placed here. will be called once every defined interval.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/intervalsystem.ts:49",charsets:{}},{title:"Class: IteratingSystem",frontmatter:{},regularPath:"/api/classes/IteratingSystem.html",relativePath:"api/classes/IteratingSystem.md",key:"v-2334b1ce",path:"/api/classes/IteratingSystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:252},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:308},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:330},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:363},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:399},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:330},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:347},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:363},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:378},{level:3,title:"family",slug:"family",normalizedTitle:"family",charIndex:388},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:399},{level:3,title:"getEntities",slug:"getentities",normalizedTitle:"getentities",charIndex:411},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:426},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:441},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:454},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:467},{level:3,title:"processEntity",slug:"processentity",normalizedTitle:"processentity",charIndex:89},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:496},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:510},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:150}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine family Methods getEntities getPriority isEnabled onDisable onEnable processEntity setEnabled setPriority update",content:"# Class: IteratingSystem\n\nA simple EntitySystem that iterates over each entity and calls processEntity for each entity every time the EntitySystem is updated. This is really just a convenience class as most systems iterate over a list of entities.\n\n\n# Hierarchy\n\n * EntitySystem\n   \n   ↳ IteratingSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n * family\n\n\n# Methods\n\n * getEntities\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * processEntity\n * setEnabled\n * setPriority\n * update\n\n\n# Constructors\n\n\n# constructor\n\n• new IteratingSystem(family)\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nfamily   Family   The family of entities iterated over in this System.\n\n# Overrides\n\nEntitySystem.constructor\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:18\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nEntitySystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• Readonly family: Family\n\nThe Family used when the system was created.\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:11\n\n\n# Methods\n\n\n# getEntities\n\n▸ getEntities(): Entity[]\n\n# Returns\n\nEntity[]\n\nA list of entities processed by the system.\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:36\n\n----------------------------------------\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nEntitySystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nEntitySystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.onDisable\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:27\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.onEnable\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:23\n\n----------------------------------------\n\n\n# processEntity\n\n▸ Protected Abstract processEntity(entity, deltaTime): void\n\nThis method is called on every entity on every update call of the EntitySystem. Override this to implement your system's specific processing.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nentity      Entity   The current Entity being processed.\ndeltaTime   number   The delta time between the last and current frame.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:47\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltaTime): void\n\nThe update method called every tick.\n\n# Parameters\n\nNAME        TYPE\ndeltaTime   number\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.update\n\n# Defined in\n\nsrc/systems/IteratingSystem.ts:31",normalizedContent:"# class: iteratingsystem\n\na simple entitysystem that iterates over each entity and calls processentity for each entity every time the entitysystem is updated. this is really just a convenience class as most systems iterate over a list of entities.\n\n\n# hierarchy\n\n * entitysystem\n   \n   ↳ iteratingsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n * family\n\n\n# methods\n\n * getentities\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * processentity\n * setenabled\n * setpriority\n * update\n\n\n# constructors\n\n\n# constructor\n\n• new iteratingsystem(family)\n\n# parameters\n\nname     type     description\nfamily   family   the family of entities iterated over in this system.\n\n# overrides\n\nentitysystem.constructor\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:18\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nentitysystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• readonly family: family\n\nthe family used when the system was created.\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:11\n\n\n# methods\n\n\n# getentities\n\n▸ getentities(): entity[]\n\n# returns\n\nentity[]\n\na list of entities processed by the system.\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:36\n\n----------------------------------------\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nentitysystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nentitysystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.ondisable\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:27\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.onenable\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:23\n\n----------------------------------------\n\n\n# processentity\n\n▸ protected abstract processentity(entity, deltatime): void\n\nthis method is called on every entity on every update call of the entitysystem. override this to implement your system's specific processing.\n\n# parameters\n\nname        type     description\nentity      entity   the current entity being processed.\ndeltatime   number   the delta time between the last and current frame.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:47\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltatime): void\n\nthe update method called every tick.\n\n# parameters\n\nname        type\ndeltatime   number\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.update\n\n# defined in\n\nsrc/systems/iteratingsystem.ts:31",charsets:{}},{title:"Class: Pool",frontmatter:{},regularPath:"/api/classes/Pool.html",relativePath:"api/classes/Pool.md",key:"v-38fea491",path:"/api/classes/Pool.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:101},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:215},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:237},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:270},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:237},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:254},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:270},{level:3,title:"free",slug:"free",normalizedTitle:"free",charIndex:282},{level:3,title:"obtain",slug:"obtain",normalizedTitle:"obtain",charIndex:290}],headersStr:"Type parameters Table of contents Constructors Methods Constructors constructor Methods free obtain",content:"# Class: Pool<T>\n\nA pool of objects that can be reused to avoid allocation.\n\nauthor Nathan Sweet\n\n\n# Type parameters\n\nNAME   TYPE               DESCRIPTION\nT      extends Poolable   The type of objects to pool.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * free\n * obtain\n\n\n# Constructors\n\n\n# constructor\n\n• new Pool<T>(create, max?)\n\nCreates a pool with an initial capacity and a maximum.\n\n# Type parameters\n\nNAME   TYPE\nT      extends Poolable\n\n# Parameters\n\nNAME     TYPE      DEFAULT VALUE             DESCRIPTION\ncreate   () => T   undefined                 A function to create a new object.\nmax      number    Number.MAX_SAFE_INTEGER   The maximum number of free objects to store in this pool.\n\n# Defined in\n\nsrc/pooling/Pool.ts:28\n\n\n# Methods\n\n\n# free\n\n▸ free(object): void\n\nPuts the specified object in the pool, making it eligible to be returned by {@link obtain}. If the pool already contains {@link max} free objects, the specified object is not added to the pool. The pool does not check if an object is already freed, so the same object must not be freed multiple times.\n\n# Parameters\n\nNAME     TYPE   DESCRIPTION\nobject   T      The object to free.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/pooling/Pool.ts:47\n\n----------------------------------------\n\n\n# obtain\n\n▸ obtain(): T\n\n# Returns\n\nT\n\nAn object from this pool. The object may be new or reused (previously freed).\n\n# Defined in\n\nsrc/pooling/Pool.ts:36",normalizedContent:"# class: pool<t>\n\na pool of objects that can be reused to avoid allocation.\n\nauthor nathan sweet\n\n\n# type parameters\n\nname   type               description\nt      extends poolable   the type of objects to pool.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * free\n * obtain\n\n\n# constructors\n\n\n# constructor\n\n• new pool<t>(create, max?)\n\ncreates a pool with an initial capacity and a maximum.\n\n# type parameters\n\nname   type\nt      extends poolable\n\n# parameters\n\nname     type      default value             description\ncreate   () => t   undefined                 a function to create a new object.\nmax      number    number.max_safe_integer   the maximum number of free objects to store in this pool.\n\n# defined in\n\nsrc/pooling/pool.ts:28\n\n\n# methods\n\n\n# free\n\n▸ free(object): void\n\nputs the specified object in the pool, making it eligible to be returned by {@link obtain}. if the pool already contains {@link max} free objects, the specified object is not added to the pool. the pool does not check if an object is already freed, so the same object must not be freed multiple times.\n\n# parameters\n\nname     type   description\nobject   t      the object to free.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/pooling/pool.ts:47\n\n----------------------------------------\n\n\n# obtain\n\n▸ obtain(): t\n\n# returns\n\nt\n\nan object from this pool. the object may be new or reused (previously freed).\n\n# defined in\n\nsrc/pooling/pool.ts:36",charsets:{}},{title:"Class: PoolAllocator",frontmatter:{},regularPath:"/api/classes/PoolAllocator.html",relativePath:"api/classes/PoolAllocator.md",key:"v-5e36b9f9",path:"/api/classes/PoolAllocator.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:103},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:125},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:158},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:125},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:142},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:158},{level:3,title:"freeComponent",slug:"freecomponent",normalizedTitle:"freecomponent",charIndex:170},{level:3,title:"freeEntity",slug:"freeentity",normalizedTitle:"freeentity",charIndex:187},{level:3,title:"obtainComponent",slug:"obtaincomponent",normalizedTitle:"obtaincomponent",charIndex:201},{level:3,title:"obtainEntity",slug:"obtainentity",normalizedTitle:"obtainentity",charIndex:220}],headersStr:"Table of contents Constructors Methods Constructors constructor Methods freeComponent freeEntity obtainComponent obtainEntity",content:"# Class: PoolAllocator\n\nAn allocator, which implements object pooling for entities and components.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * freeComponent\n * freeEntity\n * obtainComponent\n * obtainEntity\n\n\n# Constructors\n\n\n# constructor\n\n• new PoolAllocator(config?)\n\nCreate a new pool allocator.\n\n# Parameters\n\nNAME      TYPE                  DESCRIPTION\nconfig?   PoolAllocatorConfig   The configuration to use.\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:31\n\n\n# Methods\n\n\n# freeComponent\n\n▸ freeComponent(component): void\n\nFree a component.\n\n# Parameters\n\nNAME        TYPE        DESCRIPTION\ncomponent   Component   The component to free.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:73\n\n----------------------------------------\n\n\n# freeEntity\n\n▸ freeEntity(entity): void\n\nFree an entity.\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nentity   Entity   The entity to free.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:50\n\n----------------------------------------\n\n\n# obtainComponent\n\n▸ obtainComponent<T>(Class): T\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends Component<T>   The type of component, do not specify manually!\n\n# Parameters\n\nNAME    TYPE                            DESCRIPTION\nClass   NoArgsComponentConstructor<T>   The constructor of the component.\n\n# Returns\n\nT\n\nA new or reused component.\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:59\n\n----------------------------------------\n\n\n# obtainEntity\n\n▸ obtainEntity(): Entity\n\n# Returns\n\nEntity\n\nA new or reused entity.\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:41",normalizedContent:"# class: poolallocator\n\nan allocator, which implements object pooling for entities and components.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * freecomponent\n * freeentity\n * obtaincomponent\n * obtainentity\n\n\n# constructors\n\n\n# constructor\n\n• new poolallocator(config?)\n\ncreate a new pool allocator.\n\n# parameters\n\nname      type                  description\nconfig?   poolallocatorconfig   the configuration to use.\n\n# defined in\n\nsrc/pooling/poolallocator.ts:31\n\n\n# methods\n\n\n# freecomponent\n\n▸ freecomponent(component): void\n\nfree a component.\n\n# parameters\n\nname        type        description\ncomponent   component   the component to free.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/pooling/poolallocator.ts:73\n\n----------------------------------------\n\n\n# freeentity\n\n▸ freeentity(entity): void\n\nfree an entity.\n\n# parameters\n\nname     type     description\nentity   entity   the entity to free.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/pooling/poolallocator.ts:50\n\n----------------------------------------\n\n\n# obtaincomponent\n\n▸ obtaincomponent<t>(class): t\n\n# type parameters\n\nname   type                   description\nt      extends component<t>   the type of component, do not specify manually!\n\n# parameters\n\nname    type                            description\nclass   noargscomponentconstructor<t>   the constructor of the component.\n\n# returns\n\nt\n\na new or reused component.\n\n# defined in\n\nsrc/pooling/poolallocator.ts:59\n\n----------------------------------------\n\n\n# obtainentity\n\n▸ obtainentity(): entity\n\n# returns\n\nentity\n\na new or reused entity.\n\n# defined in\n\nsrc/pooling/poolallocator.ts:41",charsets:{}},{title:"Class: ReadonlyBits",frontmatter:{},regularPath:"/api/classes/ReadonlyBits.html",relativePath:"api/classes/ReadonlyBits.md",key:"v-ed8b760e",path:"/api/classes/ReadonlyBits.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:148},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:193},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:215},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:248},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:272},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:215},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:232},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:248},{level:3,title:"data",slug:"data",normalizedTitle:"data",charIndex:263},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:272},{level:3,title:"containsAll",slug:"containsall",normalizedTitle:"containsall",charIndex:284},{level:3,title:"equals",slug:"equals",normalizedTitle:"equals",charIndex:299},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:309},{level:3,title:"getData",slug:"getdata",normalizedTitle:"getdata",charIndex:316},{level:3,title:"getStringId",slug:"getstringid",normalizedTitle:"getstringid",charIndex:327},{level:3,title:"intersects",slug:"intersects",normalizedTitle:"intersects",charIndex:342},{level:3,title:"isEmpty",slug:"isempty",normalizedTitle:"isempty",charIndex:356},{level:3,title:"length",slug:"length",normalizedTitle:"length",charIndex:367},{level:3,title:"nextClearBit",slug:"nextclearbit",normalizedTitle:"nextclearbit",charIndex:377},{level:3,title:"nextSetBit",slug:"nextsetbit",normalizedTitle:"nextsetbit",charIndex:393},{level:3,title:"numBits",slug:"numbits",normalizedTitle:"numbits",charIndex:407},{level:3,title:"usedWords",slug:"usedwords",normalizedTitle:"usedwords",charIndex:418}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties data Methods containsAll equals get getData getStringId intersects isEmpty length nextClearBit nextSetBit numBits usedWords",content:'# Class: ReadonlyBits\n\nA bitset, without size limitation, allows comparison via bitwise operators to other bit fields. Mostly for internal use.\n\n\n# Hierarchy\n\n * ReadonlyBits\n   \n   ↳ Bits\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * data\n\n\n# Methods\n\n * containsAll\n * equals\n * get\n * getData\n * getStringId\n * intersects\n * isEmpty\n * length\n * nextClearBit\n * nextSetBit\n * numBits\n * usedWords\n\n\n# Constructors\n\n\n# constructor\n\n• new ReadonlyBits(nbits?)\n\nCreates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1.\n\n# Parameters\n\nNAME    TYPE     DEFAULT VALUE   DESCRIPTION\nnbits   number   64              The initial size of the bit set.\n\n# Defined in\n\nsrc/utils/Bits.ts:17\n\n\n# Properties\n\n\n# data\n\n• Protected data: Int32Array\n\n# Defined in\n\nsrc/utils/Bits.ts:10\n\n\n# Methods\n\n\n# containsAll\n\n▸ containsAll(other): boolean\n\nReturns true if this instance is a super set of the other instance, i.e. it has all bits set to true that are also set to true in the other instance.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nboolean\n\nTrue if this bit set is a super set of the specified set.\n\n# Defined in\n\nsrc/utils/Bits.ts:162\n\n----------------------------------------\n\n\n# equals\n\n▸ equals(other): boolean\n\nCompare with another set of bits.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The bits to compare with.\n\n# Returns\n\nboolean\n\nTrue if all bits match.\n\n# Defined in\n\nsrc/utils/Bits.ts:188\n\n----------------------------------------\n\n\n# get\n\n▸ get(index): boolean\n\n# Parameters\n\nNAME    TYPE     DESCRIPTION\nindex   number   The index of the bit.\n\n# Returns\n\nboolean\n\nWhether the bit is set.\n\n# Defined in\n\nsrc/utils/Bits.ts:32\n\n----------------------------------------\n\n\n# getData\n\n▸ getData(): ReadonlyInt32Array\n\n# Returns\n\nReadonlyInt32Array\n\nA readonly version of the underlying data.\n\n# Defined in\n\nsrc/utils/Bits.ts:24\n\n----------------------------------------\n\n\n# getStringId\n\n▸ getStringId(): string\n\n# Returns\n\nstring\n\nAll numbers as string, comma separated.\n\n# Defined in\n\nsrc/utils/Bits.ts:178\n\n----------------------------------------\n\n\n# intersects\n\n▸ intersects(other): boolean\n\nReturns true if the other instance has any bits set to true that are also set to true in this instance.\n\n# Parameters\n\nNAME    TYPE           DESCRIPTION\nother   ReadonlyBits   The other instance.\n\n# Returns\n\nboolean\n\nTrue if this bit set intersects the specified bit set.\n\n# Defined in\n\nsrc/utils/Bits.ts:145\n\n----------------------------------------\n\n\n# isEmpty\n\n▸ isEmpty(): boolean\n\n# Returns\n\nboolean\n\nTrue if this bitset contains no bits that are set to true.\n\n# Defined in\n\nsrc/utils/Bits.ts:73\n\n----------------------------------------\n\n\n# length\n\n▸ length(): number\n\nReturns the "logical size" of this bitset: The index of the highest set bit in the bitset plus one. Returns zero if the bitset contains no set bits.\n\n# Returns\n\nnumber\n\nThe logical size of this bitset.\n\n# Defined in\n\nsrc/utils/Bits.ts:58\n\n----------------------------------------\n\n\n# nextClearBit\n\n▸ nextClearBit(fromIndex): number\n\nReturns the index of the first bit that is set to false that occurs on or after the specified starting index.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nfromIndex   number   The index to start looking.\n\n# Returns\n\nnumber\n\n>= 0 if a falsy bit was found, -1 otherwise.\n\n# Defined in\n\nsrc/utils/Bits.ts:119\n\n----------------------------------------\n\n\n# nextSetBit\n\n▸ nextSetBit(fromIndex): number\n\nReturns the index of the first bit that is set to true that occurs on or after the specified starting index.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nfromIndex   number   The index to start looking.\n\n# Returns\n\nnumber\n\n>= 0 if a truthy bit was found, -1 otherwise.\n\n# Defined in\n\nsrc/utils/Bits.ts:89\n\n----------------------------------------\n\n\n# numBits\n\n▸ numBits(): number\n\n# Returns\n\nnumber\n\nThe number of bits currently stored, not the highest set bit!\n\n# Defined in\n\nsrc/utils/Bits.ts:39\n\n----------------------------------------\n\n\n# usedWords\n\n▸ usedWords(): number\n\n# Returns\n\nnumber\n\nThe minimal number of words to store all the bits.\n\n# Defined in\n\nsrc/utils/Bits.ts:44',normalizedContent:'# class: readonlybits\n\na bitset, without size limitation, allows comparison via bitwise operators to other bit fields. mostly for internal use.\n\n\n# hierarchy\n\n * readonlybits\n   \n   ↳ bits\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * data\n\n\n# methods\n\n * containsall\n * equals\n * get\n * getdata\n * getstringid\n * intersects\n * isempty\n * length\n * nextclearbit\n * nextsetbit\n * numbits\n * usedwords\n\n\n# constructors\n\n\n# constructor\n\n• new readonlybits(nbits?)\n\ncreates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1.\n\n# parameters\n\nname    type     default value   description\nnbits   number   64              the initial size of the bit set.\n\n# defined in\n\nsrc/utils/bits.ts:17\n\n\n# properties\n\n\n# data\n\n• protected data: int32array\n\n# defined in\n\nsrc/utils/bits.ts:10\n\n\n# methods\n\n\n# containsall\n\n▸ containsall(other): boolean\n\nreturns true if this instance is a super set of the other instance, i.e. it has all bits set to true that are also set to true in the other instance.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nboolean\n\ntrue if this bit set is a super set of the specified set.\n\n# defined in\n\nsrc/utils/bits.ts:162\n\n----------------------------------------\n\n\n# equals\n\n▸ equals(other): boolean\n\ncompare with another set of bits.\n\n# parameters\n\nname    type           description\nother   readonlybits   the bits to compare with.\n\n# returns\n\nboolean\n\ntrue if all bits match.\n\n# defined in\n\nsrc/utils/bits.ts:188\n\n----------------------------------------\n\n\n# get\n\n▸ get(index): boolean\n\n# parameters\n\nname    type     description\nindex   number   the index of the bit.\n\n# returns\n\nboolean\n\nwhether the bit is set.\n\n# defined in\n\nsrc/utils/bits.ts:32\n\n----------------------------------------\n\n\n# getdata\n\n▸ getdata(): readonlyint32array\n\n# returns\n\nreadonlyint32array\n\na readonly version of the underlying data.\n\n# defined in\n\nsrc/utils/bits.ts:24\n\n----------------------------------------\n\n\n# getstringid\n\n▸ getstringid(): string\n\n# returns\n\nstring\n\nall numbers as string, comma separated.\n\n# defined in\n\nsrc/utils/bits.ts:178\n\n----------------------------------------\n\n\n# intersects\n\n▸ intersects(other): boolean\n\nreturns true if the other instance has any bits set to true that are also set to true in this instance.\n\n# parameters\n\nname    type           description\nother   readonlybits   the other instance.\n\n# returns\n\nboolean\n\ntrue if this bit set intersects the specified bit set.\n\n# defined in\n\nsrc/utils/bits.ts:145\n\n----------------------------------------\n\n\n# isempty\n\n▸ isempty(): boolean\n\n# returns\n\nboolean\n\ntrue if this bitset contains no bits that are set to true.\n\n# defined in\n\nsrc/utils/bits.ts:73\n\n----------------------------------------\n\n\n# length\n\n▸ length(): number\n\nreturns the "logical size" of this bitset: the index of the highest set bit in the bitset plus one. returns zero if the bitset contains no set bits.\n\n# returns\n\nnumber\n\nthe logical size of this bitset.\n\n# defined in\n\nsrc/utils/bits.ts:58\n\n----------------------------------------\n\n\n# nextclearbit\n\n▸ nextclearbit(fromindex): number\n\nreturns the index of the first bit that is set to false that occurs on or after the specified starting index.\n\n# parameters\n\nname        type     description\nfromindex   number   the index to start looking.\n\n# returns\n\nnumber\n\n>= 0 if a falsy bit was found, -1 otherwise.\n\n# defined in\n\nsrc/utils/bits.ts:119\n\n----------------------------------------\n\n\n# nextsetbit\n\n▸ nextsetbit(fromindex): number\n\nreturns the index of the first bit that is set to true that occurs on or after the specified starting index.\n\n# parameters\n\nname        type     description\nfromindex   number   the index to start looking.\n\n# returns\n\nnumber\n\n>= 0 if a truthy bit was found, -1 otherwise.\n\n# defined in\n\nsrc/utils/bits.ts:89\n\n----------------------------------------\n\n\n# numbits\n\n▸ numbits(): number\n\n# returns\n\nnumber\n\nthe number of bits currently stored, not the highest set bit!\n\n# defined in\n\nsrc/utils/bits.ts:39\n\n----------------------------------------\n\n\n# usedwords\n\n▸ usedwords(): number\n\n# returns\n\nnumber\n\nthe minimal number of words to store all the bits.\n\n# defined in\n\nsrc/utils/bits.ts:44',charsets:{}},{title:"Class: SortedIteratingSystem",frontmatter:{},regularPath:"/api/classes/SortedIteratingSystem.html",relativePath:"api/classes/SortedIteratingSystem.md",key:"v-24ca16b9",path:"/api/classes/SortedIteratingSystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:484},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:581},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:603},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:636},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:672},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:603},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:620},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:636},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:651},{level:3,title:"family",slug:"family",normalizedTitle:"family",charIndex:661},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:672},{level:3,title:"forceSort",slug:"forcesort",normalizedTitle:"forcesort",charIndex:432},{level:3,title:"getEntities",slug:"getentities",normalizedTitle:"getentities",charIndex:697},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:712},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:727},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:740},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:753},{level:3,title:"processEntity",slug:"processentity",normalizedTitle:"processentity",charIndex:177},{level:3,title:"setComparator",slug:"setcomparator",normalizedTitle:"setcomparator",charIndex:782},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:799},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:813},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:238}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine family Methods forceSort getEntities getPriority isEnabled onDisable onEnable processEntity setComparator setEnabled setPriority update",content:"# Class: SortedIteratingSystem\n\nLike IteratingSystem, but sorted using a comparator. It processes each Entity of a given Family in the order specified by a comparator and calls processEntity for each Entity every time the EntitySystem is updated. This is really just a convenience class as rendering systems tend to iterate over a list of entities in a sorted manner. Adding entities will cause the entity list to be resorted. Call forceSort if you changed your sorting criteria.\n\n\n# Hierarchy\n\n * EntitySystem\n   \n   ↳ SortedIteratingSystem\n   \n   ↳↳ SortedSubIteratingSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n * family\n\n\n# Methods\n\n * forceSort\n * getEntities\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * processEntity\n * setComparator\n * setEnabled\n * setPriority\n * update\n\n\n# Constructors\n\n\n# constructor\n\n• new SortedIteratingSystem(family, comparator)\n\n# Parameters\n\nNAME         TYPE               DESCRIPTION\nfamily       Family             The family of entities iterated over in this system.\ncomparator   EntityComparator   The comparator to sort the entities.\n\n# Overrides\n\nEntitySystem.constructor\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:37\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nEntitySystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• Readonly family: Family\n\nThe Family used when the system was created.\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:23\n\n\n# Methods\n\n\n# forceSort\n\n▸ forceSort(): void\n\nCall this if the sorting criteria have changed. The actual sorting will be delayed until the entities are processed.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:57\n\n----------------------------------------\n\n\n# getEntities\n\n▸ getEntities(): Entity[]\n\n# Returns\n\nEntity[]\n\nThe set of entities processed by the system.\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:104\n\n----------------------------------------\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nEntitySystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nEntitySystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.onDisable\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:88\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.onEnable\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:82\n\n----------------------------------------\n\n\n# processEntity\n\n▸ Protected Abstract processEntity(entity, deltaTime): void\n\nThis method is called on every entity on every update call of the EntitySystem. Override this to implement your system's specific processing.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nentity      Entity   The current Entity being processed.\ndeltaTime   number   The delta time between the last and current frame.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:116\n\n----------------------------------------\n\n\n# setComparator\n\n▸ setComparator(comparator): void\n\nUpdate the comparator to sort the entities. Implicitly calls forceSort.\n\n# Parameters\n\nNAME         TYPE               DESCRIPTION\ncomparator   EntityComparator   The comparator to sort the entities.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:48\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nEntitySystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltaTime): void\n\nThe update method called every tick.\n\n# Parameters\n\nNAME        TYPE\ndeltaTime   number\n\n# Returns\n\nvoid\n\n# Overrides\n\nEntitySystem.update\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:94",normalizedContent:"# class: sortediteratingsystem\n\nlike iteratingsystem, but sorted using a comparator. it processes each entity of a given family in the order specified by a comparator and calls processentity for each entity every time the entitysystem is updated. this is really just a convenience class as rendering systems tend to iterate over a list of entities in a sorted manner. adding entities will cause the entity list to be resorted. call forcesort if you changed your sorting criteria.\n\n\n# hierarchy\n\n * entitysystem\n   \n   ↳ sortediteratingsystem\n   \n   ↳↳ sortedsubiteratingsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n * family\n\n\n# methods\n\n * forcesort\n * getentities\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * processentity\n * setcomparator\n * setenabled\n * setpriority\n * update\n\n\n# constructors\n\n\n# constructor\n\n• new sortediteratingsystem(family, comparator)\n\n# parameters\n\nname         type               description\nfamily       family             the family of entities iterated over in this system.\ncomparator   entitycomparator   the comparator to sort the entities.\n\n# overrides\n\nentitysystem.constructor\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:37\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nentitysystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• readonly family: family\n\nthe family used when the system was created.\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:23\n\n\n# methods\n\n\n# forcesort\n\n▸ forcesort(): void\n\ncall this if the sorting criteria have changed. the actual sorting will be delayed until the entities are processed.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:57\n\n----------------------------------------\n\n\n# getentities\n\n▸ getentities(): entity[]\n\n# returns\n\nentity[]\n\nthe set of entities processed by the system.\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:104\n\n----------------------------------------\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nentitysystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nentitysystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.ondisable\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:88\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.onenable\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:82\n\n----------------------------------------\n\n\n# processentity\n\n▸ protected abstract processentity(entity, deltatime): void\n\nthis method is called on every entity on every update call of the entitysystem. override this to implement your system's specific processing.\n\n# parameters\n\nname        type     description\nentity      entity   the current entity being processed.\ndeltatime   number   the delta time between the last and current frame.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:116\n\n----------------------------------------\n\n\n# setcomparator\n\n▸ setcomparator(comparator): void\n\nupdate the comparator to sort the entities. implicitly calls forcesort.\n\n# parameters\n\nname         type               description\ncomparator   entitycomparator   the comparator to sort the entities.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:48\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nentitysystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltatime): void\n\nthe update method called every tick.\n\n# parameters\n\nname        type\ndeltatime   number\n\n# returns\n\nvoid\n\n# overrides\n\nentitysystem.update\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:94",charsets:{}},{title:"Class: SortedSubIteratingSystem",frontmatter:{},regularPath:"/api/classes/SortedSubIteratingSystem.html",relativePath:"api/classes/SortedSubIteratingSystem.md",key:"v-57d2f483",path:"/api/classes/SortedSubIteratingSystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:347},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:421},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:443},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:476},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:526},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:443},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:460},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:476},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:491},{level:3,title:"family",slug:"family",normalizedTitle:"family",charIndex:171},{level:3,title:"subSystems",slug:"subsystems",normalizedTitle:"subsystems",charIndex:511},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:526},{level:3,title:"forceSort",slug:"forcesort",normalizedTitle:"forcesort",charIndex:538},{level:3,title:"getEntities",slug:"getentities",normalizedTitle:"getentities",charIndex:551},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:566},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:581},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:594},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:607},{level:3,title:"processEntity",slug:"processentity",normalizedTitle:"processentity",charIndex:619},{level:3,title:"setComparator",slug:"setcomparator",normalizedTitle:"setcomparator",charIndex:636},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:653},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:667},{level:3,title:"update",slug:"update",normalizedTitle:"update",charIndex:682}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine family subSystems Methods forceSort getEntities getPriority isEnabled onDisable onEnable processEntity setComparator setEnabled setPriority update",content:"# Class: SortedSubIteratingSystem\n\nImagine a SortedIteratingSystem that you can add SubSystems to. For each entity being processed, all SubSystems that match the entities family will be called in the order they have been added. An example use-case would be to do multiple render steps for each entity, while entities are ordered by a z-index.\n\n\n# Hierarchy\n\n * SortedIteratingSystem\n   \n   ↳ SortedSubIteratingSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n * family\n * subSystems\n\n\n# Methods\n\n * forceSort\n * getEntities\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * processEntity\n * setComparator\n * setEnabled\n * setPriority\n * update\n\n\n# Constructors\n\n\n# constructor\n\n• new SortedSubIteratingSystem(family, comparator)\n\n# Parameters\n\nNAME         TYPE               DESCRIPTION\nfamily       Family             The family of entities iterated over in this system.\ncomparator   EntityComparator   The comparator to sort the entities.\n\n# Inherited from\n\nSortedIteratingSystem.constructor\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:37\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nSortedIteratingSystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• Readonly family: Family\n\nThe Family used when the system was created.\n\n# Inherited from\n\nSortedIteratingSystem.family\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:23\n\n----------------------------------------\n\n\n# subSystems\n\n• Readonly subSystems: SubSystemManager\n\n# Defined in\n\nsrc/systems/SortedSubIteratingSystem.ts:15\n\n\n# Methods\n\n\n# forceSort\n\n▸ forceSort(): void\n\nCall this if the sorting criteria have changed. The actual sorting will be delayed until the entities are processed.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSortedIteratingSystem.forceSort\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:57\n\n----------------------------------------\n\n\n# getEntities\n\n▸ getEntities(): Entity[]\n\n# Returns\n\nEntity[]\n\nThe set of entities processed by the system.\n\n# Inherited from\n\nSortedIteratingSystem.getEntities\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:104\n\n----------------------------------------\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nSortedIteratingSystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nSortedIteratingSystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSortedIteratingSystem.onDisable\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:88\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSortedIteratingSystem.onEnable\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:82\n\n----------------------------------------\n\n\n# processEntity\n\n▸ processEntity(entity, deltaTime): void\n\nThis method is called on every entity on every update call of the EntitySystem. Override this to implement your system's specific processing.\n\n# Parameters\n\nNAME        TYPE\nentity      Entity\ndeltaTime   number\n\n# Returns\n\nvoid\n\n# Overrides\n\nSortedIteratingSystem.processEntity\n\n# Defined in\n\nsrc/systems/SortedSubIteratingSystem.ts:17\n\n----------------------------------------\n\n\n# setComparator\n\n▸ setComparator(comparator): void\n\nUpdate the comparator to sort the entities. Implicitly calls forceSort.\n\n# Parameters\n\nNAME         TYPE               DESCRIPTION\ncomparator   EntityComparator   The comparator to sort the entities.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSortedIteratingSystem.setComparator\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:48\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSortedIteratingSystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nSortedIteratingSystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltaTime): void\n\nThe update method called every tick.\n\n# Parameters\n\nNAME        TYPE\ndeltaTime   number\n\n# Returns\n\nvoid\n\n# Overrides\n\nSortedIteratingSystem.update\n\n# Defined in\n\nsrc/systems/SortedSubIteratingSystem.ts:25",normalizedContent:"# class: sortedsubiteratingsystem\n\nimagine a sortediteratingsystem that you can add subsystems to. for each entity being processed, all subsystems that match the entities family will be called in the order they have been added. an example use-case would be to do multiple render steps for each entity, while entities are ordered by a z-index.\n\n\n# hierarchy\n\n * sortediteratingsystem\n   \n   ↳ sortedsubiteratingsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n * family\n * subsystems\n\n\n# methods\n\n * forcesort\n * getentities\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * processentity\n * setcomparator\n * setenabled\n * setpriority\n * update\n\n\n# constructors\n\n\n# constructor\n\n• new sortedsubiteratingsystem(family, comparator)\n\n# parameters\n\nname         type               description\nfamily       family             the family of entities iterated over in this system.\ncomparator   entitycomparator   the comparator to sort the entities.\n\n# inherited from\n\nsortediteratingsystem.constructor\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:37\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nsortediteratingsystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• readonly family: family\n\nthe family used when the system was created.\n\n# inherited from\n\nsortediteratingsystem.family\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:23\n\n----------------------------------------\n\n\n# subsystems\n\n• readonly subsystems: subsystemmanager\n\n# defined in\n\nsrc/systems/sortedsubiteratingsystem.ts:15\n\n\n# methods\n\n\n# forcesort\n\n▸ forcesort(): void\n\ncall this if the sorting criteria have changed. the actual sorting will be delayed until the entities are processed.\n\n# returns\n\nvoid\n\n# inherited from\n\nsortediteratingsystem.forcesort\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:57\n\n----------------------------------------\n\n\n# getentities\n\n▸ getentities(): entity[]\n\n# returns\n\nentity[]\n\nthe set of entities processed by the system.\n\n# inherited from\n\nsortediteratingsystem.getentities\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:104\n\n----------------------------------------\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nsortediteratingsystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nsortediteratingsystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nsortediteratingsystem.ondisable\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:88\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nsortediteratingsystem.onenable\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:82\n\n----------------------------------------\n\n\n# processentity\n\n▸ processentity(entity, deltatime): void\n\nthis method is called on every entity on every update call of the entitysystem. override this to implement your system's specific processing.\n\n# parameters\n\nname        type\nentity      entity\ndeltatime   number\n\n# returns\n\nvoid\n\n# overrides\n\nsortediteratingsystem.processentity\n\n# defined in\n\nsrc/systems/sortedsubiteratingsystem.ts:17\n\n----------------------------------------\n\n\n# setcomparator\n\n▸ setcomparator(comparator): void\n\nupdate the comparator to sort the entities. implicitly calls forcesort.\n\n# parameters\n\nname         type               description\ncomparator   entitycomparator   the comparator to sort the entities.\n\n# returns\n\nvoid\n\n# inherited from\n\nsortediteratingsystem.setcomparator\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:48\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nsortediteratingsystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nsortediteratingsystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66\n\n----------------------------------------\n\n\n# update\n\n▸ update(deltatime): void\n\nthe update method called every tick.\n\n# parameters\n\nname        type\ndeltatime   number\n\n# returns\n\nvoid\n\n# overrides\n\nsortediteratingsystem.update\n\n# defined in\n\nsrc/systems/sortedsubiteratingsystem.ts:25",charsets:{}},{title:"Class: SubSystem",frontmatter:{},regularPath:"/api/classes/SubSystem.html",relativePath:"api/classes/SubSystem.md",key:"v-52f88d79",path:"/api/classes/SubSystem.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:93},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:156},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:178},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:211},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:247},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:178},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:195},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:211},{level:3,title:"engine",slug:"engine",normalizedTitle:"engine",charIndex:226},{level:3,title:"family",slug:"family",normalizedTitle:"family",charIndex:236},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:247},{level:3,title:"getPriority",slug:"getpriority",normalizedTitle:"getpriority",charIndex:259},{level:3,title:"isEnabled",slug:"isenabled",normalizedTitle:"isenabled",charIndex:274},{level:3,title:"onDisable",slug:"ondisable",normalizedTitle:"ondisable",charIndex:287},{level:3,title:"onEnable",slug:"onenable",normalizedTitle:"onenable",charIndex:300},{level:3,title:"processEntity",slug:"processentity",normalizedTitle:"processentity",charIndex:312},{level:3,title:"setEnabled",slug:"setenabled",normalizedTitle:"setenabled",charIndex:329},{level:3,title:"setPriority",slug:"setpriority",normalizedTitle:"setpriority",charIndex:343}],headersStr:"Hierarchy Table of contents Constructors Properties Methods Constructors constructor Properties engine family Methods getPriority isEnabled onDisable onEnable processEntity setEnabled setPriority",content:"# Class: SubSystem\n\nBase class for sub-systems to be used with SortedSubIteratingSystem.\n\n\n# Hierarchy\n\n * AbstractSystem<SubSystem>\n   \n   ↳ SubSystem\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * engine\n * family\n\n\n# Methods\n\n * getPriority\n * isEnabled\n * onDisable\n * onEnable\n * processEntity\n * setEnabled\n * setPriority\n\n\n# Constructors\n\n\n# constructor\n\n• new SubSystem(family)\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nfamily   Family   The family of entities to process.\n\n# Overrides\n\nAbstractSystem.constructor\n\n# Defined in\n\nsrc/systems/SubSystem.ts:14\n\n\n# Properties\n\n\n# engine\n\n• Readonly engine: Engine\n\nThe engine of this system.\n\n# Inherited from\n\nAbstractSystem.engine\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• Readonly family: Family\n\n# Defined in\n\nsrc/systems/SubSystem.ts:9\n\n\n# Methods\n\n\n# getPriority\n\n▸ getPriority(): number\n\n# Returns\n\nnumber\n\nThe priority of the system. Do not override this!\n\n# Inherited from\n\nAbstractSystem.getPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:75\n\n----------------------------------------\n\n\n# isEnabled\n\n▸ isEnabled(): boolean\n\n# Returns\n\nboolean\n\nTrue if the system is enabled.\n\n# Inherited from\n\nAbstractSystem.isEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:57\n\n----------------------------------------\n\n\n# onDisable\n\n▸ Protected onDisable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being removed from the manager\n * When the system is already added to the manager and is currently being disabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.onDisable\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:36\n\n----------------------------------------\n\n\n# onEnable\n\n▸ Protected onEnable(): void\n\nCalled in two situations:\n\n * When the system is enabled and currently being added to the manager\n * When the system is already added to the manager and is currently being enabled.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.onEnable\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:28\n\n----------------------------------------\n\n\n# processEntity\n\n▸ Abstract processEntity(entity, deltaTime): void\n\nThis method is called on every entity on every update call of the SubSystem. Override this to implement your system's specific processing.\n\n# Parameters\n\nNAME        TYPE     DESCRIPTION\nentity      Entity   The current Entity being processed.\ndeltaTime   number   The delta time between the last and current frame.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/systems/SubSystem.ts:26\n\n----------------------------------------\n\n\n# setEnabled\n\n▸ setEnabled(enabled): void\n\nEnable or disable the system. A disabled system will not be processed during an update.\n\n# Parameters\n\nNAME      TYPE      DESCRIPTION\nenabled   boolean   The new state.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.setEnabled\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:43\n\n----------------------------------------\n\n\n# setPriority\n\n▸ setPriority(priority): void\n\nSet the system priority. You can set the priority with when adding the system as well.\n\n# Parameters\n\nNAME       TYPE     DESCRIPTION\npriority   number   The priority to execute this system with (lower means higher\n                    priority).\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystem.setPriority\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:66",normalizedContent:"# class: subsystem\n\nbase class for sub-systems to be used with sortedsubiteratingsystem.\n\n\n# hierarchy\n\n * abstractsystem<subsystem>\n   \n   ↳ subsystem\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * engine\n * family\n\n\n# methods\n\n * getpriority\n * isenabled\n * ondisable\n * onenable\n * processentity\n * setenabled\n * setpriority\n\n\n# constructors\n\n\n# constructor\n\n• new subsystem(family)\n\n# parameters\n\nname     type     description\nfamily   family   the family of entities to process.\n\n# overrides\n\nabstractsystem.constructor\n\n# defined in\n\nsrc/systems/subsystem.ts:14\n\n\n# properties\n\n\n# engine\n\n• readonly engine: engine\n\nthe engine of this system.\n\n# inherited from\n\nabstractsystem.engine\n\n# defined in\n\nsrc/core/abstractsystem.ts:14\n\n----------------------------------------\n\n\n# family\n\n• readonly family: family\n\n# defined in\n\nsrc/systems/subsystem.ts:9\n\n\n# methods\n\n\n# getpriority\n\n▸ getpriority(): number\n\n# returns\n\nnumber\n\nthe priority of the system. do not override this!\n\n# inherited from\n\nabstractsystem.getpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:75\n\n----------------------------------------\n\n\n# isenabled\n\n▸ isenabled(): boolean\n\n# returns\n\nboolean\n\ntrue if the system is enabled.\n\n# inherited from\n\nabstractsystem.isenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:57\n\n----------------------------------------\n\n\n# ondisable\n\n▸ protected ondisable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being removed from the manager\n * when the system is already added to the manager and is currently being disabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.ondisable\n\n# defined in\n\nsrc/core/abstractsystem.ts:36\n\n----------------------------------------\n\n\n# onenable\n\n▸ protected onenable(): void\n\ncalled in two situations:\n\n * when the system is enabled and currently being added to the manager\n * when the system is already added to the manager and is currently being enabled.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.onenable\n\n# defined in\n\nsrc/core/abstractsystem.ts:28\n\n----------------------------------------\n\n\n# processentity\n\n▸ abstract processentity(entity, deltatime): void\n\nthis method is called on every entity on every update call of the subsystem. override this to implement your system's specific processing.\n\n# parameters\n\nname        type     description\nentity      entity   the current entity being processed.\ndeltatime   number   the delta time between the last and current frame.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/systems/subsystem.ts:26\n\n----------------------------------------\n\n\n# setenabled\n\n▸ setenabled(enabled): void\n\nenable or disable the system. a disabled system will not be processed during an update.\n\n# parameters\n\nname      type      description\nenabled   boolean   the new state.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.setenabled\n\n# defined in\n\nsrc/core/abstractsystem.ts:43\n\n----------------------------------------\n\n\n# setpriority\n\n▸ setpriority(priority): void\n\nset the system priority. you can set the priority with when adding the system as well.\n\n# parameters\n\nname       type     description\npriority   number   the priority to execute this system with (lower means higher\n                    priority).\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystem.setpriority\n\n# defined in\n\nsrc/core/abstractsystem.ts:66",charsets:{}},{title:"Class: SubSystemManager",frontmatter:{},regularPath:"/api/classes/SubSystemManager.html",relativePath:"api/classes/SubSystemManager.md",key:"v-5022f50d",path:"/api/classes/SubSystemManager.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:99},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:176},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:198},{level:3,title:"Accessors",slug:"accessors",normalizedTitle:"accessors",charIndex:231},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:265},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:198},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:215},{level:2,title:"Accessors",slug:"accessors-2",normalizedTitle:"accessors",charIndex:231},{level:3,title:"delayOperations",slug:"delayoperations",normalizedTitle:"delayoperations",charIndex:245},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:265},{level:3,title:"add",slug:"add",normalizedTitle:"add",charIndex:277},{level:3,title:"get",slug:"get",normalizedTitle:"get",charIndex:284},{level:3,title:"getAll",slug:"getall",normalizedTitle:"getall",charIndex:291},{level:3,title:"hasEnabledSystems",slug:"hasenabledsystems",normalizedTitle:"hasenabledsystems",charIndex:301},{level:3,title:"remove",slug:"remove",normalizedTitle:"remove",charIndex:322},{level:3,title:"removeAll",slug:"removeall",normalizedTitle:"removeall",charIndex:332}],headersStr:"Hierarchy Table of contents Constructors Accessors Methods Constructors constructor Accessors delayOperations Methods add get getAll hasEnabledSystems remove removeAll",content:"# Class: SubSystemManager\n\nA manager for sub systems to be used with SortedSubIteratingSystem.\n\n\n# Hierarchy\n\n * AbstractSystemManager<SubSystem>\n   \n   ↳ SubSystemManager\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Accessors\n\n * delayOperations\n\n\n# Methods\n\n * add\n * get\n * getAll\n * hasEnabledSystems\n * remove\n * removeAll\n\n\n# Constructors\n\n\n# constructor\n\n• new SubSystemManager(container)\n\n# Parameters\n\nNAME        TYPE                DESCRIPTION\ncontainer   ContainerInstance   The container instance to use.\n\n# Inherited from\n\nAbstractSystemManager.constructor\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:32\n\n\n# Accessors\n\n\n# delayOperations\n\n• Protected set delayOperations(shouldDelay): void\n\n# Parameters\n\nNAME          TYPE\nshouldDelay   boolean\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystemManager.delayOperations\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:37\n\n\n# Methods\n\n\n# add\n\n▸ add<T>(constructor, priority?): T\n\nAdds the system to this manager.\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends SubSystem<T>   The entity system class.\n\n# Parameters\n\nNAME          TYPE                   DEFAULT VALUE   DESCRIPTION\nconstructor   SystemConstructor<T>   undefined       The system to add.\npriority      number                 0               The priority to execute this system with (lower means higher\n                                                     priority).\n\n# Returns\n\nT\n\nThe newly created system.\n\n# Inherited from\n\nAbstractSystemManager.add\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:54\n\n----------------------------------------\n\n\n# get\n\n▸ get<T>(clazz): undefined | T\n\nGet a system by its class.\n\n# Type parameters\n\nNAME   TYPE                   DESCRIPTION\nT      extends SubSystem<T>   The entity system class.\n\n# Parameters\n\nNAME    TYPE                   DESCRIPTION\nclazz   SystemConstructor<T>   The constructor for T.\n\n# Returns\n\nundefined | T\n\nThe T of the specified class, or undefined if no such system exists.\n\n# Inherited from\n\nAbstractSystemManager.get\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:125\n\n----------------------------------------\n\n\n# getAll\n\n▸ getAll(): SubSystem[]\n\n# Returns\n\nSubSystem[]\n\nA list of all entity systems managed by the Engine sorted by priority.\n\n# Inherited from\n\nAbstractSystemManager.getAll\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:132\n\n----------------------------------------\n\n\n# hasEnabledSystems\n\n▸ hasEnabledSystems(): boolean\n\n# Returns\n\nboolean\n\nTrue if any added system is enabled.\n\n# Inherited from\n\nAbstractSystemManager.hasEnabledSystems\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:42\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nRemoves the system from this Engine.\n\n# Parameters\n\nNAME    TYPE                           DESCRIPTION\nclazz   SystemConstructor<SubSystem>   The System class to remove.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystemManager.remove\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:84\n\n----------------------------------------\n\n\n# removeAll\n\n▸ removeAll(): void\n\nRemoves all systems registered with this Engine.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nAbstractSystemManager.removeAll\n\n# Defined in\n\nsrc/core/AbstractSystemManager.ts:105",normalizedContent:"# class: subsystemmanager\n\na manager for sub systems to be used with sortedsubiteratingsystem.\n\n\n# hierarchy\n\n * abstractsystemmanager<subsystem>\n   \n   ↳ subsystemmanager\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# accessors\n\n * delayoperations\n\n\n# methods\n\n * add\n * get\n * getall\n * hasenabledsystems\n * remove\n * removeall\n\n\n# constructors\n\n\n# constructor\n\n• new subsystemmanager(container)\n\n# parameters\n\nname        type                description\ncontainer   containerinstance   the container instance to use.\n\n# inherited from\n\nabstractsystemmanager.constructor\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:32\n\n\n# accessors\n\n\n# delayoperations\n\n• protected set delayoperations(shoulddelay): void\n\n# parameters\n\nname          type\nshoulddelay   boolean\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystemmanager.delayoperations\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:37\n\n\n# methods\n\n\n# add\n\n▸ add<t>(constructor, priority?): t\n\nadds the system to this manager.\n\n# type parameters\n\nname   type                   description\nt      extends subsystem<t>   the entity system class.\n\n# parameters\n\nname          type                   default value   description\nconstructor   systemconstructor<t>   undefined       the system to add.\npriority      number                 0               the priority to execute this system with (lower means higher\n                                                     priority).\n\n# returns\n\nt\n\nthe newly created system.\n\n# inherited from\n\nabstractsystemmanager.add\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:54\n\n----------------------------------------\n\n\n# get\n\n▸ get<t>(clazz): undefined | t\n\nget a system by its class.\n\n# type parameters\n\nname   type                   description\nt      extends subsystem<t>   the entity system class.\n\n# parameters\n\nname    type                   description\nclazz   systemconstructor<t>   the constructor for t.\n\n# returns\n\nundefined | t\n\nthe t of the specified class, or undefined if no such system exists.\n\n# inherited from\n\nabstractsystemmanager.get\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:125\n\n----------------------------------------\n\n\n# getall\n\n▸ getall(): subsystem[]\n\n# returns\n\nsubsystem[]\n\na list of all entity systems managed by the engine sorted by priority.\n\n# inherited from\n\nabstractsystemmanager.getall\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:132\n\n----------------------------------------\n\n\n# hasenabledsystems\n\n▸ hasenabledsystems(): boolean\n\n# returns\n\nboolean\n\ntrue if any added system is enabled.\n\n# inherited from\n\nabstractsystemmanager.hasenabledsystems\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:42\n\n----------------------------------------\n\n\n# remove\n\n▸ remove(clazz): void\n\nremoves the system from this engine.\n\n# parameters\n\nname    type                           description\nclazz   systemconstructor<subsystem>   the system class to remove.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystemmanager.remove\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:84\n\n----------------------------------------\n\n\n# removeall\n\n▸ removeall(): void\n\nremoves all systems registered with this engine.\n\n# returns\n\nvoid\n\n# inherited from\n\nabstractsystemmanager.removeall\n\n# defined in\n\nsrc/core/abstractsystemmanager.ts:105",charsets:{cjk:!0}},{title:"Interface: ComponentConstructor",frontmatter:{},regularPath:"/api/interfaces/ComponentConstructor.html",relativePath:"api/interfaces/ComponentConstructor.md",key:"v-d744928e",path:"/api/interfaces/ComponentConstructor.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:89},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:235},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:257},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:290},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:257},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:57},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:290},{level:3,title:"getComponentBit",slug:"getcomponentbit",normalizedTitle:"getcomponentbit",charIndex:302}],headersStr:"Type parameters Table of contents Constructors Methods Constructors constructor Methods getComponentBit",content:"# Interface: ComponentConstructor<T>\n\nAn interface for a constructor of a component.\n\n\n# Type parameters\n\nNAME   TYPE                            DESCRIPTION\nT      extends Component = Component   The class the constructor creates.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * getComponentBit\n\n\n# Constructors\n\n\n# constructor\n\n• new ComponentConstructor(...p)\n\nThe constructor function.\n\n# Parameters\n\nNAME   TYPE\n...p   any[]\n\n# Defined in\n\nsrc/core/Component.ts:10\n\n\n# Methods\n\n\n# getComponentBit\n\n▸ getComponentBit(): number\n\n# Returns\n\nnumber\n\nThe component bit.\n\n# Defined in\n\nsrc/core/Component.ts:13",normalizedContent:"# interface: componentconstructor<t>\n\nan interface for a constructor of a component.\n\n\n# type parameters\n\nname   type                            description\nt      extends component = component   the class the constructor creates.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * getcomponentbit\n\n\n# constructors\n\n\n# constructor\n\n• new componentconstructor(...p)\n\nthe constructor function.\n\n# parameters\n\nname   type\n...p   any[]\n\n# defined in\n\nsrc/core/component.ts:10\n\n\n# methods\n\n\n# getcomponentbit\n\n▸ getcomponentbit(): number\n\n# returns\n\nnumber\n\nthe component bit.\n\n# defined in\n\nsrc/core/component.ts:13",charsets:{}},{title:"Interface: NoArgsComponentConstructor",frontmatter:{},regularPath:"/api/interfaces/NoArgsComponentConstructor.html",relativePath:"api/interfaces/NoArgsComponentConstructor.md",key:"v-8b55a88e",path:"/api/interfaces/NoArgsComponentConstructor.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:124},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:270},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:292},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:325},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:292},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:63},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:325},{level:3,title:"getComponentBit",slug:"getcomponentbit",normalizedTitle:"getcomponentbit",charIndex:337}],headersStr:"Type parameters Table of contents Constructors Methods Constructors constructor Methods getComponentBit",content:"# Interface: NoArgsComponentConstructor<T>\n\nAn interface for a constructor of a component that doesn't need parameters.\n\n\n# Type parameters\n\nNAME   TYPE                            DESCRIPTION\nT      extends Component = Component   The class the constructor creates.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Methods\n\n * getComponentBit\n\n\n# Constructors\n\n\n# constructor\n\n• new NoArgsComponentConstructor()\n\nThe constructor function.\n\n# Defined in\n\nsrc/core/Component.ts:23\n\n\n# Methods\n\n\n# getComponentBit\n\n▸ getComponentBit(): number\n\n# Returns\n\nnumber\n\nThe component bit.\n\n# Defined in\n\nsrc/core/Component.ts:26",normalizedContent:"# interface: noargscomponentconstructor<t>\n\nan interface for a constructor of a component that doesn't need parameters.\n\n\n# type parameters\n\nname   type                            description\nt      extends component = component   the class the constructor creates.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# methods\n\n * getcomponentbit\n\n\n# constructors\n\n\n# constructor\n\n• new noargscomponentconstructor()\n\nthe constructor function.\n\n# defined in\n\nsrc/core/component.ts:23\n\n\n# methods\n\n\n# getcomponentbit\n\n▸ getcomponentbit(): number\n\n# returns\n\nnumber\n\nthe component bit.\n\n# defined in\n\nsrc/core/component.ts:26",charsets:{}},{title:"Interface: PoolAllocatorConfig",frontmatter:{},regularPath:"/api/interfaces/PoolAllocatorConfig.html",relativePath:"api/interfaces/PoolAllocatorConfig.md",key:"v-728ee3e3",path:"/api/interfaces/PoolAllocatorConfig.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:85},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:107},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:107},{level:3,title:"maxComponentPerType",slug:"maxcomponentpertype",normalizedTitle:"maxcomponentpertype",charIndex:122},{level:3,title:"maxComponentsDefault",slug:"maxcomponentsdefault",normalizedTitle:"maxcomponentsdefault",charIndex:145},{level:3,title:"maxEntities",slug:"maxentities",normalizedTitle:"maxentities",charIndex:169}],headersStr:"Table of contents Properties Properties maxComponentPerType maxComponentsDefault maxEntities",content:"# Interface: PoolAllocatorConfig\n\nA configuration object for the pool allocator.\n\n\n# Table of contents\n\n\n# Properties\n\n * maxComponentPerType\n * maxComponentsDefault\n * maxEntities\n\n\n# Properties\n\n\n# maxComponentPerType\n\n• Optional maxComponentPerType: [clazz: NoArgsComponentConstructor<Component>, max: number][]\n\nThe maximum number of free components per type to store.\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:15\n\n----------------------------------------\n\n\n# maxComponentsDefault\n\n• Optional maxComponentsDefault: number\n\nThe default maximum number of free components per type to store.\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:13\n\n----------------------------------------\n\n\n# maxEntities\n\n• Optional maxEntities: number\n\nThe maximum number of free entities to store.\n\n# Defined in\n\nsrc/pooling/PoolAllocator.ts:11",normalizedContent:"# interface: poolallocatorconfig\n\na configuration object for the pool allocator.\n\n\n# table of contents\n\n\n# properties\n\n * maxcomponentpertype\n * maxcomponentsdefault\n * maxentities\n\n\n# properties\n\n\n# maxcomponentpertype\n\n• optional maxcomponentpertype: [clazz: noargscomponentconstructor<component>, max: number][]\n\nthe maximum number of free components per type to store.\n\n# defined in\n\nsrc/pooling/poolallocator.ts:15\n\n----------------------------------------\n\n\n# maxcomponentsdefault\n\n• optional maxcomponentsdefault: number\n\nthe default maximum number of free components per type to store.\n\n# defined in\n\nsrc/pooling/poolallocator.ts:13\n\n----------------------------------------\n\n\n# maxentities\n\n• optional maxentities: number\n\nthe maximum number of free entities to store.\n\n# defined in\n\nsrc/pooling/poolallocator.ts:11",charsets:{}},{title:"Interface: Poolable",frontmatter:{},regularPath:"/api/interfaces/Poolable.html",relativePath:"api/interfaces/Poolable.md",key:"v-bf399a4e",path:"/api/interfaces/Poolable.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:112},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:134},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:134},{level:3,title:"reset",slug:"reset",normalizedTitle:"reset",charIndex:69}],headersStr:"Table of contents Methods Methods reset",content:"# Interface: Poolable\n\nObjects implementing this interface will have reset called when passed to Pool.free.\n\n\n# Table of contents\n\n\n# Methods\n\n * reset\n\n\n# Methods\n\n\n# reset\n\n▸ Optional reset(): void\n\nResets the object for reuse. Object references should be nulled/undefined and fields may be set to default values.\n\n# Returns\n\nvoid\n\n# Defined in\n\nsrc/pooling/Pool.ts:6",normalizedContent:"# interface: poolable\n\nobjects implementing this interface will have reset called when passed to pool.free.\n\n\n# table of contents\n\n\n# methods\n\n * reset\n\n\n# methods\n\n\n# reset\n\n▸ optional reset(): void\n\nresets the object for reuse. object references should be nulled/undefined and fields may be set to default values.\n\n# returns\n\nvoid\n\n# defined in\n\nsrc/pooling/pool.ts:6",charsets:{}},{title:"Interface: ReadonlyInt32Array",frontmatter:{},regularPath:"/api/interfaces/ReadonlyInt32Array.html",relativePath:"api/interfaces/ReadonlyInt32Array.md",key:"v-3bd1050e",path:"/api/interfaces/ReadonlyInt32Array.html",headers:[{level:2,title:"Hierarchy",slug:"hierarchy",normalizedTitle:"hierarchy",charIndex:36},{level:2,title:"Indexable",slug:"indexable",normalizedTitle:"indexable",charIndex:151},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:188},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:210},{level:3,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:312},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:210},{level:3,title:"BYTES_PER_ELEMENT",slug:"bytes-per-element",normalizedTitle:"bytes_per_element",charIndex:225},{level:3,title:"[toStringTag]",slug:"tostringtag",normalizedTitle:"[tostringtag]",charIndex:246},{level:3,title:"buffer",slug:"buffer",normalizedTitle:"buffer",charIndex:263},{level:3,title:"byteLength",slug:"bytelength",normalizedTitle:"bytelength",charIndex:273},{level:3,title:"byteOffset",slug:"byteoffset",normalizedTitle:"byteoffset",charIndex:287},{level:3,title:"length",slug:"length",normalizedTitle:"length",charIndex:301},{level:2,title:"Methods",slug:"methods-2",normalizedTitle:"methods",charIndex:312},{level:3,title:"[iterator]",slug:"iterator",normalizedTitle:"[iterator]",charIndex:324},{level:3,title:"entries",slug:"entries",normalizedTitle:"entries",charIndex:338},{level:3,title:"every",slug:"every",normalizedTitle:"every",charIndex:349},{level:3,title:"filter",slug:"filter",normalizedTitle:"filter",charIndex:358},{level:3,title:"find",slug:"find",normalizedTitle:"find",charIndex:368},{level:3,title:"findIndex",slug:"findindex",normalizedTitle:"findindex",charIndex:376},{level:3,title:"forEach",slug:"foreach",normalizedTitle:"foreach",charIndex:389},{level:3,title:"includes",slug:"includes",normalizedTitle:"includes",charIndex:400},{level:3,title:"indexOf",slug:"indexof",normalizedTitle:"indexof",charIndex:412},{level:3,title:"join",slug:"join",normalizedTitle:"join",charIndex:423},{level:3,title:"keys",slug:"keys",normalizedTitle:"keys",charIndex:431},{level:3,title:"lastIndexOf",slug:"lastindexof",normalizedTitle:"lastindexof",charIndex:439},{level:3,title:"map",slug:"map",normalizedTitle:"map",charIndex:454},{level:3,title:"reduce",slug:"reduce",normalizedTitle:"reduce",charIndex:461},{level:3,title:"reduceRight",slug:"reduceright",normalizedTitle:"reduceright",charIndex:471},{level:3,title:"slice",slug:"slice",normalizedTitle:"slice",charIndex:486},{level:3,title:"some",slug:"some",normalizedTitle:"some",charIndex:495},{level:3,title:"subarray",slug:"subarray",normalizedTitle:"subarray",charIndex:503},{level:3,title:"toLocaleString",slug:"tolocalestring",normalizedTitle:"tolocalestring",charIndex:515},{level:3,title:"toString",slug:"tostring",normalizedTitle:"tostring",charIndex:247},{level:3,title:"valueOf",slug:"valueof",normalizedTitle:"valueof",charIndex:545},{level:3,title:"values",slug:"values",normalizedTitle:"values",charIndex:556}],headersStr:"Hierarchy Indexable Table of contents Properties Methods Properties BYTES_PER_ELEMENT [toStringTag] buffer byteLength byteOffset length Methods [iterator] entries every filter find findIndex forEach includes indexOf join keys lastIndexOf map reduce reduceRight slice some subarray toLocaleString toString valueOf values",content:'# Interface: ReadonlyInt32Array\n\n\n# Hierarchy\n\n * Omit<Int32Array, "copyWithin" | "fill" | "reverse" | "set" | "sort">\n   \n   ↳ ReadonlyInt32Array\n\n\n# Indexable\n\n▪ [n: number]: number\n\n\n# Table of contents\n\n\n# Properties\n\n * BYTES_PER_ELEMENT\n * [toStringTag]\n * buffer\n * byteLength\n * byteOffset\n * length\n\n\n# Methods\n\n * [iterator]\n * entries\n * every\n * filter\n * find\n * findIndex\n * forEach\n * includes\n * indexOf\n * join\n * keys\n * lastIndexOf\n * map\n * reduce\n * reduceRight\n * slice\n * some\n * subarray\n * toLocaleString\n * toString\n * valueOf\n * values\n\n\n# Properties\n\n\n# BYTES_PER_ELEMENT\n\n• Readonly BYTES_PER_ELEMENT: number\n\nThe size in bytes of each element in the array.\n\n# Inherited from\n\nOmit.BYTES_PER_ELEMENT\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3169\n\n----------------------------------------\n\n\n# [toStringTag]\n\n• Readonly [toStringTag]: "Int32Array"\n\n# Inherited from\n\nOmit.__@toStringTag@26\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:298\n\n----------------------------------------\n\n\n# buffer\n\n• Readonly buffer: ArrayBufferLike\n\nThe ArrayBuffer instance referenced by the array.\n\n# Inherited from\n\nOmit.buffer\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3174\n\n----------------------------------------\n\n\n# byteLength\n\n• Readonly byteLength: number\n\nThe length in bytes of the array.\n\n# Inherited from\n\nOmit.byteLength\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3179\n\n----------------------------------------\n\n\n# byteOffset\n\n• Readonly byteOffset: number\n\nThe offset in bytes of the array.\n\n# Inherited from\n\nOmit.byteOffset\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3184\n\n----------------------------------------\n\n\n# length\n\n• Readonly length: number\n\nThe length of the array.\n\n# Inherited from\n\nOmit.length\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3283\n\n\n# Methods\n\n\n# [iterator]\n\n▸ [iterator](): IterableIterator<number>\n\n# Returns\n\nIterableIterator<number>\n\n# Inherited from\n\nOmit.__@iterator@83\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:396\n\n----------------------------------------\n\n\n# entries\n\n▸ entries(): IterableIterator<[number, number]>\n\nReturns an array of key, value pairs for every entry in the array\n\n# Returns\n\nIterableIterator<[number, number]>\n\n# Inherited from\n\nOmit.entries\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:400\n\n----------------------------------------\n\n\n# every\n\n▸ every(predicate, thisArg?): boolean\n\nDetermines whether all the members of an array satisfy the specified test.\n\n# Parameters\n\nNAME        TYPE                                                           DESCRIPTION\npredicate   (value: number, index: number, array: Int32Array) => unknown   A function that accepts up to three arguments. The every\n                                                                           method calls the predicate function for each element in the\n                                                                           array until the predicate returns a value which is coercible\n                                                                           to the Boolean value false, or until the end of the array.\nthisArg?    any                                                            An object to which the this keyword can refer in the\n                                                                           predicate function. If thisArg is omitted, undefined is used\n                                                                           as the this value.\n\n# Returns\n\nboolean\n\n# Inherited from\n\nOmit.every\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3205\n\n----------------------------------------\n\n\n# filter\n\n▸ filter(predicate, thisArg?): Int32Array\n\nReturns the elements of an array that meet the condition specified in a callback function.\n\n# Parameters\n\nNAME        TYPE                                                       DESCRIPTION\npredicate   (value: number, index: number, array: Int32Array) => any   A function that accepts up to three arguments. The filter\n                                                                       method calls the predicate function one time for each\n                                                                       element in the array.\nthisArg?    any                                                        An object to which the this keyword can refer in the\n                                                                       predicate function. If thisArg is omitted, undefined is used\n                                                                       as the this value.\n\n# Returns\n\nInt32Array\n\n# Inherited from\n\nOmit.filter\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3224\n\n----------------------------------------\n\n\n# find\n\n▸ find(predicate, thisArg?): undefined | number\n\nReturns the value of the first element in the array where predicate is true, and undefined otherwise.\n\n# Parameters\n\nNAME        TYPE                                                         DESCRIPTION\npredicate   (value: number, index: number, obj: Int32Array) => boolean   find calls predicate once for each element of the array, in\n                                                                         ascending order, until it finds one where predicate returns\n                                                                         true. If such an element is found, find immediately returns\n                                                                         that element value. Otherwise, find returns undefined.\nthisArg?    any                                                          If provided, it will be used as the this value for each\n                                                                         invocation of predicate. If it is not provided, undefined is\n                                                                         used instead.\n\n# Returns\n\nundefined | number\n\n# Inherited from\n\nOmit.find\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3235\n\n----------------------------------------\n\n\n# findIndex\n\n▸ findIndex(predicate, thisArg?): number\n\nReturns the index of the first element in the array where predicate is true, and -1 otherwise.\n\n# Parameters\n\nNAME        TYPE                                                         DESCRIPTION\npredicate   (value: number, index: number, obj: Int32Array) => boolean   find calls predicate once for each element of the array, in\n                                                                         ascending order, until it finds one where predicate returns\n                                                                         true. If such an element is found, findIndex immediately\n                                                                         returns that element index. Otherwise, findIndex returns -1.\nthisArg?    any                                                          If provided, it will be used as the this value for each\n                                                                         invocation of predicate. If it is not provided, undefined is\n                                                                         used instead.\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.findIndex\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3246\n\n----------------------------------------\n\n\n# forEach\n\n▸ forEach(callbackfn, thisArg?): void\n\nPerforms the specified action for each element in an array.\n\n# Parameters\n\nNAME         TYPE                                                        DESCRIPTION\ncallbackfn   (value: number, index: number, array: Int32Array) => void   A function that accepts up to three arguments. forEach calls\n                                                                         the callbackfn function one time for each element in the\n                                                                         array.\nthisArg?     any                                                         An object to which the this keyword can refer in the\n                                                                         callbackfn function. If thisArg is omitted, undefined is\n                                                                         used as the this value.\n\n# Returns\n\nvoid\n\n# Inherited from\n\nOmit.forEach\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3255\n\n----------------------------------------\n\n\n# includes\n\n▸ includes(searchElement, fromIndex?): boolean\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.\n\n# Parameters\n\nNAME            TYPE     DESCRIPTION\nsearchElement   number   The element to search for.\nfromIndex?      number   The position in this array at which to begin searching for\n                         searchElement.\n\n# Returns\n\nboolean\n\n# Inherited from\n\nOmit.includes\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es2016.array.include.d.ts:90\n\n----------------------------------------\n\n\n# indexOf\n\n▸ indexOf(searchElement, fromIndex?): number\n\nReturns the index of the first occurrence of a value in an array.\n\n# Parameters\n\nNAME            TYPE     DESCRIPTION\nsearchElement   number   The value to locate in the array.\nfromIndex?      number   The array index at which to begin the search. If fromIndex\n                         is omitted, the search starts at index 0.\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.indexOf\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3263\n\n----------------------------------------\n\n\n# join\n\n▸ join(separator?): string\n\nAdds all the elements of an array separated by the specified separator string.\n\n# Parameters\n\nNAME         TYPE     DESCRIPTION\nseparator?   string   A string used to separate one element of an array from the\n                      next in the resulting String. If omitted, the array elements\n                      are separated with a comma.\n\n# Returns\n\nstring\n\n# Inherited from\n\nOmit.join\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3270\n\n----------------------------------------\n\n\n# keys\n\n▸ keys(): IterableIterator<number>\n\nReturns an list of keys in the array\n\n# Returns\n\nIterableIterator<number>\n\n# Inherited from\n\nOmit.keys\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:404\n\n----------------------------------------\n\n\n# lastIndexOf\n\n▸ lastIndexOf(searchElement, fromIndex?): number\n\nReturns the index of the last occurrence of a value in an array.\n\n# Parameters\n\nNAME            TYPE     DESCRIPTION\nsearchElement   number   The value to locate in the array.\nfromIndex?      number   The array index at which to begin the search. If fromIndex\n                         is omitted, the search starts at index 0.\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.lastIndexOf\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3278\n\n----------------------------------------\n\n\n# map\n\n▸ map(callbackfn, thisArg?): Int32Array\n\nCalls a defined callback function on each element of an array, and returns an array that contains the results.\n\n# Parameters\n\nNAME         TYPE                                                          DESCRIPTION\ncallbackfn   (value: number, index: number, array: Int32Array) => number   A function that accepts up to three arguments. The map\n                                                                           method calls the callbackfn function one time for each\n                                                                           element in the array.\nthisArg?     any                                                           An object to which the this keyword can refer in the\n                                                                           callbackfn function. If thisArg is omitted, undefined is\n                                                                           used as the this value.\n\n# Returns\n\nInt32Array\n\n# Inherited from\n\nOmit.map\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3293\n\n----------------------------------------\n\n\n# reduce\n\n▸ reduce(callbackfn): number\n\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# Parameters\n\nNAME         TYPE                                                          DESCRIPTION\ncallbackfn   (previousValue: number, currentValue: number, currentIndex:   A function that accepts up to four arguments. The reduce\n             number, array: Int32Array) => number                          method calls the callbackfn function one time for each\n                                                                           element in the array.\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.reduce\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3305\n\n▸ reduce(callbackfn, initialValue): number\n\n# Parameters\n\nNAME           TYPE\ncallbackfn     (previousValue: number, currentValue: number, currentIndex:\n               number, array: Int32Array) => number\ninitialValue   number\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.reduce\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3306\n\n▸ reduce<U>(callbackfn, initialValue): U\n\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# Type parameters\n\nNAME\nU\n\n# Parameters\n\nNAME           TYPE                                                     DESCRIPTION\ncallbackfn     (previousValue: U, currentValue: number, currentIndex:   A function that accepts up to four arguments. The reduce\n               number, array: Int32Array) => U                          method calls the callbackfn function one time for each\n                                                                        element in the array.\ninitialValue   U                                                        If initialValue is specified, it is used as the initial\n                                                                        value to start the accumulation. The first call to the\n                                                                        callbackfn function provides this value as an argument\n                                                                        instead of an array value.\n\n# Returns\n\nU\n\n# Inherited from\n\nOmit.reduce\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3318\n\n----------------------------------------\n\n\n# reduceRight\n\n▸ reduceRight(callbackfn): number\n\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# Parameters\n\nNAME         TYPE                                                          DESCRIPTION\ncallbackfn   (previousValue: number, currentValue: number, currentIndex:   A function that accepts up to four arguments. The\n             number, array: Int32Array) => number                          reduceRight method calls the callbackfn function one time\n                                                                           for each element in the array.\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.reduceRight\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3330\n\n▸ reduceRight(callbackfn, initialValue): number\n\n# Parameters\n\nNAME           TYPE\ncallbackfn     (previousValue: number, currentValue: number, currentIndex:\n               number, array: Int32Array) => number\ninitialValue   number\n\n# Returns\n\nnumber\n\n# Inherited from\n\nOmit.reduceRight\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3331\n\n▸ reduceRight<U>(callbackfn, initialValue): U\n\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# Type parameters\n\nNAME\nU\n\n# Parameters\n\nNAME           TYPE                                                     DESCRIPTION\ncallbackfn     (previousValue: U, currentValue: number, currentIndex:   A function that accepts up to four arguments. The\n               number, array: Int32Array) => U                          reduceRight method calls the callbackfn function one time\n                                                                        for each element in the array.\ninitialValue   U                                                        If initialValue is specified, it is used as the initial\n                                                                        value to start the accumulation. The first call to the\n                                                                        callbackfn function provides this value as an argument\n                                                                        instead of an array value.\n\n# Returns\n\nU\n\n# Inherited from\n\nOmit.reduceRight\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3343\n\n----------------------------------------\n\n\n# slice\n\n▸ slice(start?, end?): Int32Array\n\nReturns a section of an array.\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nstart?   number   The beginning of the specified portion of the array.\nend?     number   The end of the specified portion of the array. This is\n                  exclusive of the element at the index \'end\'.\n\n# Returns\n\nInt32Array\n\n# Inherited from\n\nOmit.slice\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3362\n\n----------------------------------------\n\n\n# some\n\n▸ some(predicate, thisArg?): boolean\n\nDetermines whether the specified callback function returns true for any element of an array.\n\n# Parameters\n\nNAME        TYPE                                                           DESCRIPTION\npredicate   (value: number, index: number, array: Int32Array) => unknown   A function that accepts up to three arguments. The some\n                                                                           method calls the predicate function for each element in the\n                                                                           array until the predicate returns a value which is coercible\n                                                                           to the Boolean value true, or until the end of the array.\nthisArg?    any                                                            An object to which the this keyword can refer in the\n                                                                           predicate function. If thisArg is omitted, undefined is used\n                                                                           as the this value.\n\n# Returns\n\nboolean\n\n# Inherited from\n\nOmit.some\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3372\n\n----------------------------------------\n\n\n# subarray\n\n▸ subarray(begin?, end?): Int32Array\n\nGets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements at begin, inclusive, up to end, exclusive.\n\n# Parameters\n\nNAME     TYPE     DESCRIPTION\nbegin?   number   The index of the beginning of the array.\nend?     number   The index of the end of the array.\n\n# Returns\n\nInt32Array\n\n# Inherited from\n\nOmit.subarray\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3391\n\n----------------------------------------\n\n\n# toLocaleString\n\n▸ toLocaleString(): string\n\nConverts a number to a string by using the current locale.\n\n# Returns\n\nstring\n\n# Inherited from\n\nOmit.toLocaleString\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3396\n\n----------------------------------------\n\n\n# toString\n\n▸ toString(): string\n\nReturns a string representation of an array.\n\n# Returns\n\nstring\n\n# Inherited from\n\nOmit.toString\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3401\n\n----------------------------------------\n\n\n# valueOf\n\n▸ valueOf(): Int32Array\n\nReturns the primitive value of the specified object.\n\n# Returns\n\nInt32Array\n\n# Inherited from\n\nOmit.valueOf\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3404\n\n----------------------------------------\n\n\n# values\n\n▸ values(): IterableIterator<number>\n\nReturns an list of values in the array\n\n# Returns\n\nIterableIterator<number>\n\n# Inherited from\n\nOmit.values\n\n# Defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:408',normalizedContent:'# interface: readonlyint32array\n\n\n# hierarchy\n\n * omit<int32array, "copywithin" | "fill" | "reverse" | "set" | "sort">\n   \n   ↳ readonlyint32array\n\n\n# indexable\n\n▪ [n: number]: number\n\n\n# table of contents\n\n\n# properties\n\n * bytes_per_element\n * [tostringtag]\n * buffer\n * bytelength\n * byteoffset\n * length\n\n\n# methods\n\n * [iterator]\n * entries\n * every\n * filter\n * find\n * findindex\n * foreach\n * includes\n * indexof\n * join\n * keys\n * lastindexof\n * map\n * reduce\n * reduceright\n * slice\n * some\n * subarray\n * tolocalestring\n * tostring\n * valueof\n * values\n\n\n# properties\n\n\n# bytes_per_element\n\n• readonly bytes_per_element: number\n\nthe size in bytes of each element in the array.\n\n# inherited from\n\nomit.bytes_per_element\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3169\n\n----------------------------------------\n\n\n# [tostringtag]\n\n• readonly [tostringtag]: "int32array"\n\n# inherited from\n\nomit.__@tostringtag@26\n\n# defined in\n\nnode_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:298\n\n----------------------------------------\n\n\n# buffer\n\n• readonly buffer: arraybufferlike\n\nthe arraybuffer instance referenced by the array.\n\n# inherited from\n\nomit.buffer\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3174\n\n----------------------------------------\n\n\n# bytelength\n\n• readonly bytelength: number\n\nthe length in bytes of the array.\n\n# inherited from\n\nomit.bytelength\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3179\n\n----------------------------------------\n\n\n# byteoffset\n\n• readonly byteoffset: number\n\nthe offset in bytes of the array.\n\n# inherited from\n\nomit.byteoffset\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3184\n\n----------------------------------------\n\n\n# length\n\n• readonly length: number\n\nthe length of the array.\n\n# inherited from\n\nomit.length\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3283\n\n\n# methods\n\n\n# [iterator]\n\n▸ [iterator](): iterableiterator<number>\n\n# returns\n\niterableiterator<number>\n\n# inherited from\n\nomit.__@iterator@83\n\n# defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:396\n\n----------------------------------------\n\n\n# entries\n\n▸ entries(): iterableiterator<[number, number]>\n\nreturns an array of key, value pairs for every entry in the array\n\n# returns\n\niterableiterator<[number, number]>\n\n# inherited from\n\nomit.entries\n\n# defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:400\n\n----------------------------------------\n\n\n# every\n\n▸ every(predicate, thisarg?): boolean\n\ndetermines whether all the members of an array satisfy the specified test.\n\n# parameters\n\nname        type                                                           description\npredicate   (value: number, index: number, array: int32array) => unknown   a function that accepts up to three arguments. the every\n                                                                           method calls the predicate function for each element in the\n                                                                           array until the predicate returns a value which is coercible\n                                                                           to the boolean value false, or until the end of the array.\nthisarg?    any                                                            an object to which the this keyword can refer in the\n                                                                           predicate function. if thisarg is omitted, undefined is used\n                                                                           as the this value.\n\n# returns\n\nboolean\n\n# inherited from\n\nomit.every\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3205\n\n----------------------------------------\n\n\n# filter\n\n▸ filter(predicate, thisarg?): int32array\n\nreturns the elements of an array that meet the condition specified in a callback function.\n\n# parameters\n\nname        type                                                       description\npredicate   (value: number, index: number, array: int32array) => any   a function that accepts up to three arguments. the filter\n                                                                       method calls the predicate function one time for each\n                                                                       element in the array.\nthisarg?    any                                                        an object to which the this keyword can refer in the\n                                                                       predicate function. if thisarg is omitted, undefined is used\n                                                                       as the this value.\n\n# returns\n\nint32array\n\n# inherited from\n\nomit.filter\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3224\n\n----------------------------------------\n\n\n# find\n\n▸ find(predicate, thisarg?): undefined | number\n\nreturns the value of the first element in the array where predicate is true, and undefined otherwise.\n\n# parameters\n\nname        type                                                         description\npredicate   (value: number, index: number, obj: int32array) => boolean   find calls predicate once for each element of the array, in\n                                                                         ascending order, until it finds one where predicate returns\n                                                                         true. if such an element is found, find immediately returns\n                                                                         that element value. otherwise, find returns undefined.\nthisarg?    any                                                          if provided, it will be used as the this value for each\n                                                                         invocation of predicate. if it is not provided, undefined is\n                                                                         used instead.\n\n# returns\n\nundefined | number\n\n# inherited from\n\nomit.find\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3235\n\n----------------------------------------\n\n\n# findindex\n\n▸ findindex(predicate, thisarg?): number\n\nreturns the index of the first element in the array where predicate is true, and -1 otherwise.\n\n# parameters\n\nname        type                                                         description\npredicate   (value: number, index: number, obj: int32array) => boolean   find calls predicate once for each element of the array, in\n                                                                         ascending order, until it finds one where predicate returns\n                                                                         true. if such an element is found, findindex immediately\n                                                                         returns that element index. otherwise, findindex returns -1.\nthisarg?    any                                                          if provided, it will be used as the this value for each\n                                                                         invocation of predicate. if it is not provided, undefined is\n                                                                         used instead.\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.findindex\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3246\n\n----------------------------------------\n\n\n# foreach\n\n▸ foreach(callbackfn, thisarg?): void\n\nperforms the specified action for each element in an array.\n\n# parameters\n\nname         type                                                        description\ncallbackfn   (value: number, index: number, array: int32array) => void   a function that accepts up to three arguments. foreach calls\n                                                                         the callbackfn function one time for each element in the\n                                                                         array.\nthisarg?     any                                                         an object to which the this keyword can refer in the\n                                                                         callbackfn function. if thisarg is omitted, undefined is\n                                                                         used as the this value.\n\n# returns\n\nvoid\n\n# inherited from\n\nomit.foreach\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3255\n\n----------------------------------------\n\n\n# includes\n\n▸ includes(searchelement, fromindex?): boolean\n\ndetermines whether an array includes a certain element, returning true or false as appropriate.\n\n# parameters\n\nname            type     description\nsearchelement   number   the element to search for.\nfromindex?      number   the position in this array at which to begin searching for\n                         searchelement.\n\n# returns\n\nboolean\n\n# inherited from\n\nomit.includes\n\n# defined in\n\nnode_modules/typescript/lib/lib.es2016.array.include.d.ts:90\n\n----------------------------------------\n\n\n# indexof\n\n▸ indexof(searchelement, fromindex?): number\n\nreturns the index of the first occurrence of a value in an array.\n\n# parameters\n\nname            type     description\nsearchelement   number   the value to locate in the array.\nfromindex?      number   the array index at which to begin the search. if fromindex\n                         is omitted, the search starts at index 0.\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.indexof\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3263\n\n----------------------------------------\n\n\n# join\n\n▸ join(separator?): string\n\nadds all the elements of an array separated by the specified separator string.\n\n# parameters\n\nname         type     description\nseparator?   string   a string used to separate one element of an array from the\n                      next in the resulting string. if omitted, the array elements\n                      are separated with a comma.\n\n# returns\n\nstring\n\n# inherited from\n\nomit.join\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3270\n\n----------------------------------------\n\n\n# keys\n\n▸ keys(): iterableiterator<number>\n\nreturns an list of keys in the array\n\n# returns\n\niterableiterator<number>\n\n# inherited from\n\nomit.keys\n\n# defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:404\n\n----------------------------------------\n\n\n# lastindexof\n\n▸ lastindexof(searchelement, fromindex?): number\n\nreturns the index of the last occurrence of a value in an array.\n\n# parameters\n\nname            type     description\nsearchelement   number   the value to locate in the array.\nfromindex?      number   the array index at which to begin the search. if fromindex\n                         is omitted, the search starts at index 0.\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.lastindexof\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3278\n\n----------------------------------------\n\n\n# map\n\n▸ map(callbackfn, thisarg?): int32array\n\ncalls a defined callback function on each element of an array, and returns an array that contains the results.\n\n# parameters\n\nname         type                                                          description\ncallbackfn   (value: number, index: number, array: int32array) => number   a function that accepts up to three arguments. the map\n                                                                           method calls the callbackfn function one time for each\n                                                                           element in the array.\nthisarg?     any                                                           an object to which the this keyword can refer in the\n                                                                           callbackfn function. if thisarg is omitted, undefined is\n                                                                           used as the this value.\n\n# returns\n\nint32array\n\n# inherited from\n\nomit.map\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3293\n\n----------------------------------------\n\n\n# reduce\n\n▸ reduce(callbackfn): number\n\ncalls the specified callback function for all the elements in an array. the return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# parameters\n\nname         type                                                          description\ncallbackfn   (previousvalue: number, currentvalue: number, currentindex:   a function that accepts up to four arguments. the reduce\n             number, array: int32array) => number                          method calls the callbackfn function one time for each\n                                                                           element in the array.\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.reduce\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3305\n\n▸ reduce(callbackfn, initialvalue): number\n\n# parameters\n\nname           type\ncallbackfn     (previousvalue: number, currentvalue: number, currentindex:\n               number, array: int32array) => number\ninitialvalue   number\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.reduce\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3306\n\n▸ reduce<u>(callbackfn, initialvalue): u\n\ncalls the specified callback function for all the elements in an array. the return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# type parameters\n\nname\nu\n\n# parameters\n\nname           type                                                     description\ncallbackfn     (previousvalue: u, currentvalue: number, currentindex:   a function that accepts up to four arguments. the reduce\n               number, array: int32array) => u                          method calls the callbackfn function one time for each\n                                                                        element in the array.\ninitialvalue   u                                                        if initialvalue is specified, it is used as the initial\n                                                                        value to start the accumulation. the first call to the\n                                                                        callbackfn function provides this value as an argument\n                                                                        instead of an array value.\n\n# returns\n\nu\n\n# inherited from\n\nomit.reduce\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3318\n\n----------------------------------------\n\n\n# reduceright\n\n▸ reduceright(callbackfn): number\n\ncalls the specified callback function for all the elements in an array, in descending order. the return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# parameters\n\nname         type                                                          description\ncallbackfn   (previousvalue: number, currentvalue: number, currentindex:   a function that accepts up to four arguments. the\n             number, array: int32array) => number                          reduceright method calls the callbackfn function one time\n                                                                           for each element in the array.\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.reduceright\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3330\n\n▸ reduceright(callbackfn, initialvalue): number\n\n# parameters\n\nname           type\ncallbackfn     (previousvalue: number, currentvalue: number, currentindex:\n               number, array: int32array) => number\ninitialvalue   number\n\n# returns\n\nnumber\n\n# inherited from\n\nomit.reduceright\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3331\n\n▸ reduceright<u>(callbackfn, initialvalue): u\n\ncalls the specified callback function for all the elements in an array, in descending order. the return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\n# type parameters\n\nname\nu\n\n# parameters\n\nname           type                                                     description\ncallbackfn     (previousvalue: u, currentvalue: number, currentindex:   a function that accepts up to four arguments. the\n               number, array: int32array) => u                          reduceright method calls the callbackfn function one time\n                                                                        for each element in the array.\ninitialvalue   u                                                        if initialvalue is specified, it is used as the initial\n                                                                        value to start the accumulation. the first call to the\n                                                                        callbackfn function provides this value as an argument\n                                                                        instead of an array value.\n\n# returns\n\nu\n\n# inherited from\n\nomit.reduceright\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3343\n\n----------------------------------------\n\n\n# slice\n\n▸ slice(start?, end?): int32array\n\nreturns a section of an array.\n\n# parameters\n\nname     type     description\nstart?   number   the beginning of the specified portion of the array.\nend?     number   the end of the specified portion of the array. this is\n                  exclusive of the element at the index \'end\'.\n\n# returns\n\nint32array\n\n# inherited from\n\nomit.slice\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3362\n\n----------------------------------------\n\n\n# some\n\n▸ some(predicate, thisarg?): boolean\n\ndetermines whether the specified callback function returns true for any element of an array.\n\n# parameters\n\nname        type                                                           description\npredicate   (value: number, index: number, array: int32array) => unknown   a function that accepts up to three arguments. the some\n                                                                           method calls the predicate function for each element in the\n                                                                           array until the predicate returns a value which is coercible\n                                                                           to the boolean value true, or until the end of the array.\nthisarg?    any                                                            an object to which the this keyword can refer in the\n                                                                           predicate function. if thisarg is omitted, undefined is used\n                                                                           as the this value.\n\n# returns\n\nboolean\n\n# inherited from\n\nomit.some\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3372\n\n----------------------------------------\n\n\n# subarray\n\n▸ subarray(begin?, end?): int32array\n\ngets a new int32array view of the arraybuffer store for this array, referencing the elements at begin, inclusive, up to end, exclusive.\n\n# parameters\n\nname     type     description\nbegin?   number   the index of the beginning of the array.\nend?     number   the index of the end of the array.\n\n# returns\n\nint32array\n\n# inherited from\n\nomit.subarray\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3391\n\n----------------------------------------\n\n\n# tolocalestring\n\n▸ tolocalestring(): string\n\nconverts a number to a string by using the current locale.\n\n# returns\n\nstring\n\n# inherited from\n\nomit.tolocalestring\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3396\n\n----------------------------------------\n\n\n# tostring\n\n▸ tostring(): string\n\nreturns a string representation of an array.\n\n# returns\n\nstring\n\n# inherited from\n\nomit.tostring\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3401\n\n----------------------------------------\n\n\n# valueof\n\n▸ valueof(): int32array\n\nreturns the primitive value of the specified object.\n\n# returns\n\nint32array\n\n# inherited from\n\nomit.valueof\n\n# defined in\n\nnode_modules/typescript/lib/lib.es5.d.ts:3404\n\n----------------------------------------\n\n\n# values\n\n▸ values(): iterableiterator<number>\n\nreturns an list of values in the array\n\n# returns\n\niterableiterator<number>\n\n# inherited from\n\nomit.values\n\n# defined in\n\nnode_modules/typescript/lib/lib.es2015.iterable.d.ts:408',charsets:{cjk:!0}},{title:"Interface: SystemConstructor",frontmatter:{},regularPath:"/api/interfaces/SystemConstructor.html",relativePath:"api/interfaces/SystemConstructor.md",key:"v-44fd97ef",path:"/api/interfaces/SystemConstructor.html",headers:[{level:2,title:"Type parameters",slug:"type-parameters",normalizedTitle:"type parameters",charIndex:89},{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:244},{level:3,title:"Constructors",slug:"constructors",normalizedTitle:"constructors",charIndex:266},{level:3,title:"Properties",slug:"properties",normalizedTitle:"properties",charIndex:299},{level:2,title:"Constructors",slug:"constructors-2",normalizedTitle:"constructors",charIndex:266},{level:3,title:"constructor",slug:"constructor",normalizedTitle:"constructor",charIndex:60},{level:2,title:"Properties",slug:"properties-2",normalizedTitle:"properties",charIndex:299},{level:3,title:"name",slug:"name",normalizedTitle:"name",charIndex:314}],headersStr:"Type parameters Table of contents Constructors Properties Constructors constructor Properties name",content:"# Interface: SystemConstructor<TSystem>\n\nAn interface for a constructor of a system.\n\n\n# Type parameters\n\nNAME      TYPE                          DESCRIPTION\nTSystem   extends AbstractSystem<any>   The system class the constructor creates.\n\n\n# Table of contents\n\n\n# Constructors\n\n * constructor\n\n\n# Properties\n\n * name\n\n\n# Constructors\n\n\n# constructor\n\n• new SystemConstructor(...p)\n\nThe constructor function.\n\n# Parameters\n\nNAME   TYPE\n...p   any[]\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:89\n\n\n# Properties\n\n\n# name\n\n• Optional name: string\n\nThe name of the constructor.\n\n# Defined in\n\nsrc/core/AbstractSystem.ts:87",normalizedContent:"# interface: systemconstructor<tsystem>\n\nan interface for a constructor of a system.\n\n\n# type parameters\n\nname      type                          description\ntsystem   extends abstractsystem<any>   the system class the constructor creates.\n\n\n# table of contents\n\n\n# constructors\n\n * constructor\n\n\n# properties\n\n * name\n\n\n# constructors\n\n\n# constructor\n\n• new systemconstructor(...p)\n\nthe constructor function.\n\n# parameters\n\nname   type\n...p   any[]\n\n# defined in\n\nsrc/core/abstractsystem.ts:89\n\n\n# properties\n\n\n# name\n\n• optional name: string\n\nthe name of the constructor.\n\n# defined in\n\nsrc/core/abstractsystem.ts:87",charsets:{}},{title:"typed-ecstasy",frontmatter:{},regularPath:"/api/modules.html",relativePath:"api/modules.md",key:"v-17b7af4e",path:"/api/modules.html",headers:[{level:2,title:"Table of contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:20},{level:3,title:"Classes",slug:"classes",normalizedTitle:"classes",charIndex:42},{level:3,title:"Interfaces",slug:"interfaces",normalizedTitle:"interfaces",charIndex:481},{level:3,title:"Type aliases",slug:"type-aliases",normalizedTitle:"type aliases",charIndex:629},{level:3,title:"Functions",slug:"functions",normalizedTitle:"functions",charIndex:815},{level:2,title:"Type aliases",slug:"type-aliases-2",normalizedTitle:"type aliases",charIndex:629},{level:3,title:"ComponentConfig",slug:"componentconfig",normalizedTitle:"componentconfig",charIndex:646},{level:3,title:"ComponentFactory",slug:"componentfactory",normalizedTitle:"componentfactory",charIndex:665},{level:3,title:"ComponentFactoryRegistry",slug:"componentfactoryregistry",normalizedTitle:"componentfactoryregistry",charIndex:685},{level:3,title:"DelayedOperations",slug:"delayedoperations",normalizedTitle:"delayedoperations",charIndex:713},{level:3,title:"EntityComparator",slug:"entitycomparator",normalizedTitle:"entitycomparator",charIndex:734},{level:3,title:"EntityConfig",slug:"entityconfig",normalizedTitle:"entityconfig",charIndex:754},{level:3,title:"EntityConfigOverrides",slug:"entityconfigoverrides",normalizedTitle:"entityconfigoverrides",charIndex:770},{level:3,title:"ObtainComponent",slug:"obtaincomponent",normalizedTitle:"obtaincomponent",charIndex:795},{level:2,title:"Functions",slug:"functions-2",normalizedTitle:"functions",charIndex:815},{level:3,title:"createComponentFactoryRegistry",slug:"createcomponentfactoryregistry",normalizedTitle:"createcomponentfactoryregistry",charIndex:829},{level:3,title:"createDelayedOperations",slug:"createdelayedoperations",normalizedTitle:"createdelayedoperations",charIndex:863}],headersStr:"Table of contents Classes Interfaces Type aliases Functions Type aliases ComponentConfig ComponentFactory ComponentFactoryRegistry DelayedOperations EntityComparator EntityConfig EntityConfigOverrides ObtainComponent Functions createComponentFactoryRegistry createDelayedOperations",content:"# typed-ecstasy\n\n\n# Table of contents\n\n\n# Classes\n\n * AbstractSystem\n * AbstractSystemManager\n * Allocator\n * Bits\n * Component\n * ComponentBlueprint\n * Engine\n * Entity\n * EntityFactory\n * EntityManager\n * EntitySignal\n * EntitySystem\n * EntitySystemManager\n * Family\n * FamilyBuilder\n * IntervalIteratingSystem\n * IntervalSystem\n * IteratingSystem\n * Pool\n * PoolAllocator\n * ReadonlyBits\n * SortedIteratingSystem\n * SortedSubIteratingSystem\n * SubSystem\n * SubSystemManager\n\n\n# Interfaces\n\n * ComponentConstructor\n * NoArgsComponentConstructor\n * PoolAllocatorConfig\n * Poolable\n * ReadonlyInt32Array\n * SystemConstructor\n\n\n# Type aliases\n\n * ComponentConfig\n * ComponentFactory\n * ComponentFactoryRegistry\n * DelayedOperations\n * EntityComparator\n * EntityConfig\n * EntityConfigOverrides\n * ObtainComponent\n\n\n# Functions\n\n * createComponentFactoryRegistry\n * createDelayedOperations\n\n\n# Type aliases\n\n\n# ComponentConfig\n\nƬ ComponentConfig: Record<string, unknown>\n\n# Defined in\n\nsrc/factory/ComponentFactory.ts:4\n\n----------------------------------------\n\n\n# ComponentFactory\n\nƬ ComponentFactory<T, TContext>: (obtain: ObtainComponent, blueprint: ComponentBlueprint<T>, context: TContext) => Component | null\n\n# Type parameters\n\nNAME       TYPE                      DESCRIPTION\nT          extends ComponentConfig   The component config.\nTContext   TContext                  The context type.\n\n# Type declaration\n\n▸ (obtain, blueprint, context): Component | null\n\nA component factory creates a Component based on the blueprint.\n\n# Parameters\n\nNAME        TYPE                    DESCRIPTION\nobtain      ObtainComponent         A function to obtain a new or reused component instance.\nblueprint   ComponentBlueprint<T>   The blueprint.\ncontext     TContext                The context to use.\n\n# Returns\n\nComponent | null\n\nThe component to add or null if it should not be added.\n\n# Defined in\n\nsrc/factory/ComponentFactory.ts:25\n\n----------------------------------------\n\n\n# ComponentFactoryRegistry\n\nƬ ComponentFactoryRegistry<TEntityConfig, TContext>: Object\n\nA component factory registry.\n\n# Type parameters\n\nNAME            TYPE                   DESCRIPTION\nTEntityConfig   extends EntityConfig   The entity config to use.\nTContext        TContext               The context to be passed to component factories.\n\n# Type declaration\n\nNAME   TYPE\nadd    <TName>(name: TName, factory:\n       ComponentFactory<Exclude<TEntityConfig[TName], undefined>,\n       TContext>) => void\nget    (name: string) => ComponentFactory<any, TContext>\n\n# Defined in\n\nsrc/factory/ComponentFactory.ts:37\n\n----------------------------------------\n\n\n# DelayedOperations\n\nƬ DelayedOperations<T>: T & { shouldDelay: boolean ; processDelayedOperations: () => void }\n\nRepresents the managing class to delay operations.\n\n# Type parameters\n\nNAME   TYPE                                               DESCRIPTION\nT      extends Record<string, (...args: any[]) => void>   The type of the object containing methods to be delayed.\n\n# Defined in\n\nsrc/utils/DelayedOperations.ts:63\n\n----------------------------------------\n\n\n# EntityComparator\n\nƬ EntityComparator: (a: Entity, b: Entity) => number\n\n# Type declaration\n\n▸ (a, b): number\n\nA comparator for entities.\n\nsee Array.sort()\n\n# Parameters\n\nNAME   TYPE\na      Entity\nb      Entity\n\n# Returns\n\nnumber\n\n# Defined in\n\nsrc/systems/SortedIteratingSystem.ts:12\n\n----------------------------------------\n\n\n# EntityConfig\n\nƬ EntityConfig: Record<string, ComponentConfig>\n\n# Defined in\n\nsrc/factory/ComponentFactory.ts:5\n\n----------------------------------------\n\n\n# EntityConfigOverrides\n\nƬ EntityConfigOverrides<T>: { [P in keyof T]?: Partial<T[P]> }\n\nAn object with overrides for each component.\n\n# Type parameters\n\nNAME   DESCRIPTION\nT      The EntityConfig to override.\n\n# Defined in\n\nsrc/factory/EntityFactory.ts:11\n\n----------------------------------------\n\n\n# ObtainComponent\n\nƬ ObtainComponent: <T>(clazz: NoArgsComponentConstructor<T>) => T\n\n# Type declaration\n\n▸ <T>(clazz): T\n\nA function, which creates a component.\n\n# Type parameters\n\nNAME   TYPE                DESCRIPTION\nT      extends Component   The component class to be created.\n\n# Parameters\n\nNAME    TYPE                            DESCRIPTION\nclazz   NoArgsComponentConstructor<T>   The constructor of the component.\n\n# Returns\n\nT\n\n# Defined in\n\nsrc/factory/ComponentFactory.ts:13\n\n\n# Functions\n\n\n# createComponentFactoryRegistry\n\n▸ createComponentFactoryRegistry<T, TContext>(): ComponentFactoryRegistry<T, TContext>\n\nCreate a registry for component factories.\n\n# Type parameters\n\nNAME       TYPE                   DESCRIPTION\nT          extends EntityConfig   The entity config to use.\nTContext   TContext               -\n\n# Returns\n\nComponentFactoryRegistry<T, TContext>\n\nA new registry.\n\n# Defined in\n\nsrc/factory/ComponentFactory.ts:58\n\n----------------------------------------\n\n\n# createDelayedOperations\n\n▸ createDelayedOperations<T>(operations): DelayedOperations<T>\n\nA helper for delaying operations during engine updates.\n\n# Type parameters\n\nNAME   TYPE\nT      extends Record<string, (...args: any[]) => void>\n\n# Parameters\n\nNAME         TYPE   DESCRIPTION\noperations   T      An object containing methods to be delayed.\n\n# Returns\n\nDelayedOperations<T>\n\nA new DelayedOperations instance.\n\n# Defined in\n\nsrc/utils/DelayedOperations.ts:78",normalizedContent:"# typed-ecstasy\n\n\n# table of contents\n\n\n# classes\n\n * abstractsystem\n * abstractsystemmanager\n * allocator\n * bits\n * component\n * componentblueprint\n * engine\n * entity\n * entityfactory\n * entitymanager\n * entitysignal\n * entitysystem\n * entitysystemmanager\n * family\n * familybuilder\n * intervaliteratingsystem\n * intervalsystem\n * iteratingsystem\n * pool\n * poolallocator\n * readonlybits\n * sortediteratingsystem\n * sortedsubiteratingsystem\n * subsystem\n * subsystemmanager\n\n\n# interfaces\n\n * componentconstructor\n * noargscomponentconstructor\n * poolallocatorconfig\n * poolable\n * readonlyint32array\n * systemconstructor\n\n\n# type aliases\n\n * componentconfig\n * componentfactory\n * componentfactoryregistry\n * delayedoperations\n * entitycomparator\n * entityconfig\n * entityconfigoverrides\n * obtaincomponent\n\n\n# functions\n\n * createcomponentfactoryregistry\n * createdelayedoperations\n\n\n# type aliases\n\n\n# componentconfig\n\nƭ componentconfig: record<string, unknown>\n\n# defined in\n\nsrc/factory/componentfactory.ts:4\n\n----------------------------------------\n\n\n# componentfactory\n\nƭ componentfactory<t, tcontext>: (obtain: obtaincomponent, blueprint: componentblueprint<t>, context: tcontext) => component | null\n\n# type parameters\n\nname       type                      description\nt          extends componentconfig   the component config.\ntcontext   tcontext                  the context type.\n\n# type declaration\n\n▸ (obtain, blueprint, context): component | null\n\na component factory creates a component based on the blueprint.\n\n# parameters\n\nname        type                    description\nobtain      obtaincomponent         a function to obtain a new or reused component instance.\nblueprint   componentblueprint<t>   the blueprint.\ncontext     tcontext                the context to use.\n\n# returns\n\ncomponent | null\n\nthe component to add or null if it should not be added.\n\n# defined in\n\nsrc/factory/componentfactory.ts:25\n\n----------------------------------------\n\n\n# componentfactoryregistry\n\nƭ componentfactoryregistry<tentityconfig, tcontext>: object\n\na component factory registry.\n\n# type parameters\n\nname            type                   description\ntentityconfig   extends entityconfig   the entity config to use.\ntcontext        tcontext               the context to be passed to component factories.\n\n# type declaration\n\nname   type\nadd    <tname>(name: tname, factory:\n       componentfactory<exclude<tentityconfig[tname], undefined>,\n       tcontext>) => void\nget    (name: string) => componentfactory<any, tcontext>\n\n# defined in\n\nsrc/factory/componentfactory.ts:37\n\n----------------------------------------\n\n\n# delayedoperations\n\nƭ delayedoperations<t>: t & { shoulddelay: boolean ; processdelayedoperations: () => void }\n\nrepresents the managing class to delay operations.\n\n# type parameters\n\nname   type                                               description\nt      extends record<string, (...args: any[]) => void>   the type of the object containing methods to be delayed.\n\n# defined in\n\nsrc/utils/delayedoperations.ts:63\n\n----------------------------------------\n\n\n# entitycomparator\n\nƭ entitycomparator: (a: entity, b: entity) => number\n\n# type declaration\n\n▸ (a, b): number\n\na comparator for entities.\n\nsee array.sort()\n\n# parameters\n\nname   type\na      entity\nb      entity\n\n# returns\n\nnumber\n\n# defined in\n\nsrc/systems/sortediteratingsystem.ts:12\n\n----------------------------------------\n\n\n# entityconfig\n\nƭ entityconfig: record<string, componentconfig>\n\n# defined in\n\nsrc/factory/componentfactory.ts:5\n\n----------------------------------------\n\n\n# entityconfigoverrides\n\nƭ entityconfigoverrides<t>: { [p in keyof t]?: partial<t[p]> }\n\nan object with overrides for each component.\n\n# type parameters\n\nname   description\nt      the entityconfig to override.\n\n# defined in\n\nsrc/factory/entityfactory.ts:11\n\n----------------------------------------\n\n\n# obtaincomponent\n\nƭ obtaincomponent: <t>(clazz: noargscomponentconstructor<t>) => t\n\n# type declaration\n\n▸ <t>(clazz): t\n\na function, which creates a component.\n\n# type parameters\n\nname   type                description\nt      extends component   the component class to be created.\n\n# parameters\n\nname    type                            description\nclazz   noargscomponentconstructor<t>   the constructor of the component.\n\n# returns\n\nt\n\n# defined in\n\nsrc/factory/componentfactory.ts:13\n\n\n# functions\n\n\n# createcomponentfactoryregistry\n\n▸ createcomponentfactoryregistry<t, tcontext>(): componentfactoryregistry<t, tcontext>\n\ncreate a registry for component factories.\n\n# type parameters\n\nname       type                   description\nt          extends entityconfig   the entity config to use.\ntcontext   tcontext               -\n\n# returns\n\ncomponentfactoryregistry<t, tcontext>\n\na new registry.\n\n# defined in\n\nsrc/factory/componentfactory.ts:58\n\n----------------------------------------\n\n\n# createdelayedoperations\n\n▸ createdelayedoperations<t>(operations): delayedoperations<t>\n\na helper for delaying operations during engine updates.\n\n# type parameters\n\nname   type\nt      extends record<string, (...args: any[]) => void>\n\n# parameters\n\nname         type   description\noperations   t      an object containing methods to be delayed.\n\n# returns\n\ndelayedoperations<t>\n\na new delayedoperations instance.\n\n# defined in\n\nsrc/utils/delayedoperations.ts:78",charsets:{cjk:!0}},{title:"Setup",frontmatter:{},regularPath:"/guide/",relativePath:"guide/README.md",key:"v-03b1eb28",path:"/guide/",headers:[{level:2,title:"Install With NPM",slug:"install-with-npm",normalizedTitle:"install with npm",charIndex:12},{level:2,title:"Install With Yarn",slug:"install-with-yarn",normalizedTitle:"install with yarn",charIndex:76},{level:2,title:"Enable Annotations and Reflection",slug:"enable-annotations-and-reflection",normalizedTitle:"enable annotations and reflection",charIndex:144},{level:3,title:"Install With NPM",slug:"install-with-npm-2",normalizedTitle:"install with npm",charIndex:12},{level:3,title:"Install With Yarn",slug:"install-with-yarn-2",normalizedTitle:"install with yarn",charIndex:76}],headersStr:"Install With NPM Install With Yarn Enable Annotations and Reflection Install With NPM Install With Yarn",content:"# Setup\n\n\n# Install With NPM\n\nnpm i typed-ecstasy typed-signals typedi\n\n\n\n# Install With Yarn\n\nyarn add typed-ecstasy typed-signals typedi\n\n\n\n# Enable Annotations and Reflection\n\nSince typed-ecstasy uses typedi, we'll need some extra work if you don't have this set up yet:\n\nYour tsconfig will need these two options:\n\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n\n\nYou'll also need a reflection library. I'll recommend @abraham/reflection, but you can use others like reflect-metadata as well:\n\n\n# Install With NPM\n\nnpm i @abraham/reflection\n\n\n\n# Install With Yarn\n\nyarn add @abraham/reflection\n\n\nIn your entrypoint file, you'll need to import this:\n\nimport '@abraham/reflection';\n",normalizedContent:"# setup\n\n\n# install with npm\n\nnpm i typed-ecstasy typed-signals typedi\n\n\n\n# install with yarn\n\nyarn add typed-ecstasy typed-signals typedi\n\n\n\n# enable annotations and reflection\n\nsince typed-ecstasy uses typedi, we'll need some extra work if you don't have this set up yet:\n\nyour tsconfig will need these two options:\n\n    \"emitdecoratormetadata\": true,\n    \"experimentaldecorators\": true,\n\n\nyou'll also need a reflection library. i'll recommend @abraham/reflection, but you can use others like reflect-metadata as well:\n\n\n# install with npm\n\nnpm i @abraham/reflection\n\n\n\n# install with yarn\n\nyarn add @abraham/reflection\n\n\nin your entrypoint file, you'll need to import this:\n\nimport '@abraham/reflection';\n",charsets:{}},{title:"Overview",frontmatter:{},regularPath:"/guide/core/",relativePath:"guide/core/README.md",key:"v-8d2c781c",path:"/guide/core/",headersStr:null,content:"# Overview\n\nOne of typed-ecstasy's main advantages is its clean API, which makes it easy to use the right way and hard to break it. Let us take a look at how to use it, step by step. Bear in mind this is just a guide, for a complete API reference, please refer to the API documentation.\n\nFirst, make sure you understand what an Entity Component System is.\n\nHere is a simplified diagram that will help you understand typed-ecstasy's architecture:\n\n\n\nThe green parts are included in typed-ecstasy and you only need to create/configure instances. The other parts are partially included (except for the game) and need to be extended by you.\n\n * An Entity is no more than an id and a list of components.\n * A Component represents a bag of data with no logic whatsoever.\n * A Family is used to represent a set of entities with a specific collection of components.\n * The Engine is the core of the framework. It manages all entities and systems.\n * In a System you can implement your game logic that may operate on entities of a given family.\n * A Signal allows you emit and connect to various events.\n * An EntityFactory can be used to assemble entities using a data-driven approach.",normalizedContent:"# overview\n\none of typed-ecstasy's main advantages is its clean api, which makes it easy to use the right way and hard to break it. let us take a look at how to use it, step by step. bear in mind this is just a guide, for a complete api reference, please refer to the api documentation.\n\nfirst, make sure you understand what an entity component system is.\n\nhere is a simplified diagram that will help you understand typed-ecstasy's architecture:\n\n\n\nthe green parts are included in typed-ecstasy and you only need to create/configure instances. the other parts are partially included (except for the game) and need to be extended by you.\n\n * an entity is no more than an id and a list of components.\n * a component represents a bag of data with no logic whatsoever.\n * a family is used to represent a set of entities with a specific collection of components.\n * the engine is the core of the framework. it manages all entities and systems.\n * in a system you can implement your game logic that may operate on entities of a given family.\n * a signal allows you emit and connect to various events.\n * an entityfactory can be used to assemble entities using a data-driven approach.",charsets:{}},{title:"Components",frontmatter:{},regularPath:"/guide/core/component.html",relativePath:"guide/core/component.md",key:"v-1f78d2c5",path:"/guide/core/component.html",headers:[{level:3,title:"Creating component classes",slug:"creating-component-classes",normalizedTitle:"creating component classes",charIndex:234},{level:2,title:"Adding Components to an Entity",slug:"adding-components-to-an-entity",normalizedTitle:"adding components to an entity",charIndex:834},{level:2,title:"Removing Components From an Entity",slug:"removing-components-from-an-entity",normalizedTitle:"removing components from an entity",charIndex:1082},{level:2,title:"Getting an Entities Component",slug:"getting-an-entities-component",normalizedTitle:"getting an entities component",charIndex:1315},{level:2,title:"Getting All Components",slug:"getting-all-components",normalizedTitle:"getting all components",charIndex:2011}],headersStr:"Creating component classes Adding Components to an Entity Removing Components From an Entity Getting an Entities Component Getting All Components",content:"# Components\n\nComponents are meant to be data bags and nothing more. All logic should be placed in (EntitySystems). So it is recommended to declare components like plain c-structs. Adding getters and setters is acceptable though.\n\n\n# Creating component classes\n\nTo define a new component, you only need to extend the Component class.\n\nIn the following example we define two components: PositionComponent and VelocityComponent.\n\nclass PositionComponent extends Component {\n\tx = 0;\n\ty = 0;\n}\nclass VelocityComponent extends Component {\n\tx = 0;\n\ty = 0;\n}\n\n\nThe collection of components an entity has will determine its behavior. Adding components to an entity is dead easy. However, mind that entities can not hold two components of the same class. So, when you add a component type twice, the second one will replace the first one.\n\n\n# Adding Components to an Entity\n\nYou can assign components easily using add:\n\nentity.add(new PositionComponent());\nentity.add(new VelocityComponent());\n\n\nAlternatively, you can assemble entities based on blueprints using a data-driven approach.\n\n\n# Removing Components From an Entity\n\nYou can remove components from entities any time (this might be delayed).\n\nentity.remove(PositionComponent); // remove just one specific component\nentity.removeAll(); // remove all components\n\n\n\n# Getting an Entities Component\n\nRetrieving components can be done as follows.\n\nconst position = entity.get(PositionComponent);\nconst velocity = entity.get(VelocityComponent);\n\n\nentity.get() will return null if the component does not exist in the entity. You can use entity.has() to check if the entity has a component of the specified class.\n\nYou can also get an entity using entity.require(). If the component does not exist, an exception will be thrown. You should use entity.require() only if you know that the component exist. For example if you are using an iterating EntitySystem, which already covers the existence with its Family.\n\nconst position = entity.require(PositionComponent);\n\n\n\n# Getting All Components\n\nYou can get all components at once by doing this.\n\nconst components = entity.getAll();\n\n\nYou can iterate over them either with a for of loop:\n\nfor (const component of components) {\n\t...\n}\n\n\nBut also using a classic loop:\n\nfor (let i = 0; i < components.length; ++i) {\n\tconst component = components[i];\n\t...\n}\n",normalizedContent:"# components\n\ncomponents are meant to be data bags and nothing more. all logic should be placed in (entitysystems). so it is recommended to declare components like plain c-structs. adding getters and setters is acceptable though.\n\n\n# creating component classes\n\nto define a new component, you only need to extend the component class.\n\nin the following example we define two components: positioncomponent and velocitycomponent.\n\nclass positioncomponent extends component {\n\tx = 0;\n\ty = 0;\n}\nclass velocitycomponent extends component {\n\tx = 0;\n\ty = 0;\n}\n\n\nthe collection of components an entity has will determine its behavior. adding components to an entity is dead easy. however, mind that entities can not hold two components of the same class. so, when you add a component type twice, the second one will replace the first one.\n\n\n# adding components to an entity\n\nyou can assign components easily using add:\n\nentity.add(new positioncomponent());\nentity.add(new velocitycomponent());\n\n\nalternatively, you can assemble entities based on blueprints using a data-driven approach.\n\n\n# removing components from an entity\n\nyou can remove components from entities any time (this might be delayed).\n\nentity.remove(positioncomponent); // remove just one specific component\nentity.removeall(); // remove all components\n\n\n\n# getting an entities component\n\nretrieving components can be done as follows.\n\nconst position = entity.get(positioncomponent);\nconst velocity = entity.get(velocitycomponent);\n\n\nentity.get() will return null if the component does not exist in the entity. you can use entity.has() to check if the entity has a component of the specified class.\n\nyou can also get an entity using entity.require(). if the component does not exist, an exception will be thrown. you should use entity.require() only if you know that the component exist. for example if you are using an iterating entitysystem, which already covers the existence with its family.\n\nconst position = entity.require(positioncomponent);\n\n\n\n# getting all components\n\nyou can get all components at once by doing this.\n\nconst components = entity.getall();\n\n\nyou can iterate over them either with a for of loop:\n\nfor (const component of components) {\n\t...\n}\n\n\nbut also using a classic loop:\n\nfor (let i = 0; i < components.length; ++i) {\n\tconst component = components[i];\n\t...\n}\n",charsets:{}},{title:"Dependency Injection",frontmatter:{},regularPath:"/guide/core/dependency-injection.html",relativePath:"guide/core/dependency-injection.md",key:"v-7e2a5059",path:"/guide/core/dependency-injection.html",headers:[{level:2,title:"What is Dependency Injection?",slug:"what-is-dependency-injection",normalizedTitle:"what is dependency injection?",charIndex:281},{level:2,title:"@Service Annotation",slug:"service-annotation",normalizedTitle:"@service annotation",charIndex:1065},{level:2,title:"Constructor Injection",slug:"constructor-injection",normalizedTitle:"constructor injection",charIndex:1252},{level:2,title:"Property Injection",slug:"property-injection",normalizedTitle:"property injection",charIndex:1557},{level:2,title:"Container Instance",slug:"container-instance",normalizedTitle:"container instance",charIndex:2415},{level:2,title:"What is Injectable?",slug:"what-is-injectable",normalizedTitle:"what is injectable?",charIndex:2815}],headersStr:"What is Dependency Injection? @Service Annotation Constructor Injection Property Injection Container Instance What is Injectable?",content:"# Dependency Injection\n\ntyped-ecstasy uses typedi for dependency injection.\n\nIf you know typedi, you can already know most of this. It might be a good idea to quickly look over this though.\n\nImports are obviously coming from typedi:\n\nimport { Service, Inject } from \"typedi\";\n\n\n\n# What is Dependency Injection?\n\nIn short:\n\n * Without dependency injection, you might need to pass dependencies (a shared service, a configuration object, etc.) manually to each system using its constructor or setters. This requires the code, which creates an instance of the system to know what the system needs.\n * With dependency injection, you can simply define what the system needs in its constructor or via annotation and the dependency injection container will take care of creating the instance and supplying these dependencies.\n\nNotice: Since the container takes care of creating instances, you no longer have the ability to manually specify arguments to the constructor of a system/service. You'll either have to pass these using setters or supply them as dependencies.\n\n\n# @Service Annotation\n\nAll services (for example EntitySystem implementations) must be annotated with @Service():\n\n@Service()\nclass MovementSystem extends EntitySystem {\n    // ...\n};\n\n\n\n# Constructor Injection\n\nIf you need an instance of another service in a system, you can simply put it into the constructor:\n\n@Service()\nclass AssetService {\n    // ...\n};\n\n@Service()\nclass RenderSystem extends EntitySystem {\n    public constructor(assetService: AssetService) {\n        //...\n    }\n};\n\n\n\n# Property Injection\n\nAlternatively, you can also specify the dependency with an @Inject() annotation:\n\n@Service()\nclass RenderSystem extends EntitySystem {\n    @Inject()\n    public readonly assetService!: AssetService;\n    // notice the ! above, so typescript won't complain about the missing initialization\n};\n\n\nKeep in mind though, that you won't be able to access this property in the constructor, since it will be set after instantiation! If you need to use it after instantiation, you can do this by overriding the onEnable method:\n\n@Service()\nclass RenderSystem extends EntitySystem {\n    @Inject()\n    public readonly assetService!: AssetService;\n    // notice the ! above, so typescript won't complain about the missing initialization\n\n    protected override onEnable() {\n        const foo = this.assetService.get(\"foo\");\n        // ...\n    }\n};\n\n\n\n# Container Instance\n\nYou can use engine.getContainer() to get the instance of the dependency injection container for an engine. Alternatively, it's also possible to let it be injected in your service. Use ContainerInstance from typedi as type.\n\nUsing the container is not needed for creating/adding systems, this is done automatically for you. Use the container instance if you need more control.\n\n\n# What is Injectable?\n\nBy default, you can inject everything that is marked with the @Service annotation. In addition, the Engine constructor adds a couple of extra classes, which can be injected:\n\n * Engine The engine instance\n * Allocator (either a plain or a pooled allocator)\n * The typedi ContainerInstance itself.\n\nIf you want to inject something, that is not marked with @Service, you must set it on the container manually:\n\nengine.getContainer().set(EntityFactory, myEntityFactory);\n",normalizedContent:"# dependency injection\n\ntyped-ecstasy uses typedi for dependency injection.\n\nif you know typedi, you can already know most of this. it might be a good idea to quickly look over this though.\n\nimports are obviously coming from typedi:\n\nimport { service, inject } from \"typedi\";\n\n\n\n# what is dependency injection?\n\nin short:\n\n * without dependency injection, you might need to pass dependencies (a shared service, a configuration object, etc.) manually to each system using its constructor or setters. this requires the code, which creates an instance of the system to know what the system needs.\n * with dependency injection, you can simply define what the system needs in its constructor or via annotation and the dependency injection container will take care of creating the instance and supplying these dependencies.\n\nnotice: since the container takes care of creating instances, you no longer have the ability to manually specify arguments to the constructor of a system/service. you'll either have to pass these using setters or supply them as dependencies.\n\n\n# @service annotation\n\nall services (for example entitysystem implementations) must be annotated with @service():\n\n@service()\nclass movementsystem extends entitysystem {\n    // ...\n};\n\n\n\n# constructor injection\n\nif you need an instance of another service in a system, you can simply put it into the constructor:\n\n@service()\nclass assetservice {\n    // ...\n};\n\n@service()\nclass rendersystem extends entitysystem {\n    public constructor(assetservice: assetservice) {\n        //...\n    }\n};\n\n\n\n# property injection\n\nalternatively, you can also specify the dependency with an @inject() annotation:\n\n@service()\nclass rendersystem extends entitysystem {\n    @inject()\n    public readonly assetservice!: assetservice;\n    // notice the ! above, so typescript won't complain about the missing initialization\n};\n\n\nkeep in mind though, that you won't be able to access this property in the constructor, since it will be set after instantiation! if you need to use it after instantiation, you can do this by overriding the onenable method:\n\n@service()\nclass rendersystem extends entitysystem {\n    @inject()\n    public readonly assetservice!: assetservice;\n    // notice the ! above, so typescript won't complain about the missing initialization\n\n    protected override onenable() {\n        const foo = this.assetservice.get(\"foo\");\n        // ...\n    }\n};\n\n\n\n# container instance\n\nyou can use engine.getcontainer() to get the instance of the dependency injection container for an engine. alternatively, it's also possible to let it be injected in your service. use containerinstance from typedi as type.\n\nusing the container is not needed for creating/adding systems, this is done automatically for you. use the container instance if you need more control.\n\n\n# what is injectable?\n\nby default, you can inject everything that is marked with the @service annotation. in addition, the engine constructor adds a couple of extra classes, which can be injected:\n\n * engine the engine instance\n * allocator (either a plain or a pooled allocator)\n * the typedi containerinstance itself.\n\nif you want to inject something, that is not marked with @service, you must set it on the container manually:\n\nengine.getcontainer().set(entityfactory, myentityfactory);\n",charsets:{}},{title:"Engine",frontmatter:{},regularPath:"/guide/core/engine.html",relativePath:"guide/core/engine.md",key:"v-30a86c39",path:"/guide/core/engine.html",headers:[{level:2,title:"Creating an Engine",slug:"creating-an-engine",normalizedTitle:"creating an engine",charIndex:210},{level:2,title:"Dependency Injection Container",slug:"dependency-injection-container",normalizedTitle:"dependency injection container",charIndex:413}],headersStr:"Creating an Engine Dependency Injection Container",content:"# Engine\n\nThe Engine class is the center of the framework. Typically, you would have only one instance per application.\n\nThe engine is responsible for setting up and handling entity & system managers, etc.\n\n\n# Creating an Engine\n\nYou can create an engine with the default constructor:\n\nconst engine = new Engine();\n\n\nYou will learn more about the operations you can do with Engine in the following tutorials.\n\n\n# Dependency Injection Container\n\nYou can use engine.getContainer() to get the instance of the dependency injection container for this engine. Currently typedi is being used.\n\nMake sure to check out the page about Dependency Injection.",normalizedContent:"# engine\n\nthe engine class is the center of the framework. typically, you would have only one instance per application.\n\nthe engine is responsible for setting up and handling entity & system managers, etc.\n\n\n# creating an engine\n\nyou can create an engine with the default constructor:\n\nconst engine = new engine();\n\n\nyou will learn more about the operations you can do with engine in the following tutorials.\n\n\n# dependency injection container\n\nyou can use engine.getcontainer() to get the instance of the dependency injection container for this engine. currently typedi is being used.\n\nmake sure to check out the page about dependency injection.",charsets:{}},{title:"Entity",frontmatter:{},regularPath:"/guide/core/entity.html",relativePath:"guide/core/entity.md",key:"v-3fa89199",path:"/guide/core/entity.html",headers:[{level:2,title:"Creating and Adding an Entity",slug:"creating-and-adding-an-entity",normalizedTitle:"creating and adding an entity",charIndex:144},{level:2,title:"Entity IDs",slug:"entity-ids",normalizedTitle:"entity ids",charIndex:887}],headersStr:"Creating and Adding an Entity Entity IDs",content:'# Entity\n\nIn typed-ecstasy, entities are simple bags of components grouped under a unique ID. All non zero entity IDs are considered valid.\n\n\n# Creating and Adding an Entity\n\nIf you want to create an Entity, you need to ask your Engine for a new instance.\n\nconst entity = new Entity();\n\n\nAlternatively, you can assemble entities based on blueprints using a data-driven approach:\n\nconst entity = factory.assemble("car");\n\n\nEntities need to be explicitly added to the engine so as to be processed by systems:\n\nengine.entities.add(entity);\n\n\nThe reason this is divided into two steps is to allow you to add all of your components to the entity before actually adding it to the engine.\n\nRemoving entities from the engine is rather simple. Calling engine.entities.remove() or entity.destroy() frees the entity (possibly delayed).\n\nengine.entities.remove(entity); // or entity.destroy();\n\n\n\n# Entity IDs\n\nAs said, each entity has a unique ID. You can get it using entity.getId(), which returns a number. Entities will have an invalid ID (0) until they\'re added to an engine.\n\nEntities can be retrieved from the engine using their ID:\n\nconst entity = engine.getEntity(id);\n',normalizedContent:'# entity\n\nin typed-ecstasy, entities are simple bags of components grouped under a unique id. all non zero entity ids are considered valid.\n\n\n# creating and adding an entity\n\nif you want to create an entity, you need to ask your engine for a new instance.\n\nconst entity = new entity();\n\n\nalternatively, you can assemble entities based on blueprints using a data-driven approach:\n\nconst entity = factory.assemble("car");\n\n\nentities need to be explicitly added to the engine so as to be processed by systems:\n\nengine.entities.add(entity);\n\n\nthe reason this is divided into two steps is to allow you to add all of your components to the entity before actually adding it to the engine.\n\nremoving entities from the engine is rather simple. calling engine.entities.remove() or entity.destroy() frees the entity (possibly delayed).\n\nengine.entities.remove(entity); // or entity.destroy();\n\n\n\n# entity ids\n\nas said, each entity has a unique id. you can get it using entity.getid(), which returns a number. entities will have an invalid id (0) until they\'re added to an engine.\n\nentities can be retrieved from the engine using their id:\n\nconst entity = engine.getentity(id);\n',charsets:{}},{title:"Entity System",frontmatter:{},regularPath:"/guide/core/entitysystem.html",relativePath:"guide/core/entitysystem.md",key:"v-7b99fa79",path:"/guide/core/entitysystem.html",headers:[{level:2,title:"Creating a Custom EntitySystem",slug:"creating-a-custom-entitysystem",normalizedTitle:"creating a custom entitysystem",charIndex:161},{level:2,title:"Adding EntitySystems to the Engine",slug:"adding-entitysystems-to-the-engine",normalizedTitle:"adding entitysystems to the engine",charIndex:1554},{level:2,title:"Removing an EntitySystem From the Engine",slug:"removing-an-entitysystem-from-the-engine",normalizedTitle:"removing an entitysystem from the engine",charIndex:1899},{level:2,title:"Updating All Systems",slug:"updating-all-systems",normalizedTitle:"updating all systems",charIndex:2335},{level:2,title:"Retrieving an EntitySystem From the Engine",slug:"retrieving-an-entitysystem-from-the-engine",normalizedTitle:"retrieving an entitysystem from the engine",charIndex:2618},{level:2,title:"Enabling/Disabling Entitysystems Without Removing Them",slug:"enabling-disabling-entitysystems-without-removing-them",normalizedTitle:"enabling/disabling entitysystems without removing them",charIndex:2792},{level:2,title:"Built-in EntitySystems",slug:"built-in-entitysystems",normalizedTitle:"built-in entitysystems",charIndex:3105}],headersStr:"Creating a Custom EntitySystem Adding EntitySystems to the Engine Removing an EntitySystem From the Engine Updating All Systems Retrieving an EntitySystem From the Engine Enabling/Disabling Entitysystems Without Removing Them Built-in EntitySystems",content:"# Entity System\n\nEntitySystem derived classes contain the logic that process our game entities.\n\nMake sure to check out the page about Dependency Injection.\n\n\n# Creating a Custom EntitySystem\n\nIn addition to extending the built-in entitysystems, you can extend EntitySystem itself.\n\nThese are some methods you might want to override.\n\n/**\n * Called when this EntitySystem is added to the engine or re-enabled after being disabled.\n */\nprotected onEnable() {}\n\n/**\n * Called when this EntitySystem is removed from the engine or being disabled.\n */\nprotected onDisable() {}\n\n/**\n * The update method called every tick.\n *\n * @param deltaTime The time passed since last frame in seconds.\n */\npublic abstract update(deltaTime: number): void;\n\n\nFor instance, let us say we want to change our entities' position according to their velocity. We can create a MovementSystem that takes care of it.\n\n@Service()\nclass MovementSystem extends EntitySystem {\n\tprivate entities: Entity[] = [];\n\t\n\tprotected override onEnable() {\n\t\tthis.entities = this.engine.forFamily(Family.all(PositionComponent, VelocityComponent).get());\n\t}\n\n\tprotected override onDisable() {\n\t\tthis.entities = [];\n\t}\n\n\tprotected override update(deltaTime: number) {\n\t\tfor (const entity of this.entities) {\n\t\t\tconst position = entity.require(PositionComponent);\n\t\t\tconst velocity = entity.require(VelocityComponent);\n\t\t\t\n\t\t\tposition.x += velocity.x * deltaTime;\n\t\t\tposition.y += velocity.y * deltaTime;\n\t\t}\n\t}\n};\n\n\n\nOf course, the above can be simplified, by using the built-in IteratingSystem\n\n\n# Adding EntitySystems to the Engine\n\nAn Engine can never hold two systems of the same class. So when adding a system of the same class twice, the second will replace the first.\n\nDo the following to register a system with the engine.\n\n// Using the return value is of course optional\nconst movementSystem = engine.systems.add(MovementSystem);\n\n\n\n# Removing an EntitySystem From the Engine\n\nAnytime you want, you can remove a system from the engine (which will effectively delete it).\n\nengine.systems.remove(MovementSystem);\n\n\nBe careful though if you remove systems, which are still referenced in other places.\n\nRemoving a system from the engine will also remove it from the dependency container, so unless you have other references to the system, it should be garbage collected.\n\n\n# Updating All Systems\n\nA call to engine.update(deltaTime) will update all the registered entity systems according to their priority order. The lower the priority level, the sooner the system will be updated. You can change the priority of a system using its setPriority() method.\n\n\n# Retrieving an EntitySystem From the Engine\n\nA system can be retrieved from an engine reference by its class.\n\nconst movementSystem = engine.systems.get(MovementSystem);\n\n\n\n# Enabling/Disabling Entitysystems Without Removing Them\n\nYou can enable/disable systems whenever you want. So, if what you need is to temporarily pause a system, you do not need to remove and later re-add it. When a system is disabled, it will not be updated by the engine.\n\nmovementSystem.setEnabled(false);\n\n\n\n# Built-in EntitySystems\n\ntyped-ecstasy comes with a few abstract built-in entitysystems that might make your life easier and avoid some boilerplate code.",normalizedContent:"# entity system\n\nentitysystem derived classes contain the logic that process our game entities.\n\nmake sure to check out the page about dependency injection.\n\n\n# creating a custom entitysystem\n\nin addition to extending the built-in entitysystems, you can extend entitysystem itself.\n\nthese are some methods you might want to override.\n\n/**\n * called when this entitysystem is added to the engine or re-enabled after being disabled.\n */\nprotected onenable() {}\n\n/**\n * called when this entitysystem is removed from the engine or being disabled.\n */\nprotected ondisable() {}\n\n/**\n * the update method called every tick.\n *\n * @param deltatime the time passed since last frame in seconds.\n */\npublic abstract update(deltatime: number): void;\n\n\nfor instance, let us say we want to change our entities' position according to their velocity. we can create a movementsystem that takes care of it.\n\n@service()\nclass movementsystem extends entitysystem {\n\tprivate entities: entity[] = [];\n\t\n\tprotected override onenable() {\n\t\tthis.entities = this.engine.forfamily(family.all(positioncomponent, velocitycomponent).get());\n\t}\n\n\tprotected override ondisable() {\n\t\tthis.entities = [];\n\t}\n\n\tprotected override update(deltatime: number) {\n\t\tfor (const entity of this.entities) {\n\t\t\tconst position = entity.require(positioncomponent);\n\t\t\tconst velocity = entity.require(velocitycomponent);\n\t\t\t\n\t\t\tposition.x += velocity.x * deltatime;\n\t\t\tposition.y += velocity.y * deltatime;\n\t\t}\n\t}\n};\n\n\n\nof course, the above can be simplified, by using the built-in iteratingsystem\n\n\n# adding entitysystems to the engine\n\nan engine can never hold two systems of the same class. so when adding a system of the same class twice, the second will replace the first.\n\ndo the following to register a system with the engine.\n\n// using the return value is of course optional\nconst movementsystem = engine.systems.add(movementsystem);\n\n\n\n# removing an entitysystem from the engine\n\nanytime you want, you can remove a system from the engine (which will effectively delete it).\n\nengine.systems.remove(movementsystem);\n\n\nbe careful though if you remove systems, which are still referenced in other places.\n\nremoving a system from the engine will also remove it from the dependency container, so unless you have other references to the system, it should be garbage collected.\n\n\n# updating all systems\n\na call to engine.update(deltatime) will update all the registered entity systems according to their priority order. the lower the priority level, the sooner the system will be updated. you can change the priority of a system using its setpriority() method.\n\n\n# retrieving an entitysystem from the engine\n\na system can be retrieved from an engine reference by its class.\n\nconst movementsystem = engine.systems.get(movementsystem);\n\n\n\n# enabling/disabling entitysystems without removing them\n\nyou can enable/disable systems whenever you want. so, if what you need is to temporarily pause a system, you do not need to remove and later re-add it. when a system is disabled, it will not be updated by the engine.\n\nmovementsystem.setenabled(false);\n\n\n\n# built-in entitysystems\n\ntyped-ecstasy comes with a few abstract built-in entitysystems that might make your life easier and avoid some boilerplate code.",charsets:{}},{title:"Family",frontmatter:{},regularPath:"/guide/core/family.html",relativePath:"guide/core/family.md",key:"v-b6426a0e",path:"/guide/core/family.html",headers:[{level:2,title:"Obtaining a Family",slug:"obtaining-a-family",normalizedTitle:"obtaining a family",charIndex:274},{level:2,title:"Getting a List of Entities Which Belong to a Family",slug:"getting-a-list-of-entities-which-belong-to-a-family",normalizedTitle:"getting a list of entities which belong to a family",charIndex:951}],headersStr:"Obtaining a Family Getting a List of Entities Which Belong to a Family",content:"# Family\n\nEntities with the same set of components can be grouped in Family objects.\n\nA Family is defined by:\n\n * A set of components the entity must have.\n * A set of components of which the entity must have at least one.\n * A set of components the entity cannot have.\n\n\n# Obtaining a Family\n\nYou can obtain a Family by specifying the list of component classes the entities belonging to said family must (not) possess. This should satisfy most of your entity classification needs.\n\nconst family = Family.all(PositionComponent, VelocityComponent).get();\n\n\nImagine we want to group all entities that should be rendered. It certainly must have a position and either a texture or a particle system. Additionally, we need to make sure it is not invisible. These constraints can easily be represented the following way.\n\nconst family = Family.all(PositionComponent)\n\t\t.one(TextureComponent, ParticleComponent)\n\t\t.exclude(InvisibleComponent)\n\t\t.get();\n\n\n\n# Getting a List of Entities Which Belong to a Family\n\nThe EntityManager has the capability of providing the full collection of entities that match a specific family.\n\nconst entities = engine.entities.forFamily(family);\n\n\nUsually you'd store the result in the attribute of an EntitySystem (the returned array will always be the same and as such up-to-date).\n\nYou can iterate over them either with a for of loop:\n\nfor (const entity of entities) {\n\t...\n}\n\n\nBut also using a classic loop:\n\nfor (let i = 0; i < entities.length; ++i) {\n\tconst entity = entities[i];\n\t...\n}\n",normalizedContent:"# family\n\nentities with the same set of components can be grouped in family objects.\n\na family is defined by:\n\n * a set of components the entity must have.\n * a set of components of which the entity must have at least one.\n * a set of components the entity cannot have.\n\n\n# obtaining a family\n\nyou can obtain a family by specifying the list of component classes the entities belonging to said family must (not) possess. this should satisfy most of your entity classification needs.\n\nconst family = family.all(positioncomponent, velocitycomponent).get();\n\n\nimagine we want to group all entities that should be rendered. it certainly must have a position and either a texture or a particle system. additionally, we need to make sure it is not invisible. these constraints can easily be represented the following way.\n\nconst family = family.all(positioncomponent)\n\t\t.one(texturecomponent, particlecomponent)\n\t\t.exclude(invisiblecomponent)\n\t\t.get();\n\n\n\n# getting a list of entities which belong to a family\n\nthe entitymanager has the capability of providing the full collection of entities that match a specific family.\n\nconst entities = engine.entities.forfamily(family);\n\n\nusually you'd store the result in the attribute of an entitysystem (the returned array will always be the same and as such up-to-date).\n\nyou can iterate over them either with a for of loop:\n\nfor (const entity of entities) {\n\t...\n}\n\n\nbut also using a classic loop:\n\nfor (let i = 0; i < entities.length; ++i) {\n\tconst entity = entities[i];\n\t...\n}\n",charsets:{}},{title:"Object Pooling",frontmatter:{},regularPath:"/guide/core/pooling.html",relativePath:"guide/core/pooling.md",key:"v-2813ef33",path:"/guide/core/pooling.html",headers:[{level:2,title:"What is Pooling?",slug:"what-is-pooling",normalizedTitle:"what is pooling?",charIndex:21},{level:2,title:"Pool",slug:"pool",normalizedTitle:"pool",charIndex:9},{level:2,title:"Poolable",slug:"poolable",normalizedTitle:"poolable",charIndex:596},{level:2,title:"PoolAllocator",slug:"poolallocator",normalizedTitle:"poolallocator",charIndex:1282},{level:2,title:"Injecting the Allocator Into Your Systems or Other Services",slug:"injecting-the-allocator-into-your-systems-or-other-services",normalizedTitle:"injecting the allocator into your systems or other services",charIndex:2071},{level:2,title:"Things to Keep in Mind",slug:"things-to-keep-in-mind",normalizedTitle:"things to keep in mind",charIndex:2849}],headersStr:"What is Pooling? Pool Poolable PoolAllocator Injecting the Allocator Into Your Systems or Other Services Things to Keep in Mind",content:"# Object Pooling\n\n\n# What is Pooling?\n\nObject pooling is a technique to avoid costly re-allocations. This is especially important for JavaScript games, since anything that is not used anymore will get removed by the garbage collector and this can cause stuttering if you are not careful.\n\nInstead of just removing all references to an object, it will be reset and put on a list, so that the next time you need a new object, you can use an old one.\n\n\n# Pool\n\nPool is the base class for all pools. Unless you need to pool anything aside from entities and components, you don't need this class.\n\n\n# Poolable\n\nPoolable Is an interface, which can be implemented on objects to be able to reset them to their default state. Simply implement the reset() method and you're good to go:\n\nexport class DataComponent extends Component implements Poolable {\n    public data: MyData | null = null;\n\n    public reset() {\n        this.data = null;\n    }\n}\n\n\nThis method is completely optional. reset() will be called when the object gets freed and the pool didn't reach its maximum size yet.\n\nYou rarely need to implement this method if you always set all properties after obtaining an instance. It might be a valid use-case if the object keeps references that might prevent garbage collection.\n\n\n# PoolAllocator\n\nA PoolAllocator is the class to use if you want to pool entities and components.\n\nSimple usage might look like this:\n\nconst allocator = new PoolAllocator();\nconst engine = new Engine(allocator);\nconst entity = allocator.obtainEntity();\nentity.add(allocator.obtainComponent(PositionComponent));\nentity.remove(PositionComponent);\nentity.destroy();\n\n\nAs long as you use the built-in methods to remove entities and components, you won't have to manually add them back to the pool.\n\nThe data-driven approach works with PoolAllocator as well:\n\nconst allocator = new PoolAllocator();\nconst engine = new Engine(allocator);\nconst context: SampleContext = { /*...*/ };\nconst factory = new EntityFactory<SampleEntityConfig, SampleContext>(componentFactories, context, allocator);\n\n\n\n# Injecting the Allocator Into Your Systems or Other Services\n\nIn some situations, you'll want to use the allocator in a system. The class to use here is Allocator (and not PoolAllocator!):\n\n@Service()\nclass ExplosionSystem extends EntitySystem {\n    private allocator: Allocator;\n\n    public constructor(allocator: Allocator) {\n        super(Family.all(ComponentA, ComponentB).get());\n        this.allocator = allocator;\n        // ...\n    }\n\n    protected onExplode(entity: Entity): void {\n        const entity = this.allocator.obtainEntity();\n        // ...\n    }\n}\n\n\nThere will always be an Allocator available for injection, even if you didn't configure a PoolAllocator. This allows you to easily switch between pooling and no pooling during instantiation of the Engine.\n\n\n# Things to Keep in Mind\n\n * Don't keep references to entities/components that have been removed.\n   * Check out Special Considerations for more information on references.\n * Object pooling comes at the cost of more memory usage. You might want to take a look at the PoolAllocatorConfig to fine-tune the pools to your needs.\n * If you configure a PoolAllocator, do not create entities and components with new anymore, but use the allocator instead.\n * Only implement the reset method if you really need it to avoid setting values that will be overwritten anyway.",normalizedContent:"# object pooling\n\n\n# what is pooling?\n\nobject pooling is a technique to avoid costly re-allocations. this is especially important for javascript games, since anything that is not used anymore will get removed by the garbage collector and this can cause stuttering if you are not careful.\n\ninstead of just removing all references to an object, it will be reset and put on a list, so that the next time you need a new object, you can use an old one.\n\n\n# pool\n\npool is the base class for all pools. unless you need to pool anything aside from entities and components, you don't need this class.\n\n\n# poolable\n\npoolable is an interface, which can be implemented on objects to be able to reset them to their default state. simply implement the reset() method and you're good to go:\n\nexport class datacomponent extends component implements poolable {\n    public data: mydata | null = null;\n\n    public reset() {\n        this.data = null;\n    }\n}\n\n\nthis method is completely optional. reset() will be called when the object gets freed and the pool didn't reach its maximum size yet.\n\nyou rarely need to implement this method if you always set all properties after obtaining an instance. it might be a valid use-case if the object keeps references that might prevent garbage collection.\n\n\n# poolallocator\n\na poolallocator is the class to use if you want to pool entities and components.\n\nsimple usage might look like this:\n\nconst allocator = new poolallocator();\nconst engine = new engine(allocator);\nconst entity = allocator.obtainentity();\nentity.add(allocator.obtaincomponent(positioncomponent));\nentity.remove(positioncomponent);\nentity.destroy();\n\n\nas long as you use the built-in methods to remove entities and components, you won't have to manually add them back to the pool.\n\nthe data-driven approach works with poolallocator as well:\n\nconst allocator = new poolallocator();\nconst engine = new engine(allocator);\nconst context: samplecontext = { /*...*/ };\nconst factory = new entityfactory<sampleentityconfig, samplecontext>(componentfactories, context, allocator);\n\n\n\n# injecting the allocator into your systems or other services\n\nin some situations, you'll want to use the allocator in a system. the class to use here is allocator (and not poolallocator!):\n\n@service()\nclass explosionsystem extends entitysystem {\n    private allocator: allocator;\n\n    public constructor(allocator: allocator) {\n        super(family.all(componenta, componentb).get());\n        this.allocator = allocator;\n        // ...\n    }\n\n    protected onexplode(entity: entity): void {\n        const entity = this.allocator.obtainentity();\n        // ...\n    }\n}\n\n\nthere will always be an allocator available for injection, even if you didn't configure a poolallocator. this allows you to easily switch between pooling and no pooling during instantiation of the engine.\n\n\n# things to keep in mind\n\n * don't keep references to entities/components that have been removed.\n   * check out special considerations for more information on references.\n * object pooling comes at the cost of more memory usage. you might want to take a look at the poolallocatorconfig to fine-tune the pools to your needs.\n * if you configure a poolallocator, do not create entities and components with new anymore, but use the allocator instead.\n * only implement the reset method if you really need it to avoid setting values that will be overwritten anyway.",charsets:{cjk:!0}},{title:"Signal",frontmatter:{},regularPath:"/guide/core/signal.html",relativePath:"guide/core/signal.md",key:"v-22a2e879",path:"/guide/core/signal.html",headers:[{level:2,title:"Built-In Signals",slug:"built-in-signals",normalizedTitle:"built-in signals",charIndex:349}],headersStr:"Built-In Signals",content:"# Signal\n\nA signal is an easy way to emit events and listen for them. You can use signals in your game for example to tell listeners, that something exploded.\n\nA while back I came across this neat article about a good C++11 signal system: Performance of a C++11 Signal System typed-ecstasy uses typed-signals, a TypeScript port of said article.\n\n\n# Built-In Signals\n\ntyped-ecstasy uses signals in the EntityManager, specifically:\n\n * onAdd\n * onRemove\n * onAddForFamily\n * onRemoveForFamily\n\nThese will be emitted when an entity gets added/removed to/from the engine or a specific family.",normalizedContent:"# signal\n\na signal is an easy way to emit events and listen for them. you can use signals in your game for example to tell listeners, that something exploded.\n\na while back i came across this neat article about a good c++11 signal system: performance of a c++11 signal system typed-ecstasy uses typed-signals, a typescript port of said article.\n\n\n# built-in signals\n\ntyped-ecstasy uses signals in the entitymanager, specifically:\n\n * onadd\n * onremove\n * onaddforfamily\n * onremoveforfamily\n\nthese will be emitted when an entity gets added/removed to/from the engine or a specific family.",charsets:{}},{title:"Special Considerations",frontmatter:{},regularPath:"/guide/core/special-considerations.html",relativePath:"guide/core/special-considerations.md",key:"v-f077aece",path:"/guide/core/special-considerations.html",headers:[{level:2,title:"Delayed Removal of Entities, Components and Systems",slug:"delayed-removal-of-entities-components-and-systems",normalizedTitle:"delayed removal of entities, components and systems",charIndex:140},{level:2,title:"Keeping References",slug:"keeping-references",normalizedTitle:"keeping references",charIndex:1004}],headersStr:"Delayed Removal of Entities, Components and Systems Keeping References",content:"# Special Considerations\n\nHere are a couple of details on how typed-ecstasy deals with special situations you might want to know about.\n\n\n# Delayed Removal of Entities, Components and Systems\n\nSome operations will be delayed if issued while an entity system is being updated or listeners are being notified. This is because applying these operations immediately would affect iteration:\n\n * Entity addition and removal\n * Component addition and removal\n * System additions, removals and priority changes\n\nThese delayed operations will be carried out as soon as the reason for the delay is resolved. Until then, the entity/component/system will be processed as usual.\n\nIn some situations you want to check if an entity is scheduled for removal. You can do so by using entity.isScheduledForRemoval().\n\nThere is currently no built-in way to check if a component or system is scheduled for removal. If you need this functionality, you'll need to add properties to the system or component to reflect this.\n\n\n# Keeping References\n\n * It's good advice to never keep references to components.\n   * Always access them via their entity.\n * Avoid references to entities as much as possible.\n   * You can, store the entity-id instead and then retrieve the entity from the entity-manager by using this id.\n   * If you absolutely must store an entity reference, make sure to listen for the onRemove signal, so you can clear this reference.\n\nEntities and components might get reused if pooling is configured, so you might end up accessing an entity that is now something entirely different if you keep a reference.",normalizedContent:"# special considerations\n\nhere are a couple of details on how typed-ecstasy deals with special situations you might want to know about.\n\n\n# delayed removal of entities, components and systems\n\nsome operations will be delayed if issued while an entity system is being updated or listeners are being notified. this is because applying these operations immediately would affect iteration:\n\n * entity addition and removal\n * component addition and removal\n * system additions, removals and priority changes\n\nthese delayed operations will be carried out as soon as the reason for the delay is resolved. until then, the entity/component/system will be processed as usual.\n\nin some situations you want to check if an entity is scheduled for removal. you can do so by using entity.isscheduledforremoval().\n\nthere is currently no built-in way to check if a component or system is scheduled for removal. if you need this functionality, you'll need to add properties to the system or component to reflect this.\n\n\n# keeping references\n\n * it's good advice to never keep references to components.\n   * always access them via their entity.\n * avoid references to entities as much as possible.\n   * you can, store the entity-id instead and then retrieve the entity from the entity-manager by using this id.\n   * if you absolutely must store an entity reference, make sure to listen for the onremove signal, so you can clear this reference.\n\nentities and components might get reused if pooling is configured, so you might end up accessing an entity that is now something entirely different if you keep a reference.",charsets:{}},{title:"Overview",frontmatter:{},regularPath:"/guide/data-driven/",relativePath:"guide/data-driven/README.md",key:"v-252e0b10",path:"/guide/data-driven/",headers:[{level:2,title:"About the Folder Structure",slug:"about-the-folder-structure",normalizedTitle:"about the folder structure",charIndex:844}],headersStr:"About the Folder Structure",content:"# Overview\n\nManually creating entities and components is tedious. Usually you want your entities to be created from your data. For a data-driven approach, you can use an EntityFactory. This way you can define blueprints for entities and load data from your levels automatically.\n\nThis guide shows one approach of doing this. The code should be flexible enough to allow you to adjust it to your project. If not, feel free to take a look at the source-code on GitHub and either create a ticket or create your own implementation.\n\nFollow these steps to get a data-driven approach:\n\n 1. Create components and respective factories to initialize said components\n 2. Adding some extra types (EntityConfig and Context)\n 3. Define blueprints (for example in .json format)\n 4. Set up an EntityFactory\n 5. Use the EntityFactory to create new entities\n\n\n# About the Folder Structure\n\nThe folder structure shown in this guide is just an example and you should adapt it as you see fit. You can find the source-code of this guide in the GitHub repository.",normalizedContent:"# overview\n\nmanually creating entities and components is tedious. usually you want your entities to be created from your data. for a data-driven approach, you can use an entityfactory. this way you can define blueprints for entities and load data from your levels automatically.\n\nthis guide shows one approach of doing this. the code should be flexible enough to allow you to adjust it to your project. if not, feel free to take a look at the source-code on github and either create a ticket or create your own implementation.\n\nfollow these steps to get a data-driven approach:\n\n 1. create components and respective factories to initialize said components\n 2. adding some extra types (entityconfig and context)\n 3. define blueprints (for example in .json format)\n 4. set up an entityfactory\n 5. use the entityfactory to create new entities\n\n\n# about the folder structure\n\nthe folder structure shown in this guide is just an example and you should adapt it as you see fit. you can find the source-code of this guide in the github repository.",charsets:{}},{title:"Defining Blueprints",frontmatter:{},regularPath:"/guide/data-driven/blueprints.html",relativePath:"guide/data-driven/blueprints.md",key:"v-579f2b62",path:"/guide/data-driven/blueprints.html",headers:[{level:2,title:"src/blueprints/stoneBlueprint.ts",slug:"src-blueprints-stoneblueprint-ts",normalizedTitle:"src/blueprints/stoneblueprint.ts",charIndex:495},{level:2,title:"src/blueprints/index.ts",slug:"src-blueprints-index-ts",normalizedTitle:"src/blueprints/index.ts",charIndex:1105}],headersStr:"src/blueprints/stoneBlueprint.ts src/blueprints/index.ts",content:'# Defining Blueprints\n\nNow that we know how we can configure an entity, we can define entity blueprints for our entities. Depending on your use-case you could define them in TypeScript files (to have auto-completion and type-safety), store them as json files or get them in some other form. For simplicity, let\'s write them in a TypeScript file here.\n\nLet\'s create a folder src/blueprints and add these files to it:\n\n * stoneBlueprint.ts\n * .. additional files for more entities\n * index.ts\n\n\n# src/blueprints/stoneBlueprint.ts\n\nimport type { SampleEntityConfig } from "../types";\n\n// Here we define an entity blueprint, which contains 4 components and their default values\nexport const stoneBlueprint: SampleEntityConfig = {\n    Position: {\n        x: 10.1,\n        y: 11.2,\n    },\n    Sprite: {\n        image: "stone.png",\n        layer: 3,\n    },\n    Pickup: {\n        material: "stone",\n        amount: 4,\n    },\n    CameraFocus: {\n        weight: 42,\n    },\n};\n\n\nNow we can create a map, where the entity name is the key (by which we will later create the entity) and the blueprint is the value:\n\n\n# src/blueprints/index.ts\n\nimport type { SampleEntityConfig } from "../types";\nimport { stoneBlueprint } from "./stoneBlueprint";\n\n// This is a map of entity names to entity blueprints\nexport const blueprints: Record<string, SampleEntityConfig> = {\n    stone: stoneBlueprint,\n    // ... add more blueprints here\n};\n',normalizedContent:'# defining blueprints\n\nnow that we know how we can configure an entity, we can define entity blueprints for our entities. depending on your use-case you could define them in typescript files (to have auto-completion and type-safety), store them as json files or get them in some other form. for simplicity, let\'s write them in a typescript file here.\n\nlet\'s create a folder src/blueprints and add these files to it:\n\n * stoneblueprint.ts\n * .. additional files for more entities\n * index.ts\n\n\n# src/blueprints/stoneblueprint.ts\n\nimport type { sampleentityconfig } from "../types";\n\n// here we define an entity blueprint, which contains 4 components and their default values\nexport const stoneblueprint: sampleentityconfig = {\n    position: {\n        x: 10.1,\n        y: 11.2,\n    },\n    sprite: {\n        image: "stone.png",\n        layer: 3,\n    },\n    pickup: {\n        material: "stone",\n        amount: 4,\n    },\n    camerafocus: {\n        weight: 42,\n    },\n};\n\n\nnow we can create a map, where the entity name is the key (by which we will later create the entity) and the blueprint is the value:\n\n\n# src/blueprints/index.ts\n\nimport type { sampleentityconfig } from "../types";\nimport { stoneblueprint } from "./stoneblueprint";\n\n// this is a map of entity names to entity blueprints\nexport const blueprints: record<string, sampleentityconfig> = {\n    stone: stoneblueprint,\n    // ... add more blueprints here\n};\n',charsets:{}},{title:"Code for the Components",frontmatter:{},regularPath:"/guide/data-driven/components.html",relativePath:"guide/data-driven/components.md",key:"v-16818fba",path:"/guide/data-driven/components.html",headers:[{level:2,title:"src/components/componentFactories.ts",slug:"src-components-componentfactories-ts",normalizedTitle:"src/components/componentfactories.ts",charIndex:212},{level:2,title:"src/components/CameraFocusComponent.ts",slug:"src-components-camerafocuscomponent-ts",normalizedTitle:"src/components/camerafocuscomponent.ts",charIndex:665},{level:2,title:"src/components/PositionComponent.ts",slug:"src-components-positioncomponent-ts",normalizedTitle:"src/components/positioncomponent.ts",charIndex:3204},{level:2,title:"src/components/SpriteComponent.ts",slug:"src-components-spritecomponent-ts",normalizedTitle:"src/components/spritecomponent.ts",charIndex:3704},{level:2,title:"src/components/PickupComponent.ts",slug:"src-components-pickupcomponent-ts",normalizedTitle:"src/components/pickupcomponent.ts",charIndex:4239}],headersStr:"src/components/componentFactories.ts src/components/CameraFocusComponent.ts src/components/PositionComponent.ts src/components/SpriteComponent.ts src/components/PickupComponent.ts",content:'# Code for the Components\n\nLet\'s create a folder src/components and add 5 files to it:\n\n * componentFactories.ts\n * PositionComponent.ts\n * SpriteComponent.ts\n * PickupComponent.ts\n * CameraFocusComponent.ts\n\n\n# src/components/componentFactories.ts\n\nimport { createComponentFactoryRegistry } from "typed-ecstasy";\n\nimport type { SampleContext, SampleEntityConfig } from "../types";\n\n// We define a component factory registry here, which knows the types we want to use\nexport const componentFactories = createComponentFactoryRegistry<SampleEntityConfig, SampleContext>();\n\n\nIgnore the types SampleEntityConfig and SampleContext for now, we\'ll get to them later.\n\n\n# src/components/CameraFocusComponent.ts\n\nimport { Component } from "typed-ecstasy";\n\nimport { componentFactories } from "./componentFactories";\n\n// First of all, we need the component itself. This is what you will interact with in your entity systems.\nexport class CameraFocusComponent extends Component {\n    public weight = 1;\n\n    // Optional: You can implement a reset method, which will be called if pooling is in place.\n    // It will be called when the component gets removed and the pool didn\'t reach its maximum size yet.\n    // But: This is rarely necessary, since you will mostly reset the values in the factory below.\n    // It might be a valid use-case if the component keeps references that might prevent garbage collection.\n    // public reset() {\n    //     this.weight = 1;\n    // }\n}\n\n// Then we need a configuration type, i.e. the data that is needed to assemble your entity correctly\n// To be able to configure the above component using a data-driven approach,\n// we need to first define, what properties can be configured using that data.\n// The following interface represent your json data:\nexport type CameraFocusConfig = {\n    weight?: number;\n};\n\n// Finally, we need to register a factory, which reads values from the blueprint and assigns it to the new component.\ncomponentFactories.add(\n    // The first parameter must be a key from SampleEntityConfig.\n    "CameraFocus",\n    // The second parameter is a factory function to assemble the component.\n    (obtain, blueprint, context) => {\n        // Use obtain() to create a component rather than creating one using `new`. This allows us to use object pooling.\n        const comp = obtain(CameraFocusComponent);\n        // Use blueprint.get to receive configuration properties\n        // It will automatically know the property names and types as specified in the config type above.\n        comp.weight = blueprint.get(\n            // blueprint.get() has autocompletion for the properties you defined in the config type above!\n            "weight",\n            // The second parameter is a fallback value, which gets used when the blueprint does not have a value for the specified key.\n            // Its type is matched against the type in your config type above.\n            // Check out ../types.ts to find out what a context is!\n            context.defaultCameraFocusWeight\n        );\n\n        // A component factory must return a fully initialized component or null if you want to skip adding this component for some reason.\n        return comp;\n    }\n);\n\n\n\n# src/components/PositionComponent.ts\n\nimport { Component } from "typed-ecstasy";\n\nimport { componentFactories } from "./componentFactories";\n\nexport class PositionComponent extends Component {\n    public x = 0;\n    public y = 0;\n}\n\nexport type PositionConfig = {\n    x?: number;\n    y?: number;\n};\n\ncomponentFactories.add("Position", (obtain, blueprint) => {\n    const comp = obtain(PositionComponent);\n    comp.x = blueprint.get("x", 1);\n    comp.y = blueprint.get("y", 2);\n    return comp;\n});\n\n\n\n# src/components/SpriteComponent.ts\n\nimport { Component } from "typed-ecstasy";\n\nimport { componentFactories } from "./componentFactories";\n\nexport class SpriteComponent extends Component {\n    public image = "";\n    public layer = 0;\n}\n\nexport type SpriteConfig = {\n    image: string;\n    layer?: number;\n};\n\ncomponentFactories.add("Sprite", (obtain, blueprint) => {\n    const comp = obtain(SpriteComponent);\n    comp.image = blueprint.get("image", "notfound.png");\n    comp.layer = blueprint.get("layer", 1);\n    return comp;\n});\n\n\n\n# src/components/PickupComponent.ts\n\nimport { Component } from "typed-ecstasy";\n\nimport { componentFactories } from "./componentFactories";\n\nexport class PickupComponent extends Component {\n    public material: "stone" | "wood" = "wood";\n    public amount = 1;\n}\n\nexport type PickupConfig = {\n    material: "stone" | "wood";\n    amount: number;\n};\n\ncomponentFactories.add("Pickup", (obtain, blueprint) => {\n    const comp = obtain(PickupComponent);\n    comp.material = blueprint.get("material", "wood");\n    comp.amount = blueprint.get("amount", 1);\n    return comp;\n});\n',normalizedContent:'# code for the components\n\nlet\'s create a folder src/components and add 5 files to it:\n\n * componentfactories.ts\n * positioncomponent.ts\n * spritecomponent.ts\n * pickupcomponent.ts\n * camerafocuscomponent.ts\n\n\n# src/components/componentfactories.ts\n\nimport { createcomponentfactoryregistry } from "typed-ecstasy";\n\nimport type { samplecontext, sampleentityconfig } from "../types";\n\n// we define a component factory registry here, which knows the types we want to use\nexport const componentfactories = createcomponentfactoryregistry<sampleentityconfig, samplecontext>();\n\n\nignore the types sampleentityconfig and samplecontext for now, we\'ll get to them later.\n\n\n# src/components/camerafocuscomponent.ts\n\nimport { component } from "typed-ecstasy";\n\nimport { componentfactories } from "./componentfactories";\n\n// first of all, we need the component itself. this is what you will interact with in your entity systems.\nexport class camerafocuscomponent extends component {\n    public weight = 1;\n\n    // optional: you can implement a reset method, which will be called if pooling is in place.\n    // it will be called when the component gets removed and the pool didn\'t reach its maximum size yet.\n    // but: this is rarely necessary, since you will mostly reset the values in the factory below.\n    // it might be a valid use-case if the component keeps references that might prevent garbage collection.\n    // public reset() {\n    //     this.weight = 1;\n    // }\n}\n\n// then we need a configuration type, i.e. the data that is needed to assemble your entity correctly\n// to be able to configure the above component using a data-driven approach,\n// we need to first define, what properties can be configured using that data.\n// the following interface represent your json data:\nexport type camerafocusconfig = {\n    weight?: number;\n};\n\n// finally, we need to register a factory, which reads values from the blueprint and assigns it to the new component.\ncomponentfactories.add(\n    // the first parameter must be a key from sampleentityconfig.\n    "camerafocus",\n    // the second parameter is a factory function to assemble the component.\n    (obtain, blueprint, context) => {\n        // use obtain() to create a component rather than creating one using `new`. this allows us to use object pooling.\n        const comp = obtain(camerafocuscomponent);\n        // use blueprint.get to receive configuration properties\n        // it will automatically know the property names and types as specified in the config type above.\n        comp.weight = blueprint.get(\n            // blueprint.get() has autocompletion for the properties you defined in the config type above!\n            "weight",\n            // the second parameter is a fallback value, which gets used when the blueprint does not have a value for the specified key.\n            // its type is matched against the type in your config type above.\n            // check out ../types.ts to find out what a context is!\n            context.defaultcamerafocusweight\n        );\n\n        // a component factory must return a fully initialized component or null if you want to skip adding this component for some reason.\n        return comp;\n    }\n);\n\n\n\n# src/components/positioncomponent.ts\n\nimport { component } from "typed-ecstasy";\n\nimport { componentfactories } from "./componentfactories";\n\nexport class positioncomponent extends component {\n    public x = 0;\n    public y = 0;\n}\n\nexport type positionconfig = {\n    x?: number;\n    y?: number;\n};\n\ncomponentfactories.add("position", (obtain, blueprint) => {\n    const comp = obtain(positioncomponent);\n    comp.x = blueprint.get("x", 1);\n    comp.y = blueprint.get("y", 2);\n    return comp;\n});\n\n\n\n# src/components/spritecomponent.ts\n\nimport { component } from "typed-ecstasy";\n\nimport { componentfactories } from "./componentfactories";\n\nexport class spritecomponent extends component {\n    public image = "";\n    public layer = 0;\n}\n\nexport type spriteconfig = {\n    image: string;\n    layer?: number;\n};\n\ncomponentfactories.add("sprite", (obtain, blueprint) => {\n    const comp = obtain(spritecomponent);\n    comp.image = blueprint.get("image", "notfound.png");\n    comp.layer = blueprint.get("layer", 1);\n    return comp;\n});\n\n\n\n# src/components/pickupcomponent.ts\n\nimport { component } from "typed-ecstasy";\n\nimport { componentfactories } from "./componentfactories";\n\nexport class pickupcomponent extends component {\n    public material: "stone" | "wood" = "wood";\n    public amount = 1;\n}\n\nexport type pickupconfig = {\n    material: "stone" | "wood";\n    amount: number;\n};\n\ncomponentfactories.add("pickup", (obtain, blueprint) => {\n    const comp = obtain(pickupcomponent);\n    comp.material = blueprint.get("material", "wood");\n    comp.amount = blueprint.get("amount", 1);\n    return comp;\n});\n',charsets:{cjk:!0}},{title:"Setting Up the Entity Factory",frontmatter:{},regularPath:"/guide/data-driven/entityfactory.html",relativePath:"guide/data-driven/entityfactory.md",key:"v-c6c422ce",path:"/guide/data-driven/entityfactory.html",headers:[{level:2,title:"Setting Up the Entity Factory",slug:"setting-up-the-entity-factory",normalizedTitle:"setting up the entity factory",charIndex:2},{level:2,title:"src/entityFactory.ts",slug:"src-entityfactory-ts",normalizedTitle:"src/entityfactory.ts",charIndex:130}],headersStr:"Setting Up the Entity Factory src/entityFactory.ts",content:'# Setting Up the Entity Factory\n\nFinally, let\'s configure an EntityFactory, which will then be able to assemble our entities:\n\n\n# src/entityFactory.ts\n\nimport { EntityFactory, ComponentBlueprint, Allocator } from "typed-ecstasy";\n\nimport { blueprints } from "./blueprints";\nimport { componentFactories } from "./components/componentFactories";\nimport type { SampleContext, SampleEntityConfig } from "./types";\n\n// This shows how you could set up an entity factory.\nexport function setupEntityFactory() {\n    // Create the context instance to pass to all component factories\n    const context: SampleContext = { defaultCameraFocusWeight: 1 };\n\n    // Create the entity factory itself\n    const factory = new EntityFactory<SampleEntityConfig, SampleContext>(componentFactories, context, new Allocator());\n\n    // Add all entity blueprints\n    for (const name of Object.keys(blueprints)) {\n        const entityConfig = blueprints[name];\n\n        // An entity blueprint is essentially just an array of ComponentBlueprint objects.\n        const entityBlueprint = Object.keys(entityConfig).map(\n            // eslint-disable-next-line no-loop-func\n            (key) => new ComponentBlueprint(key, entityConfig[key as keyof SampleEntityConfig])\n        );\n        factory.addEntityBlueprint(name, entityBlueprint);\n    }\n\n    return factory;\n}\n',normalizedContent:'# setting up the entity factory\n\nfinally, let\'s configure an entityfactory, which will then be able to assemble our entities:\n\n\n# src/entityfactory.ts\n\nimport { entityfactory, componentblueprint, allocator } from "typed-ecstasy";\n\nimport { blueprints } from "./blueprints";\nimport { componentfactories } from "./components/componentfactories";\nimport type { samplecontext, sampleentityconfig } from "./types";\n\n// this shows how you could set up an entity factory.\nexport function setupentityfactory() {\n    // create the context instance to pass to all component factories\n    const context: samplecontext = { defaultcamerafocusweight: 1 };\n\n    // create the entity factory itself\n    const factory = new entityfactory<sampleentityconfig, samplecontext>(componentfactories, context, new allocator());\n\n    // add all entity blueprints\n    for (const name of object.keys(blueprints)) {\n        const entityconfig = blueprints[name];\n\n        // an entity blueprint is essentially just an array of componentblueprint objects.\n        const entityblueprint = object.keys(entityconfig).map(\n            // eslint-disable-next-line no-loop-func\n            (key) => new componentblueprint(key, entityconfig[key as keyof sampleentityconfig])\n        );\n        factory.addentityblueprint(name, entityblueprint);\n    }\n\n    return factory;\n}\n',charsets:{}},{title:"EntityConfig and Context",frontmatter:{},regularPath:"/guide/data-driven/types.html",relativePath:"guide/data-driven/types.md",key:"v-4e62f04e",path:"/guide/data-driven/types.html",headers:[{level:2,title:"src/types.ts",slug:"src-types-ts",normalizedTitle:"src/types.ts",charIndex:186}],headersStr:"src/types.ts",content:'# EntityConfig and Context\n\nAs you saw in the componentFactory.ts, we need to define two types: SampleEntityConfig and SampleContext,\n\nHere\'s an example of how they might look like:\n\n\n# src/types.ts\n\nimport type { PositionConfig } from "./components/PositionComponent";\nimport type { SpriteConfig } from "./components/SpriteComponent";\nimport type { PickupConfig } from "./components/PickupComponent";\nimport type { CameraFocusConfig } from "./components/CameraFocusComponent";\n\n/**\n * We need a type to define the possible composition of an entity.\n * In other words, what components an entity might have and what values should be used for the component configurations.\n */\nexport type SampleEntityConfig = {\n    // The keys here will be used when setting up the component factories.\n    Position?: PositionConfig;\n    Sprite?: SpriteConfig;\n    Pickup?: PickupConfig;\n    CameraFocus?: CameraFocusConfig;\n};\n\n/**\n * Context is a custom object that can be passed to the component factories (as a second parameter).\n * This could, for example, be (or contain) an asset manager.\n * For the sake of this simple demo, one simple property will suffice.\n */\nexport type SampleContext = {\n    defaultCameraFocusWeight: number;\n};\n\n\nYou can pass anything you\'d like to component factories. Just make sure you have a type for it.',normalizedContent:'# entityconfig and context\n\nas you saw in the componentfactory.ts, we need to define two types: sampleentityconfig and samplecontext,\n\nhere\'s an example of how they might look like:\n\n\n# src/types.ts\n\nimport type { positionconfig } from "./components/positioncomponent";\nimport type { spriteconfig } from "./components/spritecomponent";\nimport type { pickupconfig } from "./components/pickupcomponent";\nimport type { camerafocusconfig } from "./components/camerafocuscomponent";\n\n/**\n * we need a type to define the possible composition of an entity.\n * in other words, what components an entity might have and what values should be used for the component configurations.\n */\nexport type sampleentityconfig = {\n    // the keys here will be used when setting up the component factories.\n    position?: positionconfig;\n    sprite?: spriteconfig;\n    pickup?: pickupconfig;\n    camerafocus?: camerafocusconfig;\n};\n\n/**\n * context is a custom object that can be passed to the component factories (as a second parameter).\n * this could, for example, be (or contain) an asset manager.\n * for the sake of this simple demo, one simple property will suffice.\n */\nexport type samplecontext = {\n    defaultcamerafocusweight: number;\n};\n\n\nyou can pass anything you\'d like to component factories. just make sure you have a type for it.',charsets:{}},{title:"Using the Entity Factory",frontmatter:{},regularPath:"/guide/data-driven/usage.html",relativePath:"guide/data-driven/usage.md",key:"v-7b20e0d9",path:"/guide/data-driven/usage.html",headers:[{level:2,title:"src/entrypoint.ts",slug:"src-entrypoint-ts",normalizedTitle:"src/entrypoint.ts",charIndex:66}],headersStr:"src/entrypoint.ts",content:'# Using the Entity Factory\n\nNow we can assembly our entities:\n\n\n# src/entrypoint.ts\n\nimport { Engine } from "typed-ecstasy";\n\nimport { setupEntityFactory } from "./entityFactory";\n\n// This is a simplified example of how you would use an entity factory to assemble entities\nconst engine = new Engine();\nconst factory = setupEntityFactory();\n\n// Create an entity in a simple fashion:\nconst simple = factory.assemble("stone");\n// Then add it to the engine:\nengine.entities.add(simple);\n\n// Or override settings by component:\nconst modified = factory.assemble("stone", {\n    Position: {\n        x: 1337,\n        y: 1337,\n    },\n});\n// Don\'t forget to add it to the engine:\nengine.entities.add(modified);\n',normalizedContent:'# using the entity factory\n\nnow we can assembly our entities:\n\n\n# src/entrypoint.ts\n\nimport { engine } from "typed-ecstasy";\n\nimport { setupentityfactory } from "./entityfactory";\n\n// this is a simplified example of how you would use an entity factory to assemble entities\nconst engine = new engine();\nconst factory = setupentityfactory();\n\n// create an entity in a simple fashion:\nconst simple = factory.assemble("stone");\n// then add it to the engine:\nengine.entities.add(simple);\n\n// or override settings by component:\nconst modified = factory.assemble("stone", {\n    position: {\n        x: 1337,\n        y: 1337,\n    },\n});\n// don\'t forget to add it to the engine:\nengine.entities.add(modified);\n',charsets:{}},{title:"Migration Guide",frontmatter:{},regularPath:"/guide/migration.html",relativePath:"guide/migration.md",key:"v-5026c2f9",path:"/guide/migration.html",headers:[{level:2,title:"Migration from V1 to V2",slug:"migration-from-v1-to-v2",normalizedTitle:"migration from v1 to v2",charIndex:22},{level:3,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:603},{level:3,title:"Changes to Your EntitySystems",slug:"changes-to-your-entitysystems",normalizedTitle:"changes to your entitysystems",charIndex:669},{level:3,title:"Entity/System Managers",slug:"entity-system-managers",normalizedTitle:"entity/system managers",charIndex:1355},{level:3,title:"More Changes",slug:"more-changes",normalizedTitle:"more changes",charIndex:1757}],headersStr:"Migration from V1 to V2 Installation Changes to Your EntitySystems Entity/System Managers More Changes",content:"# Migration Guide\n\n\n# Migration from V1 to V2\n\nVersion 2 changes quite a bit on how you create and access entities, components and systems.\n\nThe reason for this is:\n\n * The introduction of Dependency Injection.\n * Extracting the logic of the entity and system management out of the engine into separate classes.\n * The introduction of object pooling.\n * The official introduction of entity/component factories (they existed in V1, but have not been well documented at the time).\n\nWhile I would advice to read the new documentation, here's a quick guide on how to move your code from Version 1 to 2:\n\n\n# Installation\n\nJust follow the instructions in the setup guide\n\n\n# Changes to Your EntitySystems\n\n 1. First of all, check out the documentation on Dependency Injection.\n 2. Remove all constructor parameters from your systems and either use dependency injection or setters to pass values to your system instead.\n 3. addedToEngine and removedFromEngine no longer exist. Instead, engine is added via dependency injection.\n\n * access it via this.engine.\n * Use onEnable/onDisable to execute startup code (some injected dependencies like engine might not be available yet in the constructor).\n * setProcessing, etc. has been renamed to setEnabled\n\n 4. Priority changes no longer require manual resorting. Do not override set/getPriority to avoid issues.\n\n\n# Entity/System Managers\n\nMost of the code in Engine has been moved into EntityManager and EntitySystemManager.\n\nAs such, you will have to change your calls from engine.x to engine.entities.x or engine.systems.x. Some properties and methods might have changed a bit in how they are accessed. It should be relatively obvious when you see the new properties/methods to see how you move to the new API.\n\n\n# More Changes\n\nMore changes might be required, depending on what you used. It should feel relatively familiar though once you dig into it. As said, I'd recommend for you to read the new documentation. I've spend a lot of time to write everything down.",normalizedContent:"# migration guide\n\n\n# migration from v1 to v2\n\nversion 2 changes quite a bit on how you create and access entities, components and systems.\n\nthe reason for this is:\n\n * the introduction of dependency injection.\n * extracting the logic of the entity and system management out of the engine into separate classes.\n * the introduction of object pooling.\n * the official introduction of entity/component factories (they existed in v1, but have not been well documented at the time).\n\nwhile i would advice to read the new documentation, here's a quick guide on how to move your code from version 1 to 2:\n\n\n# installation\n\njust follow the instructions in the setup guide\n\n\n# changes to your entitysystems\n\n 1. first of all, check out the documentation on dependency injection.\n 2. remove all constructor parameters from your systems and either use dependency injection or setters to pass values to your system instead.\n 3. addedtoengine and removedfromengine no longer exist. instead, engine is added via dependency injection.\n\n * access it via this.engine.\n * use onenable/ondisable to execute startup code (some injected dependencies like engine might not be available yet in the constructor).\n * setprocessing, etc. has been renamed to setenabled\n\n 4. priority changes no longer require manual resorting. do not override set/getpriority to avoid issues.\n\n\n# entity/system managers\n\nmost of the code in engine has been moved into entitymanager and entitysystemmanager.\n\nas such, you will have to change your calls from engine.x to engine.entities.x or engine.systems.x. some properties and methods might have changed a bit in how they are accessed. it should be relatively obvious when you see the new properties/methods to see how you move to the new api.\n\n\n# more changes\n\nmore changes might be required, depending on what you used. it should feel relatively familiar though once you dig into it. as said, i'd recommend for you to read the new documentation. i've spend a lot of time to write everything down.",charsets:{}},{title:"Overview",frontmatter:{},regularPath:"/guide/systems/",relativePath:"guide/systems/README.md",key:"v-18783384",path:"/guide/systems/",headersStr:null,content:"# Overview\n\ntyped-ecstasy comes with a few Entity Systems that will spare you from typing boilerplate code.\n\nMake sure to check out the page about Dependency Injection. All built-in EntitySystems require constructor arguments, so you'll need to create constructors, which call the super-constructor.\n\n * IteratingSystem: Iterate over a Family of entities\n * IntervalSystem: Run code at a constant interval\n * IntervalIteratingSystem: Iterate over a Family of entities at a constant interval\n * SortedIteratingSystem: Iterate over a sorted Family of entities\n * SortedSubIteratingSystem: Imagine a SortedIteratingSystem that you can add SubSystems to",normalizedContent:"# overview\n\ntyped-ecstasy comes with a few entity systems that will spare you from typing boilerplate code.\n\nmake sure to check out the page about dependency injection. all built-in entitysystems require constructor arguments, so you'll need to create constructors, which call the super-constructor.\n\n * iteratingsystem: iterate over a family of entities\n * intervalsystem: run code at a constant interval\n * intervaliteratingsystem: iterate over a family of entities at a constant interval\n * sortediteratingsystem: iterate over a sorted family of entities\n * sortedsubiteratingsystem: imagine a sortediteratingsystem that you can add subsystems to",charsets:{}},{title:"IntervalIteratingSystem",frontmatter:{},regularPath:"/guide/systems/intervaliteratingsystem.html",relativePath:"guide/systems/intervaliteratingsystem.md",key:"v-00e1f18e",path:"/guide/systems/intervaliteratingsystem.html",headersStr:null,content:"# IntervalIteratingSystem\n\nIt is also possible to combine the logic of IteratingSystem and IntervalSystem thanks to IntervalIteratingSystem. In this case, you will need to implement its processEntity() method.\n\n@Service()\nclass MovementSystem extends IntervalSystem {\n\tpublic constructor() {\n\t\tsuper(Family.all(PositionComponent, VelocityComponent).get(), 0.016);\n\t}\n\n\tprotected override processEntity(entity: Entity) {\n\t\tconst position = entity.require(PositionComponent);\n\t\tconst velocity = entity.require(SpyComponent);\n\n\t\tposition.x += velocity.x;\n\t\tposition.y += velocity.y;\n\t}\n}\n",normalizedContent:"# intervaliteratingsystem\n\nit is also possible to combine the logic of iteratingsystem and intervalsystem thanks to intervaliteratingsystem. in this case, you will need to implement its processentity() method.\n\n@service()\nclass movementsystem extends intervalsystem {\n\tpublic constructor() {\n\t\tsuper(family.all(positioncomponent, velocitycomponent).get(), 0.016);\n\t}\n\n\tprotected override processentity(entity: entity) {\n\t\tconst position = entity.require(positioncomponent);\n\t\tconst velocity = entity.require(spycomponent);\n\n\t\tposition.x += velocity.x;\n\t\tposition.y += velocity.y;\n\t}\n}\n",charsets:{}},{title:"IntervalSystem",frontmatter:{},regularPath:"/guide/systems/intervalsystem.html",relativePath:"guide/systems/intervalsystem.md",key:"v-3f563961",path:"/guide/systems/intervalsystem.html",headersStr:null,content:"# IntervalSystem\n\nSometimes you might want to make a system not run every tick, but at constant intervals. Rather than messing about with setEnabled() you can extend the IntervalSystem class and implement its updateInterval() method.\n\n@Service()\nclass TickSystem extends IntervalSystem {\n\tprivate tick = 0;\n\n\tpublic constructor() {\n\t\tsuper(0.016);\n\t}\n\n\tprotected override updateInterval() {\n\t\tthis.tick++;\n\t}\n}\n",normalizedContent:"# intervalsystem\n\nsometimes you might want to make a system not run every tick, but at constant intervals. rather than messing about with setenabled() you can extend the intervalsystem class and implement its updateinterval() method.\n\n@service()\nclass ticksystem extends intervalsystem {\n\tprivate tick = 0;\n\n\tpublic constructor() {\n\t\tsuper(0.016);\n\t}\n\n\tprotected override updateinterval() {\n\t\tthis.tick++;\n\t}\n}\n",charsets:{}},{title:"IteratingSystem",frontmatter:{},regularPath:"/guide/systems/iteratingsystem.html",relativePath:"guide/systems/iteratingsystem.md",key:"v-db1118ce",path:"/guide/systems/iteratingsystem.html",headersStr:null,content:"# IteratingSystem\n\nMost of the time, you will only need to iterate over a family of entities. In that case you can just extend the IteratingSystem class and override its processEntity() method.\n\n@Service()\nclass MovementSystem extends IteratingSystem {\n\tpublic constructor() {\n\t\tsuper(Family.all(PositionComponent, VelocityComponent).get());\n\t}\n\n\tprotected override processEntity(entity: Entity, deltaTime: number) {\n\t\tconst position = entity.require(PositionComponent);\n\t\tconst velocity = entity.require(SpyComponent);\n\t\t\t\n\t\tposition.x += velocity.x * deltaTime;\n\t\tposition.y += velocity.y * deltaTime;\n\t}\n}\n",normalizedContent:"# iteratingsystem\n\nmost of the time, you will only need to iterate over a family of entities. in that case you can just extend the iteratingsystem class and override its processentity() method.\n\n@service()\nclass movementsystem extends iteratingsystem {\n\tpublic constructor() {\n\t\tsuper(family.all(positioncomponent, velocitycomponent).get());\n\t}\n\n\tprotected override processentity(entity: entity, deltatime: number) {\n\t\tconst position = entity.require(positioncomponent);\n\t\tconst velocity = entity.require(spycomponent);\n\t\t\t\n\t\tposition.x += velocity.x * deltatime;\n\t\tposition.y += velocity.y * deltatime;\n\t}\n}\n",charsets:{}},{title:"SortedIteratingSystem",frontmatter:{},regularPath:"/guide/systems/sortediteratingsystem.html",relativePath:"guide/systems/sortediteratingsystem.md",key:"v-7aae0b0e",path:"/guide/systems/sortediteratingsystem.html",headersStr:null,content:"# SortedIteratingSystem\n\nWhenever you need to iterate over a family of entities in a specific order, SortedIteratingSystem will be your friend. You simply need to specify the family, a comparator and implement the processEntity() method.\n\nLet's say we're writing a RenderingSystem that processes entities with a RenderableComponent and a PositionComponent. The z value of the position will determine the order in which entities are processed, the system will sort them for you automatically.\n\nfunction comparator(a: Entity, b: Entity): number {\n\treturn a.require(PositionComponent).z - b.require(PositionComponent).z;\n}\n\n@Service()\nclass RenderingSystem extends SortedIteratingSystem {\n\tpublic constructor() {\n\t\tsuper(Family.all(RenderableComponent, PositionComponent).get(), comparator);\n\t}\n\n\tprotected processEntity(entity: Entity, deltaTime: number): void {\n\t\t// Render the entity\n\t}\n}\n",normalizedContent:"# sortediteratingsystem\n\nwhenever you need to iterate over a family of entities in a specific order, sortediteratingsystem will be your friend. you simply need to specify the family, a comparator and implement the processentity() method.\n\nlet's say we're writing a renderingsystem that processes entities with a renderablecomponent and a positioncomponent. the z value of the position will determine the order in which entities are processed, the system will sort them for you automatically.\n\nfunction comparator(a: entity, b: entity): number {\n\treturn a.require(positioncomponent).z - b.require(positioncomponent).z;\n}\n\n@service()\nclass renderingsystem extends sortediteratingsystem {\n\tpublic constructor() {\n\t\tsuper(family.all(renderablecomponent, positioncomponent).get(), comparator);\n\t}\n\n\tprotected processentity(entity: entity, deltatime: number): void {\n\t\t// render the entity\n\t}\n}\n",charsets:{}},{title:"SortedSubIteratingSystem",frontmatter:{},regularPath:"/guide/systems/sortedsubiteratingsystem.html",relativePath:"guide/systems/sortedsubiteratingsystem.md",key:"v-26a1ae83",path:"/guide/systems/sortedsubiteratingsystem.html",headersStr:null,content:"# SortedSubIteratingSystem\n\nGoing one step further, what if you want to perform multiple render steps for an entity before rendering the next one? For example, render a sprite and above that some particle effects of a player. Both should be obscured by the tree that is in front of the player.\n\nSortedSubIteratingSystem allows to add multiple SubSystem instances to the system.\n\n@Service()\nclass SpriteRenderSystem extends SubSystem {\n    public constructor() {\n        super(Family.all(SpriteComponent).get());\n    }\n\n\tpublic processEntity(entity: Entity, deltaTime: number) {\n\t\t// Render the sprite\n\t}\n}\n\n@Service()\nclass ParticleRenderSystem extends SubSystem {\n    public constructor() {\n        super(Family.all(ParticlesComponent).get());\n    }\n\n\tpublic processEntity(entity: Entity, deltaTime: number) {\n\t\t// Render particles\n\t}\n}\n\n@Service()\nclass RenderSystem extends SortedSubIteratingSystem {\n    public constructor() {\n        super(Family.all(PositionComponent).one(SpriteComponent, ParticlesComponent).get(), comparator);\n\t\tthis.subSystems.add(SpriteRenderSystem);\n\t\tthis.subSystems.add(ParticleRenderSystem);\n    }\n}\n\n",normalizedContent:"# sortedsubiteratingsystem\n\ngoing one step further, what if you want to perform multiple render steps for an entity before rendering the next one? for example, render a sprite and above that some particle effects of a player. both should be obscured by the tree that is in front of the player.\n\nsortedsubiteratingsystem allows to add multiple subsystem instances to the system.\n\n@service()\nclass spriterendersystem extends subsystem {\n    public constructor() {\n        super(family.all(spritecomponent).get());\n    }\n\n\tpublic processentity(entity: entity, deltatime: number) {\n\t\t// render the sprite\n\t}\n}\n\n@service()\nclass particlerendersystem extends subsystem {\n    public constructor() {\n        super(family.all(particlescomponent).get());\n    }\n\n\tpublic processentity(entity: entity, deltatime: number) {\n\t\t// render particles\n\t}\n}\n\n@service()\nclass rendersystem extends sortedsubiteratingsystem {\n    public constructor() {\n        super(family.all(positioncomponent).one(spritecomponent, particlescomponent).get(), comparator);\n\t\tthis.subsystems.add(spriterendersystem);\n\t\tthis.subsystems.add(particlerendersystem);\n    }\n}\n\n",charsets:{}},{title:"What is an ECS?",frontmatter:{},regularPath:"/guide/what-is-an-ecs.html",relativePath:"guide/what-is-an-ecs.md",key:"v-7119cffe",path:"/guide/what-is-an-ecs.html",headers:[{level:2,title:"Inheritance",slug:"inheritance",normalizedTitle:"inheritance",charIndex:208},{level:2,title:"Composition Over Inheritance",slug:"composition-over-inheritance",normalizedTitle:"composition over inheritance",charIndex:522},{level:3,title:"Component Examples",slug:"component-examples",normalizedTitle:"component examples",charIndex:859},{level:3,title:"System Examples",slug:"system-examples",normalizedTitle:"system examples",charIndex:982},{level:2,title:"Benefits",slug:"benefits",normalizedTitle:"benefits",charIndex:1179}],headersStr:"Inheritance Composition Over Inheritance Component Examples System Examples Benefits",content:"# What is an ECS?\n\nYou might want to read this detailed GameDev.net Article about Entity Component Systems, but just in case the above link is broken or you want a shorter explanation, I'll summarize it:\n\n\n# Inheritance\n\nSome games, especially older ones, would create entities by using inheritance and store both data and logic in classes:\n\n * Entity\n   * Character\n     * Player\n     * Enemy\n   * Item\n\nBut this way, you might end up duplicating code and possibly having very large classes containing all the logic.\n\n\n# Composition Over Inheritance\n\nWith an ECS, instead of creating classes, which contain both data and logic for a specific entity type, you separate the data and the logic:\n\n * An entity is only an id and a list of components\n * A component contains only data\n * A system contains the logic to process entities with certain components\n\n\n# Component Examples\n\n * PositionComponent (x, y)\n * HealthComponent (value)\n * SpriteComponent (image, animations, ...)\n\n\n# System Examples\n\n * PhysicsSystem - Applies velocity to positions and checks for collision\n * RenderSystem - Draws sprites\n * DamageSystem - Adjusts the health level in case of a damage event.\n\n\n# Benefits\n\n * Write logic that can be reused on multiple entity types and doesn't have to know how the other game logic behaves.\n * Use a data-driven approach or persist your game-state.\n * Prevent conflicts while multiple people work on the same entity type, but on different logic.\n * Creating new entity types might be as easy as composing different components.\n * Trying new logic is a matter of enabling new systems and possibly disabling others.",normalizedContent:"# what is an ecs?\n\nyou might want to read this detailed gamedev.net article about entity component systems, but just in case the above link is broken or you want a shorter explanation, i'll summarize it:\n\n\n# inheritance\n\nsome games, especially older ones, would create entities by using inheritance and store both data and logic in classes:\n\n * entity\n   * character\n     * player\n     * enemy\n   * item\n\nbut this way, you might end up duplicating code and possibly having very large classes containing all the logic.\n\n\n# composition over inheritance\n\nwith an ecs, instead of creating classes, which contain both data and logic for a specific entity type, you separate the data and the logic:\n\n * an entity is only an id and a list of components\n * a component contains only data\n * a system contains the logic to process entities with certain components\n\n\n# component examples\n\n * positioncomponent (x, y)\n * healthcomponent (value)\n * spritecomponent (image, animations, ...)\n\n\n# system examples\n\n * physicssystem - applies velocity to positions and checks for collision\n * rendersystem - draws sprites\n * damagesystem - adjusts the health level in case of a damage event.\n\n\n# benefits\n\n * write logic that can be reused on multiple entity types and doesn't have to know how the other game logic behaves.\n * use a data-driven approach or persist your game-state.\n * prevent conflicts while multiple people work on the same entity type, but on different logic.\n * creating new entity types might be as easy as composing different components.\n * trying new logic is a matter of enabling new systems and possibly disabling others.",charsets:{}}],themeConfig:{sidebarDepth:0,nav:[{link:"/guide/",text:"Guide"},{link:"/api/",text:"API"},{link:"https://github.com/lusito/typed-ecstasy",text:"Github"},{link:"https://www.npmjs.com/package/typed-ecstasy",text:"NPM"}],sidebar:{"/guide/":[{title:"Getting Started",children:["","migration","what-is-an-ecs"]},{title:"Core Concepts",children:["core/","core/dependency-injection","core/engine","core/entity","core/component","core/family","core/entitysystem","core/signal","core/pooling","core/special-considerations"]},{title:"Built-In Systems",children:["systems/","systems/iteratingsystem","systems/intervalsystem","systems/intervaliteratingsystem","systems/sortediteratingsystem","systems/sortedsubiteratingsystem"]},{title:"Data Driven Approach",children:["data-driven/","data-driven/components","data-driven/types","data-driven/blueprints","data-driven/entityfactory","data-driven/usage"]}]},displayAllHeaders:!0,logo:"/logo.png",logoAlt:"Logo Alt"}};t(304);Oi.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,443))})),Oi.component("CodeBlock",(function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,382))})),Oi.component("CodeGroup",(function(){return Promise.all([t.e(0),t.e(5)]).then(t.bind(null,383))}));t(305);var ua=[{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){var e=n.siteData;n.options;e.themeConfig.sidebarDepth=0,e.themeConfig.sidebar=Object.assign({},e.themeConfig.sidebar,{"/api/":[{title:"API",children:[["/api/","Readme"],["/api/modules","Exports"],{title:"Classes",children:[["classes/AbstractSystem","AbstractSystem"],["classes/AbstractSystemManager","AbstractSystemManager"],["classes/Allocator","Allocator"],["classes/Bits","Bits"],["classes/Component","Component"],["classes/ComponentBlueprint","ComponentBlueprint"],["classes/Engine","Engine"],["classes/Entity","Entity"],["classes/EntityFactory","EntityFactory"],["classes/EntityManager","EntityManager"],["classes/EntitySignal","EntitySignal"],["classes/EntitySystem","EntitySystem"],["classes/EntitySystemManager","EntitySystemManager"],["classes/Family","Family"],["classes/FamilyBuilder","FamilyBuilder"],["classes/IntervalIteratingSystem","IntervalIteratingSystem"],["classes/IntervalSystem","IntervalSystem"],["classes/IteratingSystem","IteratingSystem"],["classes/Pool","Pool"],["classes/PoolAllocator","PoolAllocator"],["classes/ReadonlyBits","ReadonlyBits"],["classes/SortedIteratingSystem","SortedIteratingSystem"],["classes/SortedSubIteratingSystem","SortedSubIteratingSystem"],["classes/SubSystem","SubSystem"],["classes/SubSystemManager","SubSystemManager"]]},{title:"Interfaces",children:[["interfaces/ComponentConstructor","ComponentConstructor"],["interfaces/NoArgsComponentConstructor","NoArgsComponentConstructor"],["interfaces/PoolAllocatorConfig","PoolAllocatorConfig"],["interfaces/Poolable","Poolable"],["interfaces/ReadonlyInt32Array","ReadonlyInt32Array"],["interfaces/SystemConstructor","SystemConstructor"]]}],initialOpenGroupIndex:-1,collapsable:!1}]})}],ma=[];function ha(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(177);function pa(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function fa(n,e,t){return e&&pa(n.prototype,e),t&&pa(n,t),n}t(168);t(159);function ya(n,e){return(ya=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(160);function ga(n){return(ga=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}var ba=t(165),va=t.n(ba);function xa(n,e){return!e||"object"!==va()(e)&&"function"!=typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function Ta(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=ga(n);if(e){var i=ga(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return xa(this,t)}}var wa=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&ya(n,e)}(t,n);var e=Ta(t);function t(){return ha(this,t),e.apply(this,arguments)}return t}(function(){function n(){ha(this,n),this.store=new Oi({data:{state:{}}})}return fa(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Oi.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(wa.prototype,{getPageAsyncComponent:Ls,getLayoutAsyncComponent:Ys,getAsyncComponent:Us,getVueComponent:Ws});var Ea={install:function(n){var e=new wa;n.$vuepress=e,n.prototype.$vuepress=e}};function Ia(n){n.beforeEach((function(e,t,r){if(Sa(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var i=e.path.replace(/\/$/,"")+".html";Sa(n,i)?r(i):r()}else r();else{var o=e.path+"/",s=e.path+".html";Sa(n,s)?r(s):Sa(n,o)?r(o):r()}}))}function Sa(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Ca={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Vs("pageKey",e),Oi.component(e)||Oi.component(e,Ls(e)),Oi.component(e)?n(e):n("")}},Pa={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},Aa={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},ka=(t(307),t(308),Object(aa.a)(Aa,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function za(){return(za=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,i,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:da.routerBase||da.base,Ia(r=new Is({base:t,mode:"history",fallback:!1,routes:ca,scrollBehavior:function(n,e,t){return t||(n.hash?!Oi.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),i={},n.prev=4,n.next=7,Promise.all(ua.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Oi,options:i,router:r,siteData:da,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return o=new Oi(Object.assign(i,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},ma.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:o,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Oi.config.productionTip=!1,Oi.use(Is),Oi.use(Ea),Oi.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Oi;Ss(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),i=new r,o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(i)),s={};return Object.keys(o).reduce((function(n,e){return e.startsWith("$")&&(n[e]=o[e].get),n}),s),{computed:s}}((function(n){return function(){function e(){ha(this,e)}return fa(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var i in r)"/"===i?e=r[i]:0===this.$page.path.indexOf(i)&&(n=r[i]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),da)),Oi.component("Content",Ca),Oi.component("ContentSlotsDistributor",Pa),Oi.component("OutboundLink",ka),Oi.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Oi.component("Layout",Ys("Layout")),Oi.component("NotFound",Ys("NotFound")),Oi.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.8.2",hash:"801bc3a"},function(n){return za.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);